module
    import http from 'node:http'
    import express from 'express'
    import expressWs from 'express-ws'
    import fs from 'node:fs'
    +
    const { app, getWss } = expressWs(express())
        # set up express and web socket
    const wss = getWss()
    const server = http.createServer(app)
    _ app.use(express.static('public'))
        # set up static content and ejs views
    _ app.set('view engine', 'ejs')
    +
    let count = 0
        # last known count
    +
    _ app.get
        @ '/'
        async=>
            param _request
            param response
            const oldCount = count
            # increment counter in counter.txt file
            try
                set count = parseInt(fs.readFileSync('counter.txt', 'utf-8')) + 1
            catch
                set count = 1
            _ fs.writeFileSync('counter.txt', count.toString())
            if oldCount !== count
                # publish new count to all websocket clients
                for const client of wss.clients
                    try
                        _ client.send
                            _ count.toString
                    catch
            _ response.render
                @ 'index'
                {
                    @ count
                # render HTML response
        # Main page
    $include express_shutdown
    $include express_npm
    _ app.ws
        @ '/websocket'
        =>
            param ws
            # update client on a best effort basis
            if count
                try
                    _ ws.send
                        _ count.toString
                catch
            _ ws.on('message', console.log)
                # We donâ€™t expect any messages on websocket, but log any ones we do get.
        # Define web socket route
    _ server.listen
        @ 3000
        =>
            _ console.log('Server is listening on port 3000')
        # Start web server on port 3000