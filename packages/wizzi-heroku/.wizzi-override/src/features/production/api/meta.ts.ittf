module

    $
        var md = {
            Name: 'MetaProduction',
            name: 'metaProduction',
            mongoName: 'meta',
            descr: 'meta production',
            prefix: 'mp',
            query: [
                { name: 'owner', type: 'string' },
                { name: 'name', type: 'string' },
            ],
            fields: [
                { name: 'owner', type: 'string' },
                { name: 'name', type: 'string' },
                { name: 'description', type: 'string' },
                { name: 'packiFiles', type: 'string' },
            ],
            created_at: true,
            updated_at: true,
            update_delete_by_id: true
        }
    
    imports_and_validate_api(&md)
    $*
    import NodeCache from 'node-cache'        
    import
        @ GetMetaProductionModel
        from '../mongo/meta'
    import
        @ IMetaProductionModel
        from '../types'
    import
        @ ValidateResult
        @ CRUDResult
        from '../../types'
    import
        @ packiTypes
        from '../../packi'
    import
        @ wizziProds
        from '../../wizzi'
    import
        @ tFolderApi
        @ productionApi
        from '../index'
    import
        @ prepareGenerationFromWizziJson
        from './artifact'
    +
    const myname = 'features.production.api.meta'
    +
    const metaProductionCache
        new NodeCache
            { 
                @ stdTTL 120
                @ checkperiod 60
    +
    export
        async-function validateMetaProduction
            param owner
                :string
            param name
                :string
            const MetaProduction = GetMetaProductionModel()
            return
                new Promise
                    =>
                        param resolve
                        param reject
                        let query = { owner: owner, name: name }
                        _ MetaProduction.find
                            @ query
                            =>
                                param err
                                param result
                                $$ loog myname, 'validateMetaProduction', 'MetaProduction.find', 'error', err
                                if err
                                    return reject(err)
                                if result.length == 1
                                    return 
                                        _ resolve
                                            {
                                                @ isValid false
                                                @ message 'meta production already exists'
                                _ resolve
                                    {
                                        @ isValid true
    *$
    v08/mongo/crud/get_list_api(&md)
    v08/mongo/crud/get_api(&md)
    get_object_api(&md)
    v08/mongo/crud/create_api(&md)
    v08/mongo/crud/update_api(&md)
    v08/mongo/crud/delete_api(&md)
    $include meta/cached_get_save
    $include meta/get_templatePackiFiles
    $include meta/get_metaGeneration.ts