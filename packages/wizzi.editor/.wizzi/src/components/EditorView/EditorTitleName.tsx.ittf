module
    import 
        @ StyleSheet
        @ css
        from 'aphrodite'
    import 
        as React
        from 'react'
    import 
        @ withThemeName
        @ ThemeName
        from '../../features/preferences'
    import 
        @ c
        from '../ThemeProvider'
    import Popover from '../widgets/Popover'
    import 
        @ PopoverIcon
        from '../../assets/PopoverIcon'
    :type Props
        :{ 
            :p name
                :string 
            :p description
                :optional 
                :string 
            :p onShowEditModal
                :=> 
                    :void 
            :p onSubmitMetadata
                :=> 
                    :void 
                    param details
                        :{ 
                            :p name
                                :string 
                            :p description
                                :string 
            :p theme
                :ref ThemeName
    :type State
        :{ 
            :p name
                :string 
            :p focused
                :boolean 
    const RETURN_KEYCODE = 13
    const ESCAPE_KEYCODE = 27
    function validateName
        param name
            :string 
        return 
            iif name
                then
                    iif /^[a-z_\-\d\s]+$/i.test(name)
                        then null
                        else new Error('Name can only contain letters, numbers, space, hyphen (-) and underscore (_).')
                else new Error('Name cannot be empty.')
    class EditorTitleName
        super React.Component
            :param 
                :ref Props
            :param 
                :ref State
        m getDerivedStateFromProps
            static
            param props
                :ref Props
            param state
                :ref State
            if state.name !== props.name && !state.focused
                return 
                    { 
                        @ name props.name || ''
            return null
        p state
            :ref State
            { 
                @ name this.props.name || ''
                @ focused false
        => _handleChangeText
            param e
                :ref React.ChangeEvent
                    :param 
                        :ref HTMLInputElement
            _ this.setState
                { 
                    @ name e.target.value
        => _handleFocus
            param e
                :ref React.FocusEvent
                    :param 
                        :ref HTMLInputElement
            _ e.target.select()
            _ this.setState
                { 
                    @ focused true
        p _handleBlur
            async=> 
                if !validateName(this.state.name)
                    await 
                        _ this.props.onSubmitMetadata
                            { 
                                @ name this.state.name
                                @ description this.props.description ?? ''
                _ this.setState
                    { 
                        @ focused false
        => _handleKeyDown
            param e
                :ref React.KeyboardEvent
                    :param 
                        :ref HTMLInputElement
            if (e.keyCode === RETURN_KEYCODE || e.keyCode === ESCAPE_KEYCODE) && !validateName(this.state.name)
                _ 
                    ( 
                        @expr e.target
                            :as 
                                :ref HTMLInputElement
                    ._ blur
        m render
            const 
                { 
                    @ name
                = this.state
            const 
                { 
                    @ description
                    @ onShowEditModal
                    @ theme
                = this.props
            const error = validateName(name)
            return 
                div 
                    @ className {css(styles.container)}
                    div 
                        @ className {css(styles.titleContainer)}
                        h1 
                            @ className {css(styles.title)}
                            div 
                                @ className {css(styles.content)}
                                div 
                                    @ className {css(styles.field, styles.phantom)}
                                    + {name.replace(/\n/g, '')}
                                input 
                                    @ onFocus {this._handleFocus}
                                    @ onBlur {this._handleBlur}
                                    @ onKeyDown {this._handleKeyDown}
                                    @ value {name}
                                    @ onChange {this._handleChangeText}
                                    @ className {css(styles.field, styles.editable)}
                        < Popover 
                            @ content
                                < React.Fragment
                                    p 
                                        @ className {css(styles.description)}
                                        + {description}
                                    button 
                                        @ onClick {onShowEditModal}
                                        @ className {css(styles.editButton)}
                                        + Edit details
                            button 
                                @ className
                                    _ css
                                        @expr styles.icon
                                < PopoverIcon
                                    @ theme {theme}
                    { 
                        iif this.state.focused && error
                            then
                                div 
                                    @ className {css(styles.validation)}
                                    + {error.message}
                            else null
    export-default withThemeName(EditorTitleName)
    const styles
        _ StyleSheet.create
            { 
                { container
                { titleContainer
                    @ display 'flex'
                    @ flexDirection 'row'
                    @ alignItems 'flex-end'
                { title
                    @ fontSize '1.3em'
                    @ lineHeight '1.3em'
                    @ fontWeight 600
                    @ margin 0
                    @ position 'relative'
                    @ textOverflow 'ellipsis'
                    @ overflow 'hidden'
                { content
                    @ display 'flex'
                    @ alignItems 'center'
                    @ maxWidth '100%'
                { field
                    @ display 'inline-block'
                    @ margin 0
                    @ padding '1px 6px'
                { editable
                    @ position 'absolute'
                    @ appearance 'none'
                    @ background 'none'
                    @ outline 0
                    @ border 0
                    @ left 0
                    @ width '100%'
                    @ borderRadius 3
                    { ':hover'
                        @ boxShadow
                            `lit 
                                + inset 0 0 0 1px&nbsp;
                                _ c('border')
                                + 
                    { ':focus'
                        @ boxShadow
                            `lit 
                                + inset 0 0 0 1px&nbsp;
                                _ c('selected')
                                + 
                    { ':hover:focus'
                        @ boxShadow
                            `lit 
                                + inset 0 0 0 1px&nbsp;
                                _ c('selected')
                                + 
                { phantom
                    @ display 'inline-block'
                    @ maxWidth '100%'
                    @ pointerEvents 'none'
                    @ whiteSpace 'pre'
                    @ overflow 'hidden'
                    @ opacity 0
                { validation
                    @ position 'absolute'
                    @ backgroundColor c('error')
                    @ color c('error-text')
                    @ fontSize 13
                    @ fontWeight 'normal'
                    @ padding '6px 12px'
                    @ borderRadius 3
                    @ marginTop 8
                    @ textAlign 'left'
                    @ zIndex 1000
                    @ minWidth 100
                    { ':before'
                        @ content '""'
                        @ display 'block'
                        @ position 'absolute'
                        @ bottom '100%'
                        @ width 0
                        @ height 0
                        @ borderLeft '6px solid transparent'
                        @ borderRight '6px solid transparent'
                        @ borderBottom
                            `lit 
                                + 6px solid&nbsp;
                                _ c('error')
                                + 
                { icon
                    @ display 'block'
                    @ position 'relative'
                    @ appearance 'none'
                    @ backgroundColor 'transparent'
                    @ backgroundRepeat 'no-repeat'
                    @ backgroundSize 16
                    @ backgroundPosition 'center'
                    @ border 0
                    @ outline 0
                    @ margin 0
                    @ padding 0
                    @ height 24
                    @ width 24
                    @ opacity 0.3
                    @ transition '.2s'
                    { ':hover'
                        @ opacity 0.8
                { description
                    @ margin 16
                { infoLight
                    @ backgroundImage
                        `lit 
                            + url(
                            _ require('../../assets/info-icon.png')
                            + )
                { infoDark
                    @ backgroundImage
                        `lit 
                            + url(
                            _ require('../../assets/info-icon-light.png')
                            + )
                { editButton
                    @ width '100%'
                    @ background 'none'
                    @ outline 0
                    @ border 'none'
                    @ borderTop
                        `lit 
                            + 1px solid&nbsp;
                            _ c('border')
                            + 
                    @ color c('primary')
                    @ padding '8px 16px'
                    @ fontWeight 'bold'
                    { ':hover'
                        @ backgroundColor c('hover')
