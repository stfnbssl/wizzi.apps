< LazyLoad 
    @ load
        async=> 
            :return
                :ref Promise
                    :param 
                        :{ 
                            :p default
                                :ref React.ComponentType
                                    :param 
                                        :ref EditorProps
            let timeout
                :any 
            const MonacoEditorPromise
                _ import
                    @ '../Editor/MonacoEditor'
                        #
                            # webpackPreload: true
                    ._ then
                        => 
                            param editor
                            (
                                { 
                                    @ editor
                                    @ type 'monaco'
                # Fallback to simple editor if monaco editor takes too long to load
            const SimpleEditorPromise
                new Promise
                    => 
                        param resolve
                        param reject
                        set timeout =
                            _ setTimeout
                                => 
                                    _ this._showBanner('slow-connection', BANNER_TIMEOUT_LONG)
                                    _ import
                                        @ '../Editor/SimpleEditor'
                                        ._ then
                                            @ resolve
                                            @ reject
                                @ EDITOR_LOAD_FALLBACK_TIMEOUT
                    ._ then
                        => 
                            param editor
                            (
                                { 
                                    @ editor
                                    @ type 'simple'
                # Fallback to simple editor if monaco editor takes too long to load
            return 
                _ Promise.race
                    [ 
                        _ MonacoEditorPromise.catch
                            => 
                                + SimpleEditorPromise
                        @ SimpleEditorPromise
                    ._ then
                        => 
                            { 
                                @ editor
                                @ type
                                :any 
                            _ this.setState
                                { 
                                    @ loadedEditor type
                            _ clearTimeout(timeout)
                            return editor
    { 
        => 
            { 
                @ loaded
                @ data Comp
            set this._EditorComponent = Comp
            const file = files[selectedFile]
            if file
                const 
                    { 
                        @ contents
                    = file
                const isMarkdown = selectedFile.endsWith('.md')
                if isMarkdown && this.state.isMarkdownPreview
                    return 
                        < React.Fragment
                            < LazyLoad 
                                @ load
                                    => 
                                        _ import
                                            @ '../Markdown/MarkdownPreview'
                                { 
                                    => 
                                        { 
                                            @ loaded mdLoaded
                                            @ data MarkdownPreview
                                        if mdLoaded && MarkdownPreview
                                            return 
                                                < MarkdownPreview 
                                                    @ source {contents as string}
                                        return 
                                            < EditorShell 
                            button 
                                @ className {css(styles.previewToggle)}
                                @ onClick {this._toggleMarkdownPreview}
                                svg 
                                    @ width "12px"
                                    @ height "12px"
                                    @ viewBox "0 0 18 18"
                                    @ className {css(styles.previewToggleIcon)}
                                    g 
                                        @ transform "translate(-147.000000, -99.000000)"
                                        g 
                                            @ transform "translate(144.000000, 96.000000)"
                                            path 
                                                @ d "M3,17.25 L3,21 L6.75,21 L17.81,9.94 L14.06,6.19 L3,17.25 L3,17.25 Z M20.71,7.04 C21.1,6.65 21.1,6.02 20.71,5.63 L18.37,3.29 C17.98,2.9 17.35,2.9 16.96,3.29 L15.13,5.12 L18.88,8.87 L20.71,7.04 L20.71,7.04 Z"
                if loaded && Comp
                    return 
                        $$ < React.Fragment
                        div
                            @ className {css(styles.editorComponentOuter)}
                            < Comp 
                                @ className {css(styles.editorComponent)}
                                @ selectedFile {selectedFile}
                                @ files {files}
                                @ autoFocus {!/Untitled file.*\.(js|tsx?)$/.test(selectedFile)}
                                @ readOnly {this.props.readOnly}
                                @ updateFiles {this.props.updateFiles}
                                @ onSelectFile {this.props.onSelectFile}
                                @ wordWrap 'off'
                                $if false
                                    @ lineNumbers undefined
                            { 
                                iif isMarkdown
                                    then
                                        button 
                                            @ className {css(styles.previewToggle)}
                                            @ onClick {this._toggleMarkdownPreview}
                                            svg 
                                                @ width "16px"
                                                @ height "12px"
                                                @ viewBox "0 0 22 16"
                                                @ className {css(styles.previewToggleIcon)}
                                                g 
                                                    @ transform "translate(-145.000000, -1156.000000)"
                                                    g 
                                                        @ transform "translate(144.000000, 1152.000000)"
                                                        path 
                                                            @ d "M12,4.5 C7,4.5 2.73,7.61 1,12 C2.73,16.39 7,19.5 12,19.5 C17,19.5 21.27,16.39 23,12 C21.27,7.61 17,4.5 12,4.5 L12,4.5 Z M12,17 C9.24,17 7,14.76 7,12 C7,9.24 9.24,7 12,7 C14.76,7 17,9.24 17,12 C17,14.76 14.76,17 12,17 L12,17 Z M12,9 C10.34,9 9,10.34 9,12 C9,13.66 10.34,15 12,15 C13.66,15 15,13.66 15,12 C15,10.34 13.66,9 12,9 L12,9 Z"
                                    else null
            else
                return 
                    < NoFileSelected 
            return 
                < EditorShell 