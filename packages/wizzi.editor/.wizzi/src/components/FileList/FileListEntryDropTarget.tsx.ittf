module
    import 
        as React
        from 'react'
    import 
        @ FileSystemEntry
        @ getUniquePath
        @ dragEventIncludes
        from '../../features/file'
    import 
        @ withThemeName
        @ ThemeName
        from '../../features/preferences'
    import 
        @ lastDraggedEntry
        from './FileListEntryBase'
    :type Props
        :{ 
            :p entry
                :optional 
                :ref FileSystemEntry
            :p rest
                :[ 
                    :ref FileSystemEntry
            :p onExpand
                :optional 
                :=> 
                    :void 
                    param path
                        :string 
                    param expand
                        :boolean 
                        :optional 
            :p onRename
                :=> 
                    :void 
                    param oldPath
                        :string 
                    param newPath
                        :string 
            :p className
                :optional 
                :string 
            :p theme
                :ref ThemeName
            :p children
                :optional 
                :any 
    +
    class FileListEntryDropTarget
        super React.PureComponent
            :param 
                :ref Props
        m componentDidMount
            const container = this._container.current
            if container
                _ container.addEventListener('dragover', this._handleDragOver)
                    # We don't use react's event system since we need to stop the events from bubbling up
                _ container.addEventListener('dragleave', this._handleDragLeave)
                _ container.addEventListener('dragend', this._handleDragLeave)
                _ container.addEventListener('drop', this._handleDrop)
        m componentWillUnmount
            const container = this._container.current
            if container
                _ container.removeEventListener('dragover', this._handleDragOver)
                _ container.removeEventListener('dragleave', this._handleDragLeave)
                _ container.removeEventListener('dragend', this._handleDragLeave)
                _ container.removeEventListener('drop', this._handleDrop)
        => _getParentPath
            param path
                :string 
            ( 
                iif path.includes('/')
                    then path.replace(/\/[^/]+$/, '')
                    else null
        => _isDirectChild
            param path
                :string 
            if this.props.entry && this.props.entry.item.path === path
                return true
            const parent = this._getParentPath(path)
            if this.props.entry && parent
                return this.props.entry.item.path === parent
            return this.props.entry == null && parent == null
        => _handleDragLeave
            param e
                :any 
            set e.currentTarget.style.backgroundColor = null
            _ clearTimeout(this._dragTimer)
            set this._dragTimer = null
        => _handleDragOver
            param e
                :any 
            const entry = lastDraggedEntry
            if !dragEventIncludes(e, 'application/json') || (this.props.entry && this.props.entry.item.type !== 'folder') || !entry
                return 
            if entry.item.type !== 'file' && entry.item.type !== 'folder'
                return 
            _ e.stopPropagation()
            if this._isDirectChild(entry.item.path)
                return 
            _ e.preventDefault()
            set e.currentTarget.style.backgroundColor =
                iif this.props.theme === 'dark'
                    then 'rgba(255, 255, 255, .1)'
                    else 'rgba(0, 0, 0, .1)'
            if this._dragTimer
                return 
            set this._dragTimer =
                _ setTimeout
                    => 
                        if this.props.entry && !this.props.entry.state.isExpanded && this.props.onExpand
                            _ this.props.onExpand(this.props.entry.item.path)
                    @ 500
        p _dragTimer
            :any 
        => _handleDrop
            param e
                :any 
            set e.currentTarget.style.backgroundColor = null
            if !dragEventIncludes(e, 'application/json') || (this.props.entry && this.props.entry.item.type !== 'folder')
                return 
            _ e.preventDefault()
            _ e.stopPropagation()
            try 
                const data = e.dataTransfer.getData('application/json')
                const entry = JSON.parse(data)
                if (entry.item.type !== 'file' && entry.item.type !== 'folder') || this._isDirectChild(entry.item.path)
                    return 
                const name = entry.item.path.split('/').pop()
                _ this.props.onRename
                    @expr entry.item.path
                    _ getUniquePath
                        _ this.props.rest.map
                            => 
                                param e
                                +
                                    @expr e.item.path
                        iif this.props.entry
                            then this.props.entry.item.path + '/' + name
                            else name
            catch e
        p _container
            _ React.createRef
                :param 
                    :ref HTMLDivElement
        m render
            const 
                { 
                    @ entry
                    @ rest
                    @ onExpand
                    @ onRename
                    @ theme
                    ... restProps
                = this.props
                # eslint-disable-next-line no-unused-vars
            return 
                div 
                    @ {...restProps}
                    @ ref {this._container}
    export-default withThemeName(FileListEntryDropTarget)
