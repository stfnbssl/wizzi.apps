module
    import
        @ ThemeName
        from '../preferences/index'

    $if wzCtx.Build.usePackiAspects
        +
        export
            :type Packi
                :{
                    :p id
                        :string
                    :p files
                        :ref PackiFiles
    +
    export
        :type PackiCodeFile
            :{
                :p type
                    :literal 'CODE'
                :p contents
                    :string
                :p generated
                    :optional
                    :boolean
                :p bothRealAndGenerated
                    :optional
                    :boolean
                :p error
                    :optional
                    :ref Error
        #
            #
            # A non asset file that is included with the project.
            # This can be either a code file (.js/.tsx) or a support
            # file such as a markdown or json file.
            #
    +
    export
        :type PackiAssetFile
            :{
                :p type
                    :literal 'ASSET'
                :p contents
                    :union
                        :string
                        :ref File
                        :ref Blob
                        :ref FormData
                    # string = url
                :p generated
                    :optional
                    :boolean
                :p bothRealAndGenerated
                    :optional
                    :boolean
                :p error
                    :optional
                    :ref Error
                    # string = url
        #
            #
            # An asset file that refers to externaly available
            # content such as an image or font.
            #
            # When resolved, the `contents` field is an URL to the
            # uploaded asset. A File, Blob or FormData object may
            # also be provided after which it is automatically uploaded
            # and converted into an URL.
            #
    +
    export
        :type PackiFile
            :union
                :ref PackiCodeFile
                :ref PackiAssetFile
        #
            #
            # The content of a Packi code or asset file.
            #
    +
    export
        :type PackiFiles
            :{
                :index
                    :ref PackiFile
                    param path
                        :string
        #
            #
            # Dictionary of file-names and their content that make up
            # the files of the Packi.
            #
    +
    export
        :interface PackiError
            :extends Error
            :p fileName
                :optional
                :string
            :p lineNumber
                :optional
                :number
            :p columnNumber
                :optional
                :number
        #
            #
            # An error that can optionally hold a file-name and line/column location.
            #
    +
    export
        :type PackiUser
            :{
                :p sessionSecret
                    :optional
                    :string
                :p accessToken
                    :optional
                    :string
        #
            #
            # User that is used for communicating with the Wizzi servers.
            #
    +
    export
        :type PackiState
            :{
                :p files
                    :ref PackiFiles
                    #
                        # Files that make up the content of the packed Production. 
                :p id
                    :optional
                    :string
                    #
                        # The id of the Production
                :p owner
                    :string
                    #
                        # The owner of the Production
                :p name
                    :string
                    #
                        # The name of the Production
                :p description
                    :string
                    #
                        # Additional description of the packed Production. 
                :p packiProduction
                    :optional
                    :ref PackiProduction
                    #
                        # The packed Production kind (artifact | package | meta | plugin | tfolder). 
                :p mainIttf
                    :optional
                    :string
                    #
                        # When the PackiProduction == 'artifact' is the main ITTF Document of the artifact.
                :p wizziSchema
                    :optional
                    :string
                    #
                        # When the PackiProduction == 'artifact' is the Wizzi Schema of the main ITTF Document.
                :p url
                    :string
                    #
                        # TODO ???
                :p user
                    :optional
                    :ref PackiUser
                :p unsaved
                    :boolean
                    #
                        #
                        # Unsaved status of the Packi. 
                        # Becomes `true` when the Packi code is changed and `false` whenever the Packi is saved.
                        #
                :p previewURL
                    :optional
                    :string
                    #
                        # URL to use to when loading the web-preview in an iframe.
                :p readOnly
                    :optional
                    :boolean
                    #
                        # The packed Production cannot be changed
                :p generated
                    :optional
                    :boolean
                    #
                        # The packed Production is generated can be viewed but not changed
    +
    export
        :type SaveStatus
            :union
                :literal 'unsaved'
                :literal 'edited'
                :literal 'saving-draft'
                :literal 'saved-draft'
                :literal 'publishing'
                :literal 'published'
                :literal 'changed'
    +
    export
        :type PackiListenerSubscription
            :=>
                :any
    +
    export
        :type SavedPacki
            :{
                :p _id
                    :string
                :p created
                    :string
                :p owner
                    :string
                :p name
                    :string
                :p description
                    :string
                :p packiProduction
                    :ref PackiProduction
                :p files
                    :ref PackiFiles
                :p mainIttf
                    :optional
                    :string
                :p wizziSchema
                    :optional
                    :string
                :p isDraft
                    :optional
                    :boolean
    +
    export
        :type PackiDefaults
            :{
                :p name
                    :string
    +
    export
        :type PackiWindowRef
            :{
                :p current
                    :union
                        :ref Window
                        :null
    +
    export
        :type PackiOptions
            :{
                :p id
                    :optional
                    :string
                :p name
                    :optional
                    :string
                :p description
                    :optional
                    :string
                :p mainIttf
                    :optional
                    :string
                :p wizziSchema
                    :optional
                    :string
                :p files
                    :optional
                    :ref PackiFiles
                :p readOnly
                    :optional
                    :boolean
                :p generated
                    :optional
                    :boolean
                :p apiURL
                    :optional
                    :string
                :p host
                    :optional
                    :string
                :p verbose
                    :optional
                    :boolean
                :p user
                    :optional
                    :ref PackiUser
                :p packiProduction
                    :optional
                    :ref PackiProduction
    +
    export
        :type PackiSaveOptions
            :{
                :p isDraft
                    :optional
                    :boolean
                :p ignoreUser
                    :optional
                    :boolean
                :p excludeFromHistory
                    :optional
                    :boolean
    +
    export
        :type PackiStateListener
            :=>
                :any
                param state
                    :ref PackiState
                param prevState
                    :ref PackiState
    +
    export
        :type QueryInitParams
            :{
                :p code
                    :optional
                    :string
                :p sourceUrl
                    :optional
                    :string
                :p name
                    :optional
                    :string
                :p description
                    :optional
                    :string
                :p files
                    :optional
                    :string
                :p iframeId
                    :optional
                    :string
                :p waitForData
                    :optional
                    :literal 'boolean'
                :p saveToAccount
                    :optional
                    :union
                        :literal 'true'
                        :literal 'false'
    +
    export
        :type QueryStateParams
            :{
                :p preview
                    :optional
                    :union
                        :literal 'true'
                        :literal 'false'
                :p theme
                    :optional
                    :ref ThemeName
                :p verbose
                    :optional
                    :union
                        :literal 'true'
                        :literal 'false'
                :p hideQueryParams
                    :optional
                    :union
                        :literal 'true'
                        :literal 'false'
    +
    export
        :type QueryParams
            :intersect
                :ref QueryInitParams
                :ref QueryStateParams
    +
    export
        :type RouterData
            :union
                :{
                    :p type
                        :literal "success"
                    :p packi
                        :optional
                        :ref SavedPacki
                    :p defaults
                        :ref PackiDefaults
                :{
                    :p type
                        :literal "error"
                    :p error
                        :{
                            :p message
                                :string
                    :p defaults
                        :ref PackiDefaults
    +
    export
        :type PackiFilesOrKind
            = PackiFiles | string
    +
    export
        :type PackiProduction
            :union
                :literal 'artifact'
                :literal 'package'
                :literal 'meta'
                :literal 'plugin'
                :literal 'tfolder'
    +
    export
        :type PackiUploadPayload
            :{        
                :p name
                    :optional
                    :string
                :p description
                    :optional
                    :string
                :p mainIttf
                    :optional
                    :string
                :p wizziSchema
                    :optional
                    :string
                :p files
                    :optional
                    :ref PackiFiles