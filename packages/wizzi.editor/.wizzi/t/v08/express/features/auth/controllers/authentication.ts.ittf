$group
    $params &md
    $
        var ctrl = {
            name: 'Authentication',
            path: '/api/v1/authenticate'
        }
    controller( &ctrl )
        $append imports
            import
                @ AuthRequest
                @ IAccount
                from '../types'
            $if wzCtx.Build.useMongoDb
                import
                    @ GetAccountModel
                    @ AccountModelType
                    from '../mongo/account'
            import
                @ authenticate
                @ jwtAuth
                $if wzCtx.Build.useMongoDb
                    @ getLoggedUserFromAccount
                from '../manager'
        _ this.router.use
            function
                param request
                    :ref AuthRequest
                param res
                    :ref Response
                param next
                    :any
                if request.query.socketId
                    log 'features.auth.controllers.auth.middleware.request.originalUrl,query', request.originalUrl, request.query
                    log 'features.auth.controllers.auth.middleware.request.sessionID, session', request.sessionID, request.session
                    set request.session.socketId = request.query.socketId
                    set request.session.socketUserId = request.query.socketUserId
                _ next()
        _ this.router.get
            `lit
                + /github
            _ authenticate
                @ 'github'
                {
                    [ scope
                        @ 'user:email'
                        @ 'public_repo'
            _ this.githubConnect.bind(this)
        _ this.router.get
            `lit
                + /github/callback
            _ authenticate
                @ 'github'
                {
                    @ failureRedirect
                        `lit
                            +
                            @ this.path
                            + /account
            _ this.githubConnectCallback.bind(this)
        _ this.router.get
            `lit
                +
                @ this.path
                + /github/loggedin/:uid
            _ this.getGithubLoggedIn.bind(this)
        $append handlers
            handler( githubConnect )
            handler( githubConnectCallback )
                log '============================================================'
                log 'Successful authentication'
                # Successful authentication
                $if wzCtx.Build.useSocketIO
                    log 'features.auth.controllers.auth.githubCallback', 'request.originalUrl, request.originalUrl, 'session.socketId, request.session.socketId, 'socketUserId', request.session.socketUserId
                log 'features.auth.controllers.auth.githubCallback', 'request.sessionID', request.sessionID, 'request.session', request.session, 'request.user', request.user
                $if wzCtx.Build.useSocketIO
                    const io = request.app.get('io')
                const ruser: any = (request.user as any)
                const user
                    {
                        @ id ruser._id
                        @ uid ruser.uid
                        @ username ruser.username
                        @ displayName ruser.displayName
                        @ picture ruser.avatar_url
                $if wzCtx.Build.useSocketIO
                    log 'features.auth.controllers.auth.githubCallback.sending user via socket', 'github', 'request.session.socketId', request.session.socketId, 'ruser', ruser
                    _ io.in(request.session.socketId).emit('github', user)
                set (request.session as any).token = ruser.tokens[0]
                const account
                    :ref IAccount
                    {
                        @ domain 'github.com'
                        @ uid ruser.uid
                        @ username ruser.username
                        @ displayName ruser.displayName
                        @ avatar_url ruser.avatar_url
                        [ tokens
                            {
                                @ kind ruser.tokens[0].kind
                                @ token ruser.tokens[0].token
                                @ attributes ruser.tokens[0].attributes
                $if wzCtx.Build.useMongoDb
                    const AccountModel = GetAccountModel()
                    const result
                        await
                            _ AccountModel.updateOne
                                {
                                    @ uid ruser.uid
                                    @ domain 'github.com'
                                @ account
                                {
                                    @ upsert true
                    log 'features.auth.controllers.auth.githubCallback.account.save', 'result', result
                _ response.redirect('/account/profile')
            +
            handler( getGithubLoggedIn )
                const uid = request.params.uid
                log 'features.auth.controllers.auth.getGithubLoggedIn.uid', uid
                $if wzCtx.Build.useMongoDb
                    const user
                        await
                            _ getLoggedUserFromAccount(uid, 'github.com').then
                                =>
                                    param user
                                    _ sendSuccess(response, user)
                                ._ catch
                                    =>
                                        param err
                                        _ sendFailure(response, err, 501)
                $else
                    _ sendSuccess
                        @ response
                        {
                            @ userId uid
