$group
    $params &md
    $if wzCtx.Build.useConfig
        import path from 'path'
        $if wzCtx.type == 'module'
            import { dirname } from 'path'
            import { fileURLToPath } from 'url'
            const __dirname = dirname(fileURLToPath(import.meta.url))
        $if wzCtx.Build.config.useEnvalid
            import dotenv from 'dotenv'
            import
                @ cleanEnv
                @ str
                @ bool
                @ port
                from 'envalid'
        import
            @ ConfigType
            from './types'
        function validateEnv
            _ dotenv.config
            let checkedEnv
                $if wzCtx.Build.config.useEnvalid
                    _ cleanEnv
                        @expr process.env
                        {
                            @ PORT port()
                            @ SESSION_SECRET str()
                            @ NO_CACHE bool()
                            $if wzCtx.Build.useCors
                                @ CORS_CLIENT_ORIGIN str()
                            $if wzCtx.Build.useMongoDb
                                @ MONGO_HOST str()
                                @ MONGO_USER str()
                                @ MONGO_PASSWORD str()
                                @ MONGO_PATH str()
                            $if wzCtx.Build.useAuthentication
                                @ AUTH0_DOMAIN str()
                                $if wzCtx.Build.usePacki
                                    @ AUTH0_PACKI_CLIENT_ID str()
                                    @ AUTH0_PACKI_CLIENT_SECRET str()
                                    @ AUTH0_PACKI_CALLBACK_URL str()
                                    @ AUTH0_PACKI_API_ID str()
                                    @ AUTH0_PACKI_BACKEND_APP_ID str()
                                    @ AUTH0_PACKI_BACKEND_APP_SECRET str()
                                @ AUTH0_ISSUER_BASE_URL str()
                                @ AUTH0_CLIENT_ID str()
                                @ AUTH0_BASE_URL str()
                                @ AUTH0_SECRET str()
                                $if wzCtx.Build.authentication.useGithub
                                    @ GITHUB_CLIENT_ID str()
                                    @ GITHUB_CLIENT_SECRET str()
                                    @ GITHUB_CALLBACK_URL str()
                                $if wzCtx.Build.authentication.useGoogle
                                    @ GOOGLE_CLIENT_ID str()
                                    @ GOOGLE_CLIENT_SECRET str()
                                    @ GOOGLE_CALLBACK_URL str()
                            $if wzCtx.Build.useWizzi
                                @ IS_WIZZI_DEV bool()
                            $if wzCtx.Build.usePacki
                                @ PACKI_STORE_FOLDER str()
                                @ PACKI_TEMPLATES_FOLDER str()
                                @ PACKI_API_ENDPOINT str()
                $else
                    {
                        @ PORT ${wzCtx.App.port}
                        @ SESSION_SECRET "axr45hngmuoil9********0ofgt*kjj6767648%$Â£3f5&/4bnsa-----qq4)$35670qq4q"
                        @ NO_CACHE ${wzCtx.Build.noCache}
                        $if wzCtx.Build.useCors
                            @ CORS_CLIENT_ORIGIN "${wzCtx.Build.cors.clientOrigin}"
                        $if wzCtx.Build.useMongoDb
                            @ MONGO_HOST "${wzCtx.Build.mongoDb.host}"
                            @ MONGO_USER "${wzCtx.Build.mongoDb.user}"
                            @ MONGO_PASSWORD "${wzCtx.Build.mongoDb.paddword}"
                            @ MONGO_PATH "${wzCtx.Build.mongoDb.dbPath}/${wzCtx.Build.mongoDb.dbName}"
                        $if wzCtx.Build.useAuthentication
                            @ AUTH0_ISSUER_BASE_URL "https://${wzCtx.Build.authentication.tenant}.auth0.com"
                            @ AUTH0_CLIENT_ID "${wzCtx.Build.authentication.clientId}"
                            @ AUTH0_BASE_URL "${wzCtx.Build.authentication.baseURL}"
                            @ AUTH0_SECRET "${wzCtx.Build.authentication.longRandomString}"
                            $if wzCtx.Build.authentication.useGithub
                                @ GITHUB_CLIENT_ID "${wzCtx.Build.authentication.github.clientId}"
                                @ GITHUB_CLIENT_SECRET "${wzCtx.Build.authentication.github.clientSecret}"
                                @ GITHUB_CALLBACK_URL "${wzCtx.Build.authentication.github.callbackURL}"
                            $if wzCtx.Build.authentication.useGoogle
                                @ GOOGLE_CLIENT_ID "${wzCtx.Build.authentication.google.clientId}"
                                @ GOOGLE_CLIENT_SECRET "${wzCtx.Build.authentication.google.clientSecret}"
                                @ GOOGLE_CALLBACK_URL "${wzCtx.Build.authentication.google.callbackURL}"
            $if wzCtx.Build.usePacki
                set process.env.PACKI_API_ENDPOINT = checkedEnv.PACKI_API_ENDPOINT
                log 'config/env.ts, PACKI_API_ENDPOINT after', process.env.PACKI_API_ENDPOINT
            return checkedEnv
        $if wzCtx.Build.usePacki
            export
                const packiFilePrefix = 'json://'
        let config
            :ref ConfigType
        export-default
            function create
                :return
                    :ref ConfigType
                if config == null
                    const checkedEnv = validateEnv()
                    $if wzCtx.Build.isClientServer
                        const __rootPath = path.join(__dirname, '..', '..', '..', '..')
                    $else
                        const __rootPath = path.join(__dirname, '..', '..', '..')
                    const __ittfPath = path.join(__rootPath, 'ittf')
                    const __dataPath = path.join(__rootPath, 'data')
                    set config =
                        {
                            @ port checkedEnv.PORT
                            @ sessionSecret checkedEnv.SESSION_SECRET
                            @ noCache checkedEnv.NO_CACHE
                            $if wzCtx.Build.useCors
                                @ corsClientOrigin checkedEnv.CORS_CLIENT_ORIGIN
                            $if wzCtx.Build.useMongoDb
                                @ mongoHost checkedEnv.MONGO_HOST
                                @ mongoUser checkedEnv.MONGO_USER
                                @ mongoPassword checkedEnv.MONGO_PASSWORD
                                @ mongoPath checkedEnv.MONGO_PATH
                                @ mongoConnectUrl ""
                            $if wzCtx.Build.useAuthentication
                                @ auth0Domain checkedEnv.AUTH0_DOMAIN
                                $if wzCtx.Build.usePacki
                                    @ auth0PackiClientId checkedEnv.AUTH0_PACKI_CLIENT_ID
                                    @ auth0PackiClientSecret checkedEnv.AUTH0_PACKI_CLIENT_SECRET
                                    @ auth0PackiCallbackUrl checkedEnv.AUTH0_PACKI_CALLBACK_URL
                                    @ auth0PackiApiId checkedEnv.AUTH0_PACKI_API_ID
                                    @ auth0PackiBackendAppId checkedEnv.AUTH0_PACKI_BACKEND_APP_ID
                                    @ auth0PackiBackendAppSecret checkedEnv.AUTH0_PACKI_BACKEND_APP_SECRET
                                @ auth0IssuerBaseURL checkedEnv.AUTH0_ISSUER_BASE_URL
                                @ auth0ClientId checkedEnv.AUTH0_CLIENT_ID
                                @ auth0BaseURL checkedEnv.AUTH0_BASE_URL
                                @ auth0Secret checkedEnv.AUTH0_SECRET
                                $if wzCtx.Build.authentication.useGithub
                                    @ githubClientId checkedEnv.GITHUB_CLIENT_ID
                                    @ githubClientSecret checkedEnv.GITHUB_CLIENT_SECRET
                                    @ githubCallbackURL checkedEnv.GITHUB_CALLBACK_URL
                                $if wzCtx.Build.authentication.useGoogle
                                    @ googleClientId checkedEnv.GOOGLE_CLIENT_ID
                                    @ googleClientSecret checkedEnv.GOOGLE_CLIENT_SECRET
                                    @ googleCallbackURL checkedEnv.GOOGLE_CALLBACK_URL
                            $if wzCtx.Build.useWizzi
                                @ isWizziDev checkedEnv.IS_WIZZI_DEV
                                @ ittfPath __ittfPath
                                @ dataPath __dataPath
                                @ metaHtmlIttfPath path.join(__ittfPath, 'meta', 'html', 'index.html.ittf')
                                @ metaFolderIttfPath path.join(__ittfPath, 'meta', 'folder', 'index.html.ittf')
                                @ metaHtmlTextPath path.join(__ittfPath, 'meta', 'text', 'index.html.ittf')
                            $if wzCtx.Build.usePacki
                                @ packiStoreFolder checkedEnv.PACKI_STORE_FOLDER
                                @ packiTemplatesFolder checkedEnv.PACKI_TEMPLATES_FOLDER
                                @ packiApiEndpoint checkedEnv.PACKI_API_ENDPOINT
                    $if wzCtx.Build.useMongoDb
                        const { mongoHost, mongoUser, mongoPassword, mongoPath } = config;
                        if mongoUser && mongoUser.length > 0 && mongoPassword && mongoPassword.length > 0 && mongoHost && mongoHost.length > 0
                            set config.mongoConnectUrl = `${mongoHost}://${mongoUser}:${mongoPassword}${mongoPath}`
                        else
                            # example 'mongodb://localhost/test'
                            set config.mongoConnectUrl = `${mongoPath}`
                    _ Object.keys(config).forEach
                        =>
                            param element
                            if element.indexOf("Pass") < 0 && element.indexOf("Secr") < 0
                                _ console.log
                                    @ 'Created config'
                                    @ element
                                    @expr
                                        (
                                            + config
                                                :as
                                                    :any
                                        .[ element
                return config
