$group
    $params &md
    import util from 'util'
    import path from 'path'
    import fs from 'fs'
    import stringify from 'json-stringify-safe'
    import parseUrl from 'parseurl'
    import
        @ Application
        @ RequestHandler
        @ Request
        @ Response
        from 'express'
    import
        @ MiddlewareType
        from '../features/app/types'
    import
        @ config
        from '../features/config'
    import
        @ wizziProds
        from '../features/wizzi'
    import
        @ WizziModel
        from 'wizzi'
    export
        const IttfStaticMiddleware
            :ref MiddlewareType
            =
                =>
                    param app
                        :ref Application
                    info 'IttfStaticMiddleware. Folder served from ', path.resolve(${wzCtx.Build.express.staticFiles.basePath}, 'ittf')
                    _ app.use('/ittf', ittfMiddleware(path.resolve(${wzCtx.Build.express.staticFiles.basePath}, 'ittf'), '/ittf'))
    const extContentTypeMap
        :{
            :index
                :string
                param k
                    :string
        =
            {
                @ '.css' 'text/css'
                @ '.gif' 'image/gif'
                @ '.html' 'text/html'
                @ '.ittf' 'text/plain'
                @ '.jpeg' 'image/jpeg'
                @ '.jpg' 'image/jpg'
                @ '.js' 'text/javascript'
                @ '.json' 'application/json'
                @ '.png' 'image/png'
                @ '.scss' 'text/scss'
                @ '.svg' 'image/svg+xml'
                @ '.ttf' 'application/x-font-ttf'
                @ '.txt' 'text/plain'
                @ '.vtt' 'text/vtt'
                @ '.woff' 'application/x-font-woff'
                @ '.yaml' 'text/yanl'
                @ '.yml' 'text/yanl'
                @ '.xml' 'text/xml'
    +
    function ittfSchemaOf
        param file
            :string
        :return
            :union
                :string
                :undefined
        const nameParts = path.basename(file).split('.')
        if nameParts[nameParts.length - 1] === 'ittf'
            return nameParts[nameParts.length - 2]
        return undefined
    +
    function contentTypeFor
        param file
            :string
        :return
            :union
                :string
                :undefined
        const ittfSchema = ittfSchemaOf(file)
        if ittfSchema
            return extContentTypeMap['.' + ittfSchema]
        return undefined
    +
    function ittfMiddleware
        param basePath
            :string
        param routePath
            :string
        :return
            :ref RequestHandler
        return
            async=>
                param req
                    :ref Request
                param res
                    :ref Response
                param next
                    :ref Function
                if req.method !== 'GET' && req.method !== 'HEAD'
                    return next()
                const parsedUrl = parseUrl(req)
                if !parsedUrl || !parsedUrl.pathname
                    return next()
                const urlPathName = decodeURIComponent(parsedUrl.pathname)
                const pathname = urlPathName
                    # ??? urlPathName.substr(routePath.length);
                const filePath = path.join(basePath, pathname)
                    # ??? urlPathName.substr(routePath.length);
                const extname = path.extname(filePath)
                var queryMeta = (req.query.meta as string)
                var queryTransform = (req.query.transform as string)
                info 'middleware.ittfStatic', 'urlPathName', urlPathName, 'pathname', pathname, 'filePath', filePath, 'path.extname(filePath)', path.extname(filePath), 'queryMeta', queryMeta
                if fs.existsSync(filePath) === false
                    error 'filePath do not exists', filePath
                    return next()
                if fs.statSync(filePath).isDirectory()
                    log 'filePath is directory', filePath
                    return sendFolderScan(filePath, basePath, queryMeta, res)
                if queryTransform && queryTransform.indexOf('/') > 0
                    return sendTransform(filePath, queryTransform, res)
                let ittfSchema = ittfSchemaOf(filePath)
                let contentType = contentTypeFor(filePath)
                log 'contentType', contentType, 'ittfSchema', ittfSchema, 'queryMeta', queryMeta
                if contentType
                    if queryMeta && queryMeta === 'html'
                        try
                            const documentState
                                await
                                    _ wizziProds.scanIttfDocumentFs(filePath, path.dirname(basePath))
                            const generated
                                await
                                    _ wizziProds.generateArtifactFs
                                        @ config.metaHtmlIttfPath
                                        {
                                            @ wizzischema 'html'
                                            @ path filePath
                                            @ req
                                            @ ds documentState
                                # console.log('generated.meta.document', generated.artifactContent);
                            _ res.writeHead
                                @ 200
                                {
                                    @ 'Content-Type' 'text/html'
                                    @ 'Content-Length' generated.artifactContent.length
                                # console.log('generated.meta.document', generated.artifactContent);
                            _ res.end(generated.artifactContent)
                        catch ex
                            _ sendError
                                @ res
                                @ ex
                                {
                                    @ format 'json'
                    elif queryMeta && queryMeta === 'json' && ittfSchema == 'ittf'
                        _ wizziProds.generateArtifactFs
                            @ filePath
                            {
                            {
                                @ generator 'ittf/tojson'
                            ._ then
                                =>
                                    param generated
                                    log 'generated.meta.ittf.json', filePath
                                    _ res.writeHead
                                        @ 200
                                        {
                                            @ 'Content-Type' 'application/json'
                                            @ 'Content-Length' generated.artifactContent.length
                                    _ res.end(generated.artifactContent)
                            ._ catch
                                =>
                                    param err
                                    return
                                        _ sendError
                                            @ res
                                            @ err
                                            {
                                                @ format 'json'
                    else
                        return
                            _ contextLoader
                                @ filePath
                                @ req
                                function
                                    param err
                                        :any
                                    param modelContext
                                        :ref WizziModel
                                    if err
                                        return
                                            _ sendError
                                                @ res
                                                @ err
                                                {
                                                    @ format 'json'
                                    _ wizziProds.generateArtifactFs(filePath, modelContext).then
                                        =>
                                            param generated
                                            # log 'generated.artifactContent', generated.artifactContent
                                            _ res.writeHead
                                                @ 200
                                                {
                                                    @ 'Content-Type' contentType
                                                    @ 'Content-Length' generated.artifactContent.length
                                            _ res.end(generated.artifactContent)
                                        ._ catch
                                            =>
                                                param err
                                                return
                                                    _ sendError
                                                        @ res
                                                        @ err
                                                        {
                                                            @ format 'json'
                else
                    _ next()
        #
            #
            # req.query._context contains a semicolon separated list of context models export names.
            # For each <export-name> must exists a req.query._<export-name> parameter
            # with a type;path value pair.
            # The type is the model knwon type or a wizzi schema, the path is the
            # relative path of the ittf document of the model, relative to the
            # filepath of the requested resource.
            #
            # Example (two context models, export names: cs and info)
            # req.query._context = 'cs;info'
            # req.query._cs = 'cheatsheet;html'
            # req.query._info = 'json;../cslayout.json.ittf'
            #
            # If the path value is missing it defaults to ./index.<type>.ittf
            #
            #
    :type contextRequest
        :{
            :p name
                :optional
                :string
            :p type
                :optional
                :string
            :p exportName
                :string
            :p fullPath
                :any
            :p relPath
                :any
        #
            #
            # req.query._context contains a semicolon separated list of context models export names.
            # For each <export-name> must exists a req.query._<export-name> parameter
            # with a type;path value pair.
            # The type is the model knwon type or a wizzi schema, the path is the
            # relative path of the ittf document of the model, relative to the
            # filepath of the requested resource.
            #
            # Example (two context models, export names: cs and info)
            # req.query._context = 'cs;info'
            # req.query._cs = 'cheatsheet;html'
            # req.query._info = 'json;../cslayout.json.ittf'
            #
            # If the path value is missing it defaults to ./index.<type>.ittf
            #
            #
    async-function contextLoader
        param resourceFilePath
            :string
        param req
            :ref Request
        param callback
            :any
        const contextRequest
            :string
            = (req.query._context as string)
        if contextRequest && contextRequest.length > 0
            const ss = contextRequest.split(';')
            const requests
                :[
                    :ref contextRequest
                = []
            _ ss.forEach
                =>
                    param element
                    const request
                        :ref contextRequest
                        =
                            {
                                @ exportName element
                                @ fullPath undefined
                                @ relPath undefined
                    const type_path = (req.query['_' + element] as string)
                    log 'contextLoader exportName, type_path', element, type_path
                    if !type_path
                        return
                            (
                                _ callback
                                    {
                                        @ requestedResource resourceFilePath
                                        @ message 'Missing query param for requested context model: ' + element
                    const tp = type_path.split(';')
                    set request.type = tp[0]
                    if tp.length < 2
                        set request.relPath = './index.' + tp[0] + '.ittf'
                    else
                        set request.relPath = tp[1]
                    log 'contextLoader exportName, type_path, relPath', element, type_path, request.relPath
                    if request.type === 'cheatsheet'
                        set request.name = request.relPath
                        _ requests.push(request)
                    else
                        set request.fullPath = path.join(path.dirname(resourceFilePath), request.relPath)
                        _ requests.push(request)
                    log 'contextLoader request', request
            log 'contextLoader.requests', requests
            const resultContext
                :{
                    :index
                        :ref WizziModel
                        param k
                            :string
                =
                    {
            const repeatCount = requests.length
            const repeat
                =>
                    param index
                        :number
                    if index == repeatCount
                        return callback(null, resultContext)
                    const request = requests[index]
                    if request.type === 'cheatsheet'
                        return callback('Context loader for cheatsheet type not implemented.')
                    else
                        _ wizziProds.loadModelFs
                            @expr request.fullPath
                            {
                            ._ then
                                =>
                                    param model
                                    set resultContext[request.exportName] = model
                                    _ repeat(index + 1)
                            ._ catch
                                =>
                                    param err
                                    _ callback(err)
            _ repeat(0)
        else
            try
                const twinJsonContext
                    await
                        _ wizziProds.inferAndLoadContextFs(resourceFilePath, 'wzCtx')
                return (callback(null, twinJsonContext))
            catch ex
                return callback(ex)
    +
    async-function sendFolderScan
        param folderPath
            :string
        param root
            :string
        param meta
            :string
        param res
            :ref Response
        try
            const folderState
                await
                    _ wizziProds.scanIttfFolder(folderPath, path.dirname(root))
            log 'sendFolderScan', 'folderState.keys', Object.keys(folderState)
            if meta === 'json'
                return sendJSONStringified(res, folderState)
            else
                const generated
                    await
                        _ wizziProds.generateArtifactFs
                            @ config.metaFolderIttfPath
                            {
                                @ wizzischema 'html'
                                @ path folderPath
                                @ fs folderState
                    # console.log('generated.meta.document', generated.artifactContent);
                _ res.writeHead
                    @ 200
                    {
                        @ 'Content-Type' 'text/html'
                        @ 'Content-Length' generated.artifactContent.length
                    # console.log('generated.meta.document', generated.artifactContent);
                _ res.end(generated.artifactContent)
        catch ex
            log 'sendFolderScan.exception', ex
            _ sendError
                @ res
                @ ex
                {
                    @ format 'json'
    +
    function sendTransform
        param filePath
            :string
        param transformer
            :string
        param res
            :ref Response
        _ wizziProds.transformModelFs
            @ filePath
            {
            {
                @ transformer transformer
            ._ then
                =>
                    param model
                    _ res.send
                        _ stringify
                            @ model
                            @ null
                            @ 2
            ._ catch
                =>
                    param err
                    _ sendError
                        @ res
                        @ err
                        {
                            @ format 'json'
    +
    function sendJSONStringified
        param res
            :ref Response
        param wizziModelInstance
            :any
        _ res.send('<pre>' + stringify(cleanCircular(wizziModelInstance, []), null, 2) + '</pre>')
    +
    function cleanCircular
        param obj
            :any
        param stock
            :[
                :any
        if !obj
            return
        if stock.indexOf(obj) >= 0
            return
        else
            _ stock.push(obj)
        if typeof obj === 'object'
            if obj.length
                _
                    (
                        + obj
                            :as
                                :tuple
                    ._ forEach
                        =>
                            param element
                            _ cleanCircular(element, stock)
                return
            if obj.parent
                delete obj.parent
            if obj.wzParent
                delete obj.wzParent
            if obj.nodes
                delete obj.nodes
            if obj.evalContext
                delete obj.evalContext
            if obj.loadContext && obj.sourceKey
                delete obj.loadContext
            for
                left
                    var k
                in obj
                var item = obj[k]
                if !item
                    delete obj[k]
                else
                    if typeof item === 'object' && item.length && item.length == 0
                        delete obj[k]
                    else
                        _ cleanCircular(item, stock)
        return obj
    +
    function sendError
        param res
            :ref Response
        param err
            :any
        param options
            :any
        set options =
            ||
                + options
                {
        const code = options.code || 999
        let errEmit
            :any
            = err
        delete errEmit.__is_error
        if options.format === 'string'
            if typeof err !== 'string'
                set err =
                    _ util.inspect
                        @ err
                        {
                            @ depth null
            set errEmit = err.replace(RegExp('\n', 'g'), '<br>')
        else
            if err.stack && err.stack.split
                const stackArray
                    :[
                        :string
                    = []
                _
                    (
                        @expr err.stack
                            :as
                                :string
                    ._ split
                        @ '\n'
                    ._ forEach
                        =>
                            param element
                            _ stackArray.push('    ' + element)
                set errEmit.stack = stackArray
        _ res.setHeader('Content-Type', 'application/json')
        _ res.send
            _ stringify
                {
                    @ code
                    @ error errEmit
                @ null
                @ 4
