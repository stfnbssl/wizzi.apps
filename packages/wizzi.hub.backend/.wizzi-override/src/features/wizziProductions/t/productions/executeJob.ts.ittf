$group
    export
        async-function executeJob
            param wzjobFilePath
                :string
            param packiFiles
                :ref packiTypes.PackiFiles
            param context
                :any
            :return
                :ref Promise
                    :param
                        :ref JsonFs
            return
                new Promise
                    async=>
                        param resolve
                        param reject
                        if !verify.isObject(packiFiles)
                            return
                                _ reject
                                    {
                                        @ action 'wizzi.productions.executeJob'
                                        @ message 'packiFiles parameter must be an object of type PackiFiles'
                                        @ packiFiles
                        set wzjobFilePath = ensurePackiFilePrefix(wzjobFilePath)
                        const jsonwf
                            await
                                _ createJsonFsAndFactory(packiFiles)
                        _ jsonwf.wf.executeJob
                            {
                                @ name ''
                                @ path wzjobFilePath
                                { productionOptions
                                @ globalContext context || {}
                            =>
                                param err
                                param result
                                if err
                                    return reject(err)
                                _ resolve(jsonwf.jsonFs)
    +
    export
        async-function executeJobs
            param packiFiles
                :ref packiTypes.PackiFiles
            param context
                :any
            :return
                :ref Promise
                    :param
                        :ref JsonFs
            return
                new Promise
                    async=>
                        param resolve
                        param reject
                        const wzjobFilePaths
                            _ Object.keys(packiFiles).filter
                                =>
                                    param k
                                    _ k.endsWith('.wzjob.ittf')
                        # TODO catch error
                        const jsonwf
                            await
                                _ createJsonFsAndFactory(packiFiles)
                        const execJob
                            =>
                                param index
                                    :number
                                :return
                                    :void
                                let wzjobFilePath = wzjobFilePaths[index]
                                if !wzjobFilePath
                                    return resolve(jsonwf.jsonFs)
                                _ jsonwf.wf.executeJob
                                    {
                                        @ name 'job: ' + wzjobFilePath
                                        @ path
                                            _ ensurePackiFilePrefix
                                                @ wzjobFilePath
                                        { productionOptions
                                        @ globalContext context || {}
                                    =>
                                        param err
                                        param result
                                        if err
                                            return reject(err)
                                        _ execJob(index + 1)
                        _ execJob(0)
    +
    export
        async-function executeJobFs
            param request
                :ref WizziJobTypesRequest
            :return
                :ref Promise
                    :param
                        :any
            r_promise_async( )
                try
                    const globalContext = Object.assign({}, request.globalContext)
                    +
                    var plugins
                        [
                    if request.plugins
                        foreach item in request.plugins
                            if item && plugins.indexOf(item) < 0
                                _ plugins.push(item)
                    else
                        _ plugins.push('wizzi-core')
                    const wf
                        await
                            _ createFilesystemFactoryWithParameters
                                @ request.pluginsBaseFolder
                                @ plugins
                                @ globalContext
                    info 'STARTING WIZZI JOB', request.wzjobIttfDocumentUri
                    _ wf.executeJob
                        {
                            @ name request.wzjobName || path.basename(request.wzjobIttfDocumentUri)
                            @ path request.wzjobIttfDocumentUri
                            { productionOptions
                            @ globalContext globalContext
                        =>
                            param err
                                :any
                            param result
                                :any
                            if err
                                r_reject( )
                                    {
                                        @ message "wizziProds.executeJobFs.wf.executeJob.error"
                                        { err
                            success 'WIZZI JOB Executed', request.wzjobIttfDocumentUri
                            return resolve(result)
                catch ex
                    error "wizziProds.executeJobFs.error", ex
                    r_reject( )
                        {
                            @ message "wizziProds.executeJobFs.error"
                            @ err ex