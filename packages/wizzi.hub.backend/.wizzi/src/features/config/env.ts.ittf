module
    $include set-ctx-functions
    $
        setCtxDep ('dotenv', '^16.0.1');
        setCtxDep ('envalid', '^7.0.0');
    import path from 'path'
    import dotenv from 'dotenv'
    import
        @ cleanEnv
        @ str
        @ bool
        @ port
        from 'envalid'
    import
        @ ConfigType
        from './types'
    function validateEnv
        _ dotenv.config
        let checkedEnv
            _ cleanEnv
                @ process.env
                {
                    $if $.getCtx('env.values')
                        $foreach item in Object.values($.getCtx('env.values'))
                            @ ${item.name} ${item.checker}()
        return checkedEnv
    let config
        :ref ConfigType
    export-default
        function create
            :return
                :ref ConfigType
            if config == null
                const checkedEnv = validateEnv()
                set config =
                    {
                        $if $.getCtx('env.values')
                            $foreach item in Object.values($.getCtx('env.values'))
                                @ ${item.property} checkedEnv.${item.name}
                _ Object.keys(config).forEach
                    =>
                        param element
                        if element.indexOf("Pass") < 0 && element.indexOf("Secr") < 0
                            _ console.log
                                @ 'Created config'
                                @ element
                                @expr
                                    (
                                        + config
                                            :as
                                                :any
                                    .[ element
            return config