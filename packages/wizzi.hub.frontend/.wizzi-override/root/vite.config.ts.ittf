module
    $include set-ctx-functions
    $
        setCtxScript ('dev', 'vite');
        setCtxScript ('build', 'tsc && vite build');
        setCtxScript ('format', 'prettier .  --write');
        setCtxScript ('preview', 'vite preview');
        setCtxScript ('test', 'vitest run');
        setCtxScript ('test:watch', 'vitest');
        setCtxDep ('react', '^18.2.0');
        setCtxDep ('react-dom', '^18.2.0');
        setCtxDep ('axios', '^1.7.2');
        setCtxDevDep ('@types/react', '^18.2.37');
        setCtxDevDep ('@types/react-dom', '^18.2.15');
        setCtxDevDep ('prettier', '^3.1.0');
        setCtxDevDep ('vite', '^5.0.0');
        setCtxDevDep ('vite-plugin-eslint', '^1.8.1');
        setCtxDevDep ('@vitejs/plugin-react', '^4.2.0');
    import path from 'path'
    import
        @ defineConfig
        from 'vite'
    import react from '@vitejs/plugin-react'
    export-default
        _ defineConfig
            {
                { build
                    @ outDir path.resolve(__dirname, '..', 'wizzi.hub.backend', 'public', 'meta')
                        # Set the output directory
                    @ emptyOutDir false
                        # Ensure that Vite doesn't empty the outDir on build
                @ base '/public/meta/'
                [ plugins
                    @ react()
                    $if TODO
                        { 
                            @ name 'rewrite-middleware'
                            m configureServer
                                param server
                                _ server.middlewares.use
                                    => 
                                        param req
                                        param res
                                        param next
                                        if req.url.startsWith('/public/meta/')
                                            set req.url = req.url.replace('/public/meta/', '/')
                                        _ next()
                { server
                    @ middlewareMode 'html'                                                
                { resolve
                    [ alias
                        {
                            @ find '@/Assets'
                            @ replacement '/src/Assets'
                        {
                            @ find '@/Api'
                            @ replacement '/src/Api'
                        {
                            @ find '@/Components'
                            @ replacement '/src/Components'
                        {
                            @ find '@/Data'
                            @ replacement '/src/Data'
                        {
                            @ find '@/Pages'
                            @ replacement '/src/Pages'
                        {
                            @ find '@/Utils'
                            @ replacement '/src/Utils'
        # https://vitejs.dev/config/


