$group
    $params &md

    export
        function get${md.Prod}
            param owner
                :string
            param name
                :string
                :optional
            let url = '${md.prod}/' + encodeURIComponent(owner)
            if name && name.length > 0
                set url += '/' + name
            r_promise()
                info 'api.${md.ApiName}.get${md.Prod}.url', url
                _ request.get
                    :param 
                        :ref CRUDResult
                    @ url
                    ._ then
                        =>
                            param response
                            info 'api.${md.ApiName}.get${md.Prod}.response', response
                            return 
                                _ resolve 
                                    @ response
                    catch_reject( get${md.Prod} )
        #
            # 
            # Fetches a ${md.Prod}Production collection or item
            # 
            # @param {string} owner The owner of the production
            # @param {string} name Optional. The name of the production, 
            # -                              if null returns all owner's productions
            # 

    export
        function put${md.Prod}
            param id
                :string
            param packiFiles
                :ref PackiFiles
            param options
                :any
            $$ updateArtifactProduction(request.params.id, request.body.owner, request.body.name, request.body.description, request.body.mainIttf, request.body.wizziSchema, JSON.stringify(request.body.packiFiles))
            # info 'api.${md.ApiName}.put${md.Prod}', 'id', id, 'packiFiles', Object.keys(packiFiles), 'options', options
            const url = '${md.prod}/' + encodeURIComponent(id)
            const data
                { 
                    @ packiFiles
                    @ options
            r_promise()
                _ request.put
                    :param 
                        :ref CRUDResult
                    @ url
                    @ data            
                    ._ then
                        =>
                            param response
                            info 'put${md.Prod}.response', response
                            _ resolve
                                @ response
                    catch_reject( put${md.Prod} )
        #
            # 
            # Updates a ${md.Prod}Production item
            # 
            # @param {string} id The id of the production item
            # @param {PackiFiles} packiFiles. A PackiFiles object, contains all the production's files.
            #     

    export
        function create${md.Prod}
            param owner
                :string
            param name
                :string
            param packiFiles
                :ref PackiFiles
            param options
                :any
            set options = options || {}
            $$ updateArtifactProduction(request.params.id, request.body.owner, request.body.name, request.body.description, request.body.mainIttf, request.body.wizziSchema, JSON.stringify(request.body.packiFiles))
            # info 'api.${md.ApiName}.create${md.Prod}', 'owner', owner, 'name', name, 'packiFiles', Object.keys(packiFiles), 'options', options
            const url = '${md.prod}/' + encodeURIComponent(owner) + '/' + encodeURIComponent(name)
            const
                {
                    @ description
                    $if md.Prod == 'Artifact'
                        @ wizziSchema
                        @ mainIttf
                = options
            const data
                { 
                    @ packiFiles
                    @ description
                    $if md.Prod == 'Artifact'
                        @ wizziSchema
                        @ mainIttf

            r_promise()
                _ request.post
                    :param 
                        :ref CRUDResult
                    @ url
                    @ data            
                    ._ then
                        =>
                            param response
                            info 'api.${md.ApiName}.create${md.Prod}.response', response
                            _ resolve
                                @ response
                    catch_reject( create${md.Prod} )
        #
            # 
            # Creates a new ${md.Prod}Production item
            # 
            # @param {string} [owner] The owner of the production item
            # @param {string} [name] The name of the production item
            # @param {PackiFiles} packiFiles. A PackiFiles object, contains all the production's files.
            #                       

    export
        function put${md.Prod}PackiDiffs
            param id
                :string
            param packiDiffs
                :any
            param options
                :any
            $$ updateArtifactProduction(request.params.id, request.body.owner, request.body.name, request.body.description, request.body.mainIttf, request.body.wizziSchema, JSON.stringify(request.body.packiFiles))
            # info 'api.${md.ApiName}.put${md.Prod}PackiDiffs', 'id', id, 'packiDiffs', Object.keys(packiDiffs), 'options', options
            const url = '${md.prod}/packidiffs/' + encodeURIComponent(id)
            const data
                {
                    @ packiDiffs
                    @ options
            r_promise()
                _ request.put
                    :param 
                        :ref CRUDResult
                    @ url
                    @ data            
                    ._ then
                        =>
                            param response
                            info 'api.${md.ApiName}.put${md.Prod}PackiDiffs.response', response
                            _ resolve
                                @ response
                    catch_reject( put${md.Prod}PackiDiffs )
          #
              # 
              # Updates a ${md.Prod}Production applying a diff object
              # 
              # @param {string} id The id of the production item
              # @param {PackiFiles} packiDiffs. A diff object, contains insert, deletes and updates.
              #     

    export
        function delete${md.Prod}
            param id
                :string
            # info 'api.${md.ApiName}.delete${md.Prod}', 'id', id
            const url = '${md.prod}/' + encodeURIComponent(id)
            r_promise()
                _ request.delete
                    :param 
                        :ref CRUDResult
                    @ url
                    ._ then
                        =>
                            param response
                            info 'api.${md.ApiName}.delete${md.Prod}.response', response
                            _ resolve
                                @ response
                    catch_reject( delete${md.Prod} )
        #
            # 
            # Delete a ${md.Prod}Production item
            # 
            # @param {string} id The id of the production item
            # 

    export
        function createOrUpdate${md.Prod}
            param owner
                :string
            param name
                :string
            param packiFiles
                :ref PackiFiles
            param options
                :any
            r_promise()
                _ get${md.Prod}
                    @ owner
                    @ name
                    a_then_err_reject( response, @@null, @@null, api.${md.ApiName}.createOrUpdate${md.Prod}.get${md.Prod}.response
                        if response.ok
                            _ put${md.Prod}
                                @ response.item._id
                                @ packiFiles
                                @ options
                                a_then_err_reject( response, @@null, @@null, api.${md.ApiName}.createOrUpdate${md.Prod}.update${md.Prod}.response
                                    _ alert
                                        _ 'update${md.Prod}.response' + JSON.stringify
                                            @ response
                                    r_resolve(response)
                        else
                            _ create${md.Prod}
                                @ owner
                                @ name
                                @ packiFiles
                                @ options
                                a_then_err_reject( response, @@null, @@null, api.${md.ApiName}.createOrUpdate${md.Prod}.create${md.Prod}.response
                                    _ alert
                                        _ 'update${md.Prod}.response' + JSON.stringify
                                            @ response
                                    r_resolve(response)

        #
            # 
            # Creates or update a ${md.Prod}Production item
            # 
            # @param {string} [owner] The owner of the production item
            # @param {string} [name] The name of the production item
            # @param {PackiFiles} packiFiles. A PackiFiles object, contains all the production's files.
            #                       
