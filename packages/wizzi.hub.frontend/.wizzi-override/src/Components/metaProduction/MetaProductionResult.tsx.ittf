module

    $
        var myName = 'MetaProductionResult';
        var myDisplayName = 'Components.metaproduction.' + myName;

    $include index.css

    import
        @ useState
        @ useEffect
        from "react"

    import 
        as packiApi
        from '@/Api/packiApi'
    
    $if TODO
        import 
            as wizziHubApi
            from '@/Api/wizziHubApi'

    import 
        as wizziMetaApi
        from '@/Api/wizziMetaApi'

    import
        @ PackiEntry
        @ MetaPluginExt
        from "@/Api/types"

    import
        @ AppState
        from "@/Data/mvc/MetaProduction/types"

    $if TODO
        import
            @ getMvc
            from "@/Data/mvc/MetaProduction"

    import
        @ ErrorView
        from "@/Components/utils/ErrorView"

    import FileExplorer
        from "@/Components/fileExplorer/FileExplorer"

    import FileBrowser
        from "@/Components/fileExplorer2/FileBrowser"

    function executeResultMetaProduction
        param metaCtx
            :{
        param hubMetaProductions
            :[
                :any
        const [error, setError] = useState(null)
        const [data, setData] = useState(null)
        const [prettifiedError, setPrettifiedError] = useState(null)
        const [prettified, setPrettified] = useState<{[key: string]: any}>({})
        $if true || TODO
            const [generatedError, setGeneratedError] = useState(null)
            const [generated, setGenerated] = useState<{[key: string]: any}>({})
        info '${myDisplayName}.executeResultMetaProduction.hubMetaProductions', hubMetaProductions
        _ useEffect
            =>
                async-function doFetch 
                    const inMemoryMetas
                        :[
                            :{
                                :p owner
                                    :string
                                :p name
                                    :string
                        = []
                    _ hubMetaProductions.forEach
                        =>
                            param item
                            if item.__is_hub_meta_plugin
                                _ inMemoryMetas.push
                                    {
                                        @ owner item.owner
                                        @ name item.name
                    info '${myDisplayName}.executeResultMetaProduction.inMemoryMetas', inMemoryMetas
                    _ wizziMetaApi.MetaExecuteInMemory
                        @ metaCtx
                        @ inMemoryMetas
                        { $$ TODO globalContext
                        a_then(result)
                            info '${myDisplayName}.executeMetaProduction.result', result
                            if result.err
                                _ setError
                                    @ result.err
                            else
                                _ setData
                                    @ result
                                _ packiApi.prettify
                                    @ result
                                    ._ then
                                        =>
                                            param response
                                                :any
                                            _ setPrettified(response)
                                            info 'prettify.response', response
                                    ._ catch
                                        =>
                                            param err
                                            error err.message
                                            error err
                                            _ setPrettifiedError
                                                @ err
                                $if true || TODO
                                    _ packiApi.generate
                                        @ result
                                        {
                                        ._ then
                                            =>
                                                param response
                                                    :any
                                                _ setGenerated(response)
                                                info 'generate.response', response
                                        ._ catch
                                            =>
                                                param err
                                                error err.message
                                                error err
                                                _ setGeneratedError
                                                    @ err
                        catch(executeResultMetaProduction.MetaExecuteInMemory)
                            error '----> Error: MetaExecuteInMemory', error
                            _ setError
                                @ error
                _ doFetch
            [
                _ JSON.stringify(metaCtx)
        return
            {
                @ executionError error
                @ executionResult data
                @ executionPrettifiedResult prettified
                @ executionPrettifiedError prettifiedError
                @ executionGeneratedResult generated
                @ executionGeneratedError generatedError

    function detectWfjob
        param packiFiles
            :ref PackiFiles
        :return
            :string
        var items = Object.keys(packiFiles)
        foreach item in items
            info 'detectWfjob', item, item.endsWith('.wfjob.ittf')
            if item.endsWith('.wfjob.ittf')
                return item
        return null                
            
    :type MetaProductionResultProps
        :{
            :p metaCtx
                :{
            :p appState
                :ref AppState

    export
        function MetaProductionResult
            param props
                :ref MetaProductionResultProps
            const
                {
                    @ metaCtx
                    @ appState
                = props
            const
                {
                    @ selectedMetaPlugins
                = appState
            const metaPlugins
                :[
                    :ref MetaPluginExt
                = selectedMetaPlugins as MetaPluginExt[]
            const [selectedEntry, setSelectedEntry] = useState<PackiEntry|null>(null)
            $if TODO
                const [installed, setInstalled] = useState(null)
                const [installedError, setInstalledError] = useState(null)
            const 
                { 
                    @ executionResult
                    @ executionError
                    @ executionPrettifiedResult
                    @ executionPrettifiedError
                    @ executionGeneratedResult
                    @ executionGeneratedError
                =
                    _ executeResultMetaProduction
                        @ metaCtx
                        @ metaPlugins
            if executionError
                return
                    < ErrorView
                        @ error {executionError}
            if executionPrettifiedError
                return
                    < ErrorView
                        @ error {executionPrettifiedError}
            if executionGeneratedError
                return
                    < ErrorView
                        @ error {executionGeneratedError}
            if !executionResult
                return
                    . w-area-list w-area-list-15 w-area-list-15
            $$ info '${myDisplayName}.executeResultMetaProduction.result', executionResult
            let explorerEntries
                :ref PackiFiles
                = {}
            let installEntries
                :ref PackiFiles
                = {}
            const wzjobUri
                _ detectWfjob
                    @ executionResult
            if wzjobUri && wzjobUri.length > 0
                set explorerEntries
                    _ packiApi.packiToEntryArray
                        _ packiApi.mergePackiFiles
                            @ executionPrettifiedResult
                            @ executionGeneratedResult
                set installEntries
                    _ packiApi.mergePackiFiles
                        @ executionResult
                        @ executionGeneratedResult
            else
                set explorerEntries
                    _ packiApi.packiToEntryArray
                        _ packiApi.mergePackiFiles
                            @ executionPrettifiedResult
                            _ packiApi.unmountPackiFolder
                                @ executionGeneratedResult
                                @ '.wizzi'
                set installEntries
                    _ packiApi.mergePackiFiles
                        @ executionResult
                        _ packiApi.unmountPackiFolder
                            @ executionGeneratedResult
                            @ '.wizzi'
            return
                <
                    $$ . w-area-list w-area-list-15
                    . ${w_area_list} ${w_area_list_result}
                        . ${w_area_list_caption}
                            + Result
                        . ${w_area_list_inner}
                            . p-2 bg-gray-600 text-zinc-100
                                . flex $$ pad-5
                                    . ${tlb_item_button_small} $$ ml-4 px-2
                                        + Install
                                        @ title {'Install the generated package'}
                                        @ onClick
                                            =>
                                                info '${myDisplayName}.Install.onClick'
                                                _ alert
                                                    _ JSON.stringify
                                                        @ appState.currentJob?.__metaDemoPackage.json
                                                        @ null
                                                        @ 4
                                                _ packiApi.install
                                                    @ installEntries
                                                    @ appState.currentJob?.__metaDemoPackage.json
                                                    ._ then
                                                        =>
                                                            param response
                                                                :any
                                                            $if TODO
                                                                _ setInstalled(response)
                                                            info 'install.response', response
                                                            _ alert
                                                                _ JSON.stringify
                                                                    @ response
                                                                    @ null
                                                                    @ 4
                                                    ._ catch
                                                        =>
                                                            param err
                                                            error err.message
                                                            error err
                                                            $if TODO
                                                                _ setInstalledError
                                                                    @ err

                            $if TODO
                                div
                                    button edit artifact
                                        @ onClick
                                            =>
                                                _ wizziHubApi.createOrUpdateArtifact
                                                    @ getMvc().user.id
                                                    @ appState.currentJob.name.toLowerCase() + '.job.result'
                                                    @ executionResult
                                                    {
                                                        @ description 'Artifact generated by WizziHub meta production for job ' + appState.currentJob.name
                                                        @ wizziSchema 'html'
                                                        @ mainIttf 'index.html.ittf'
                                    span &nbsp;&nbsp;
                                    button edit package
                                        @ onClick
                                            =>
                                                _ wizziHubApi.createOrUpdatePackage
                                                    @ getMvc().user.id
                                                    @ appState.currentJob.name.toLowerCase() + '.job.result'
                                                    @ executionResult
                                                    {
                                                        @ description 'Package generated by WizziHub meta production for job ' + appState.currentJob.name
                                    span &nbsp;&nbsp;
                                    button edit meta
                                        @ onClick
                                            =>
                                                _ wizziHubApi.createOrUpdateMeta
                                                    @ getMvc().user.id
                                                    @ appState.currentJob.name.toLowerCase() + '.job.result'
                                                    @ executionResult
                                                    {
                                                        @ description 'Meta generated by WizziHub meta production for job ' + appState.currentJob.name
                            < FileExplorer
                                @ entries {explorerEntries}
                                @ onFileSelect
                                    =>
                                        param entry
                                        $$ info '${myDisplayName}FileExplorer.onFileSelect', entry
                                        _ setSelectedEntry(entry)
                    {
                        &&
                            + selectedEntry && selectedEntry.uri
                            . ${w_area_list} ${w_area_list_file_browser}
                                . ${w_area_list_caption}
                                    + {selectedEntry.uri}
                                . ${w_area_list_inner}
                                    < FileBrowser
                                        @ entry {selectedEntry}