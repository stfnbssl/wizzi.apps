module

    $$ import "./styles.css";

    import
        @ useState
        @ useEffect
        from "react"

    import
        @ getMvc
        from "@/Data/mvc/MetaProduction"

    import
        @ getJobs
        @ startCurrentJob
        from "@/Data/jobs"

    import
        @ JobItem
        from "@/Data/types"

    import
        @ AppState
        @ MetaSelectionState
        from "@/Data/mvc/MetaProduction/types"

    import
        @ MainContent
        @ MainContentLeftBar
        @ MainContentWorkArea
        @ MainFooter
        @ MainHeader    
        from "@/Components/shell/index"
    
    import
        @ SpinnerView
        from "@/Components/utils/SpinnerView"

    $if TODO
        import
            @ MenuItem
            from "@/Components/nav/MenuItem"

    import
        @ UserNavBar
        from "@/Components/nav/UserNavBar"

    import
        @ LogoTitleNavBar
        from "@/Components/nav/LogoTitleNavBar"

    import
        @ WorkAreaToolBar
        from "./WorkAreaToolBar"

    import
        @ WorkAreaContent
        from "./WorkAreaContent"

    import
        @ MetaErrorView
        from "./MetaErrorView"

    function startAppState
        param initialState
            :ref AppState
        let [data, setData] = useState<AppState|null>(null)
        _ useEffect
            =>
                async-function doFetch 
                    _ getMvc().controller.getAppState
                        =>
                            param result
                            $$ info 'index.startAppState.getMvc().controller.getAppState.result', result
                            $$ info 'index.startAppState.initialState', initialState
                            const data
                                _ Object.assign
                                    {
                                    @ initialState
                                    @ result
                            $$ info 'index.startAppState.result.after.assigning.initialState', data
                            _ setData
                                @ data
                $$ info 'index.startAppState.executing.doFetch.reloadCount', initialState.reloadCount
                _ doFetch
            [
                @ "" + initialState.reloadCount
        return
            {
                @ appState data
                @ setAppState setData

    function loadJobList
        param reloadCount
            :number
        :return
            :{
                :p jobList
                    :ref JobItem[]|null
                :p jobListError
                    :any
                :p setJobList
                    :ref React.Dispatch<React.SetStateAction<JobItem[] | null>>                    
                :p setJobListError
                    :ref React.Dispatch<React.SetStateAction<any | null>>                   
                :p jobItemReloadCount
                    :number

        let [data, setData] = useState<JobItem[]|null>(null)
        let [error, setError] = useState<any|null>(null)
        let [jobItemReloadCount, setJobItemReloadCount] = useState<number>(0)
        _ useEffect
            =>
                async-function doFetch
                    _ getJobs
                        @ getMvc().user.id
                        @ reloadCount == 0 ? false : true
                        a_then(result)
                            $$ info 'loadJobList.result', result
                            _ setData
                                @ result.jobs
                            _ setJobItemReloadCount
                                @ jobItemReloadCount + 1
                        catch(loadJobList)
                            _ setError
                                @ error
                $$ info 'index.loadJobList.executing.doFetch.reloadCount', reloadCount
                _ doFetch
            [
                @ "" + reloadCount
        return
            {
                @ jobList data
                @ jobListError error
                @ setJobList setData
                @ setJobListError setError
                @ jobItemReloadCount jobItemReloadCount

    export
        function MetaProduction
            const
                {
                    @ appState
                    @ setAppState
                =
                    _ startAppState
                        { 
                            @ reloadCount 0
                            @ activeView 'plugins-selection'
            
            +
            const
                {
                    @ jobList
                    @ jobListError
                    @ jobItemReloadCount
                =
                    _ loadJobList
                        @ appState ? appState.reloadCount : 0
            if jobListError
                < MetaErrorView
                    @ error {jobListError}
            +
            if !appState || jobList == null
                return
                    < MainHeader
                        < SpinnerView
            $$ info "index.MetaProduction.appState", appState
            $$ info "index.MetaProduction.jobList", jobList
            return
                div
                    < MetaProductionPage
                        @ appState {appState}
                        @ setAppState {setAppState}
                        @ jobList {jobList}
                        @ jobListError {jobListError}
                        @ jobItemReloadCount {jobItemReloadCount}

    :type MetaProductionPageProps
        :{
            :p appState
                :ref AppState
            :p setAppState
                :ref React.Dispatch<React.SetStateAction<AppState|null>>                    
            :p jobList
                :[
                    :ref JobItem
            :p jobListError
                :any
            :p jobItemReloadCount
                :number

    function MetaProductionPage
        param params
            :ref MetaProductionPageProps
        +
        const
            {
                @ appState
                @ setAppState
                @ jobList
                @ jobListError
                @ jobItemReloadCount
            = params
        +
        # Do increment "metaSelectionState.selCounter" to force rerendering
        const [metaSelectionState, setMetaSelectionState]
            _ useState<MetaSelectionState>
                { 
                    @ selCounter 0 
        +
        $if TODO
            if !appState.currentJobId
                return
                    < MainHeader
                        p Create/select a job
        let currentJobId = appState.currentJobId
        if !currentJobId && jobList.length > 0
            const jobItem = jobList[0]
            set currentJobId = jobItem.id
            _ setAppState
                {
                    @ ...appState
                    @ currentJob jobItem
                    @ currentJobId jobItem.id
            _ getMvc().controller.setAppState
                {
                    @ currentJobId jobItem.id
                    @ activeView appState.activeView
                    @ reloadCount appState.reloadCount
                =>
            $*            
            return
                < MainHeader
                    < SpinnerView
            *$
        if currentJobId
            const jobItemData
                _ startCurrentJob
                    @ currentJobId
                    @ jobItemReloadCount
                    {
                        @ appState
                        @ setAppState
                        @ metaSelectionState
                        @ setMetaSelectionState
            if !jobItemData
                return
                    < MainHeader
                        < SpinnerView
            $$ info "index.MetaProductionPage.jobItemData", jobItemData
            $$ info "index.MetaProductionPage.metaSelectionState", metaSelectionState
            $$ info "index.MetaProductionPage.appState", appState
        else
            $if TODO
                _ alert('Missing redirect to create job')
            return
                < MainHeader
                    p Create/select a job
            info "index.MetaProductionPage.currentJobId: undefined"
        return
            . w-full min-h-screen flex flex-col 
                < MainHeader
                    < LogoTitleNavBar
                        @ title "Meta production jobs"
                    $if TODO
                        . flex-row
                            < MenuItem
                                @ label "Hub productions"
                                @ href "/~/stfnbssl/lab-meta.html?savecount=0&filepath=hubProductions.html.ittf"
                            < MenuItem
                                @ label "Lab"
                                @ href "/ittf/site/lab.html.ittf"
                    < UserNavBar
                        @ loggedUserId user.id
                < MainContent
                    < MainContentLeftBar
                    < MainContentWorkArea
                        < WorkAreaToolBar
                            @ appState {appState}
                            @ onChangeView
                                =>
                                    param value
                                    $$ info 'index.MetaProductionPage.onChangeView', value
                                    _ getMvc().controller.setAppState
                                        {
                                            @ activeView value
                                            @ reloadCount appState.reloadCount
                                        =>
                                            $$ info 'index.MetaProductionPage.onChangeView.setting appState', value
                                            _ setAppState
                                                {
                                                    @ ...appState
                                                    @ activeView value 
                            @ onReloadJobList
                                => 
                                    info 'index.MetaProductionPage.onReloadJobList.appState', appState
                                    _ setAppState
                                        {
                                            @ ...appState
                                            @ reloadCount appState.reloadCount + 1
                        < WorkAreaContent
                            @ appState {appState}
                            @ setAppState {setAppState}
                            @ jobList {jobList}
                            @ jobListError {jobListError}
                            @ jobItemReloadCount {jobItemReloadCount}
                            @ metaSelectionState {metaSelectionState}
                            @ setMetaSelectionState {setMetaSelectionState}
                < MainFooter                   