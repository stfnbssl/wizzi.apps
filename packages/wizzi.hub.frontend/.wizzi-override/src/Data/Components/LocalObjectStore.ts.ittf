module
    $
      var myName = 'LocalObjectStore';

    import
        @ LocalStorageItem
        from "../types"

    import
        @ LocalCollectionStore
        from "./LocalCollectionStore"
    
    export
        #
            # 
            # Creates a new client side local storage object plus collection 
            # and will create an empty object and collection if no one already exist.
            # 
            # @param {string} name The name of our DB we want to use
            # @param {function} callback Our local storage DB uses callbacks
            # 
        class ${myName}
            p dbName
                :string
            p itemColl
                :ref InstanceType
                    :param 
                        :typeof LocalCollectionStore                
            ctor
                param name
                    :string
                set this.dbName = name
                set this.itemColl = new LocalCollectionStore(name + '_objColl')
                if !localStorage.getItem(name)
                    var itemObj = {}
                    _ localStorage.setItem(name, JSON.stringify(itemObj))
            m setValue
                param name
                    :string
                param value
                    :any
                :return
                    :ref LocalStorageItem
                var itemObj
                    :ref LocalStorageItem
                    _  JSON.parse(localStorage.getItem(this.dbName) || '{}')
                set itemObj[name] = value
                _ localStorage.setItem(this.dbName, JSON.stringify(itemObj))
                return itemObj
                #
                    # 
                    # Set an object property value
                    # 
                    # @param {string} name The property name
                    # @param {string} value The property value
                    # @return {object} Returns the entire saved object
                    # 
            m getValue
                param name
                    :string
                param defaultValue
                    :any
                    :optional
                :return
                    :any
                var itemObj
                    :ref LocalStorageItem
                    _ JSON.parse(localStorage.getItem(this.dbName) || '{}')
                $$ info 'api.${myName}.getValue', name, defaultValue, name in itemObj, itemObj
                if name in itemObj
                    $$ info 'api.${myName}.getValue.return', itemObj[name]
                    return itemObj[name]
                elif typeof(defaultValue) != 'undefined'
                    $$ info 'api.${myName}.getValue.return', defaultValue
                    return defaultValue
                else
                    $$ info 'api.${myName}.getValue.return', null
                    return null
                #
                    # 
                    # Get an object property value
                    # 
                    # @param {string} [name] The property name
                    # @param {string} [defaultValue] Optional. 
                    # -               The value to set if the value of name is missing
                    # @return {any} The property value or defaultValue or null
                    # 
            m find
                param query
                    :{
                        :index
                            :any
                            param key
                                :string
                param_callback( required, Method: ${myName}.find )
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                _ this.itemColl.find
                  @ query
                  @ callback
                #
                    # 
                    # Finds object items based on a query given as a JS object
                    # 
                    # @param {object} query The query to match against (i.e. {foo: 'bar'})
                    # @param {function} callback	 The callback to fire when the query has
                    # completed running
                    # 
                    # @example
                    # db.find({foo: 'bar', hello: 'world'}, function (data) {
                    #  // data will return any items that have foo: bar and
                    #  // hello: world in their properties
                    # });
                    # 
            m findAll
                param_callback( required, Method: ${myName}.findAll )
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                _ this.itemColl.findAll
                  @ callback
                #
                    # 
                    # Will retrieve all data from the object items collection
                    # 
                    # @param {function} callback The callback to fire upon retrieving data
                    # 
            m save
                param updateData
                    :ref LocalStorageItem
                param id
                    :string
                param_callback()
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                $$ info 'api.${myName}.prototype.save', id, updateData
                _ this.itemColl.save
                    @ updateData
                    @ id
                    @ callback
                #
                    # 
                    # Will save the given data to the object items. If no item exists it will create a new
                    # item, otherwise it'll simply update an existing item's properties
                    # 
                    # @param {object} updateData The data to save back into the DB
                    # @param {function} callback The callback to fire after saving
                    # @param {number} id An optional param to enter an ID of an item to update
                    # 
            m remove
                param id
                    :string
                param_callback()
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                _ this.itemColl.remove
                  @ id
                  @ callback
                #
                    # 
                    # Will remove an item from the object items
                    # 
                    # @param {number} id The ID of the item you want to remove
                    # @param {function} callback The callback to fire after saving
                    # 
            m drop
                param_callback()
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                _ this.itemColl.drop
                  @ callback
                #
                    # 
                    # Will drop all object items
                    # 
                    # @param {function} callback The callback to fire after dropping the data
                    # 
            m replace
                param items
                    :[
                        :ref LocalStorageItem
                param_callback()
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                _ this.itemColl.replace
                    @ items
                    =>
                        param items
                        _ callback(items)
                #
                    # 
                    # Will replace the entire items collection
                    # 
                    # @param {array} [items] new items collection
                    # @param {function} callback The callback to fire after replacing the data
                    #                 