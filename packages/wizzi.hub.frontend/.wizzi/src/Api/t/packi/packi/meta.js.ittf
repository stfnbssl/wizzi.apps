$group
    $params &md
    iife_window( api, ${md.ApiName}, increment )
        set ${md.ApiName}.createOrUpdateArtifact
          function
              param owner
              param name
              param packiFiles
              param options
              r_promise()
                _ api.Wizzi.getArtifact
                  @ owner
                  @ name
                  a_then( response, err_reject, api.${md.ApiName}.createOrUpdateArtifact.getArtifact.response
                    if response.ok
                      _ api.Wizzi.putArtifact
                        @ response.item._id
                        @ packiFiles
                        @ options
                        a_then( response, err_reject, api.${md.ApiName}.createOrUpdateArtifact.updateArtifact.response
                          _ alert
                            _ 'updateArtifact.response' + JSON.stringify
                              @ response
                    else
                      _ api.Wizzi.createArtifact
                        @ owner
                        @ name
                        @ packiFiles
                        @ options
                        a_then( response, err_reject, api.${md.ApiName}.createOrUpdateArtifact.createArtifact.response
                          _ alert
                            _ 'updateArtifact.response' + JSON.stringify
                              @ response

        set ${md.ApiName}.createOrUpdatePackage
          function
              param owner
              param name
              param packiFiles
              param options
              r_promise()
                _ api.Wizzi.getPackage
                  @ owner
                  @ name
                  a_then( response, err_reject, api.${md.ApiName}.createOrUpdatePackage.getPackage.response
                    if response.ok
                      _ api.Wizzi.putPackage
                        @ response.item._id
                        @ packiFiles
                        @ options
                        a_then( response, err_reject, api.${md.ApiName}.createOrUpdatePackage.updatePackage.response
                          _ alert
                            _ 'updatePackage.response' + JSON.stringify
                              @ response
                    else
                      _ api.Wizzi.createPackage
                        @ owner
                        @ name
                        @ packiFiles
                        @ options
                        a_then( response, err_reject, api.${md.ApiName}.createOrUpdatePackage.createPackage.response
                          _ alert
                            _ 'updatePackage.response' + JSON.stringify
                              @ response

        set ${md.ApiName}.createOrUpdateMeta
          function
              param owner
              param name
              param packiFiles
              param options
              r_promise()
                _ api.Wizzi.getMeta
                  @ owner
                  @ name
                  a_then( response, err_reject, api.${md.ApiName}.createOrUpdateMeta.getMeta.response
                    if response.ok
                      _ api.Wizzi.putMeta
                        @ response.item._id
                        @ packiFiles
                        @ options
                        a_then( response, err_reject, api.${md.ApiName}.createOrUpdateMeta.updateMeta.response
                          _ alert
                            _ 'updateMeta.response' + JSON.stringify
                              @ response
                    else
                      _ api.Wizzi.createMeta
                        @ owner
                        @ name
                        @ packiFiles
                        @ options
                        a_then( response, err_reject, api.${md.ApiName}.createOrUpdateMeta.createMeta.response
                          _ alert
                            _ 'updateMeta.response' + JSON.stringify
                              @ response

        set ${md.ApiName}.getMetaProvides
          function
              param owner
              let urlPluginMeta = '${md.apiUrl}/meta/provides'
              r_promise()
                  _ api.Fetch.get
                      {
                          @ url urlPluginMeta
                      a_then( responsePlugins, err_reject, api.${md.ApiName}.getMetaProvides.pluginMetas.response
                          info 'api.${md.ApiName}.getMetaProvides.pluginMetas.response', responsePlugins
                          _ api.Wizzi.getMeta
                            @ owner 
                            a_then( responseHub, err_reject, api.${md.ApiName}.getMetaProvides.hubmetas.response
                                info 'api.${md.ApiName}.getMetaProvides.hubmetas.response', responseHub
                                foreach meta in responseHub.item
                                  set meta.__is_hub_meta_plugin = true
                                _ ${md.ApiName}.getMetaHubProduction
                                  @ responseHub.item
                                  a_then( metaHubProductions, err_reject, api.${md.ApiName}.getMetaHubProduction.metaHubProductions.response
                                    return 
                                        _ resolve 
                                            {
                                                @ metaPluginProvides responsePlugins
                                                @ hubMetas responseHub
                                                @ metaHubProductions
                                                @ metaPluginProvidesEx
                                                  _ ${md.ApiName}.mergeModuleAndHubProvides
                                                    @ responsePlugins
                                                    @ responseHub
                            catch_reject( api.${md.ApiName}.getMetaProvides.urlHubMeta )
                      catch_reject( api.${md.ApiName}.getMetaProvides.urlHubMeta )

        function addArrayPropItem
          param obj
          param arrayPropName
          param item
          const arrayInstance = obj[arrayPropName]
          if !arrayInstance
            set arrayInstance = obj[arrayPropName] = []
          _ arrayInstance.push
            @ item
        
        function setObjPropWithArrayProp
          param baseObj
          param propName
          param prop
          param unique
          param uniqueMessage
          param arrayName
          param item
          let baseProp = baseObj[propName]
          if !baseProp
            set baseProp = baseObj[propName] = prop
          else
            if unique
              _ alert
                @ uniqueMessage + '. Skipped: ' + propName
              return
          if arrayName
            let baseArray = baseProp[arrayName] 
            if !baseArray
              set baseArray = baseProp[arrayName] = []
            if item
              _ baseArray.push(item)

        set ${md.ApiName}.mergeModuleAndHubProvides
          function
              param moduleMetaPluginProvides
              param hubMetas
              const metaPluginsObj = {}
              const metaPluginCategoriesObj = {}
              const metaProductionsObj = {}
              const metaProductionCategoriesObj = {}
              #
              # node module meta plugins
              foreach pl in moduleMetaPluginProvides.nodeModulePlugins
                if !pl.categories
                  _ alert
                    @ 'Plugin "' + pl.name + '" missing the "categories" property' 
                set pl.pluginCategories = pl.categories || []
                set pl.metaProductionCategories = {}
                set pl.metaProductions = {}
                delete pl.categories
                if metaPluginsObj[pl.name]
                  _ alert
                    @ 'Duplicated plugin name. Skipped: ' + pl.name
                else
                  set metaPluginsObj[pl.name] = pl
                foreach c in pl.pluginCategories
                  if metaPluginCategoriesObj[c.name]
                    _ metaPluginCategoriesObj[c.name].plugins.push
                      {
                        @ name pl.name
                  else
                    set c.plugins = []
                    _ c.plugins.push
                      {
                        @ name pl.name
                    set metaPluginCategoriesObj[c.name] = c
              #
              # node module meta productions
              foreach mp in moduleMetaPluginProvides.metaProductions
                set metaProductionsObj[mp.name] = mp
                const pl = metaPluginsObj[mp.plugin]
                if pl
                  set pl.metaProductions[mp.name]
                    {
                      @ name mp.name
                      @ categories mp.categories || []
                  if !mp.categories
                    _ alert
                      @ 'Meta production "' + mp.name + '" missing the "categories" property' 

                  foreach c in mp.categories
                    set metaProductionCategoriesObj[c.name] = c
                    set pl.metaProductionCategories[c.name] = c
                else
                  _ alert
                    @ 'Meta production ' + mp.name + ' missing plugin property' 
              #
              # wizzi hub meta plugins
              foreach pl in hubMetas.item
                const hubMetaProvidesData
                  _ api.Packi.extractPackiFileContent
                    @ pl.packiFiles
                    @ '.db/meta.provides.json'
                    {
                      @ json true
                # log '${md.ApiName}.mergeModuleAndHubProvides.hubMetaProvidesData', hubMetaProvidesData
                const hubMetaProvides = hubMetaProvidesData.json
                set pl.metaProductionCategories = {}
                set pl.metaProductions = {}

                if hubMetaProvides && hubMetaProvides.pluginMetaProductions && hubMetaProvides.pluginMetaProductions.length > 0
                  set pl.pluginCategories = hubMetaProvides.pluginCategories || []
                 
                  const name = hubMetaProvides.name || pl.name
                  if metaPluginsObj[pl.name]
                    _ alert
                      @ 'Meta plugins in WizziHub cannot have a name already used in jsnode meta plugins. Skipped: ' + pl.name
                  else
                    set metaPluginsObj[pl.name] = pl
                  if hubMetaProvides.pluginCategories && hubMetaProvides.pluginCategories.length > 0
                    foreach c in hubMetaProvides.pluginCategories
                      if metaPluginCategoriesObj[c.name]
                        _ metaPluginCategoriesObj[c.name].plugins.push
                          {
                            @ name pl.name
                      else
                        set c.plugins = []
                        _ c.plugins.push
                          {
                            @ name pl.name
                        set metaPluginCategoriesObj[c.name] = c
                  else
                    _ alert
                      @ 'In hub meta plugin "' + pl.name + '" missing the "pluginCategories" array. It should be in ".db/meta.provides.json"'
                  if hubMetaProvides.pluginMetaProductions && hubMetaProvides.pluginMetaProductions.length > 0
                    foreach mp in hubMetaProvides.pluginMetaProductions
                      set mp.plugin = pl.name
                      if metaProductionsObj[mp.name]
                        _ alert
                          @ 'Meta productions in WizziHub cannot have a name already used in jsnode meta productions. Skipped: ' + mp.name
                      else
                        set metaProductionsObj[mp.name] = mp
                      set pl.metaProductions[mp.name]
                        {
                          @ name mp.name
                          @ categories mp.categories || []
                      if !mp.categories
                        _ alert
                          @ 'In hub meta plugin "' + pl.name + '"' +
                            \b ' the meta production "' + mp.name + '"' +
                            \b ' is missing the "categories" property. It should be in ".db/meta.provides.json"'
                      else
                        foreach c in mp.categories
                          set metaProductionCategoriesObj[c.name] = c
                          set pl.metaProductionCategories[c.name] = c
                    # ??? set pl.metaProductionCategories = Object.values(pl.metaProductionCategories)
                  else
                    _ alert
                      @ 'In hub meta plugin "' + pl.name + '" missing the "pluginMetaProductions" array. It should be in ".db/meta.provides.json"'
              const allPluginsArray = Object.values(metaPluginsObj)
              foreach pl in allPluginsArray
                set pl.metaProductionCategories = Object.values(pl.metaProductionCategories)
                set pl.metaProductions = Object.values(pl.metaProductions)
              return
                {
                  @ metaPlugins allPluginsArray
                  @ metaPluginCategories Object.values(metaPluginCategoriesObj)
                  @ metaProductions Object.values(metaProductionsObj)
                  @ metaProductionCategories Object.values(metaProductionCategoriesObj)

        set ${md.ApiName}.getMetaParameters
          function
              param metaProductions
              param metaPlugins
              log '### >>> ${md.ApiName}.getMetaParameters.metaPlugins', metaPlugins
              let url = '${md.apiUrl}/meta/parameters'
              const inMemoryMetas = []
              foreach item in metaPlugins
                if item.__is_hub_meta_plugin
                  _ inMemoryMetas.push
                    {
                      @ owner item.owner
                      @ name item.name
              log '### >>> ${md.ApiName}.getMetaParameters.inMemoryMetas', inMemoryMetas
              r_promise()
                  _ api.Fetch.post
                      {
                        @ url url
                        { body
                          @ metaProductions metaProductions
                          @ inMemoryMetas inMemoryMetas
                      a_then( metaParameters, err_reject, api.${md.ApiName}.getMetaParameters.metaParameters
                          info '### >>> api.${md.ApiName}.getMetaParameters.metaParameters', metaParameters
                          return 
                              _ resolve 
                                  @ metaParameters
                      catch_reject( api.${md.ApiName}.getMetaParameters )

        set ${md.ApiName}.executeWizziProductionMeta
          function
              param metaCtx
              param metaProductions
              param globalContext
              let url = '${md.apiUrl}/wizzi/production/meta'
              r_promise()
                  _ api.Fetch.post
                      {
                        @ url url
                        { body
                          @ metaCtx
                          @ metaFolder "___templates"
                          @ wizziFolder ".wizzi"
                          @ metaProductions
                          @ globalContext
                      a_then( result, err_reject, api.${md.ApiName}.executeMetaProduction.result
                          info 'api.${md.ApiName}.executeMetaProduction.result', result
                          return 
                              _ resolve 
                                  @ result
                      catch_reject( api.${md.ApiName}.executeMetaProduction )

        set ${md.ApiName}.MetaExecute
          function
              param metaCtx
              param metaProductions
              param globalContext
              let url = '${md.apiUrl}/meta/execute'
              r_promise()
                  _ api.Fetch.post
                      {
                        @ url url
                        { body
                          @ metaCtx
                          @ metaProductions metaProductions
                          @ globalContext
                      a_then( result, err_reject, api.${md.ApiName}.MetaExecute.result
                          info 'api.${md.ApiName}.MetaExecute.result', result
                          return 
                              _ resolve 
                                  @ result
                      catch_reject( api.${md.ApiName}.MetaExecute )

        set ${md.ApiName}.MetaExecuteInMemory
          function
              param metaCtx
              param inMemoryMetas
              param globalContext
              let url = '${md.apiUrl}/meta/executeinmemory'
              r_promise()
                  _ api.Fetch.post
                      {
                        @ url url
                        { body
                          @ metaCtx
                          @ inMemoryMetas
                          @ globalContext
                      a_then( result, err_reject, api.${md.ApiName}.MetaExecuteInMemory.result
                          info 'api.${md.ApiName}.MetaExecuteInMemory.result', result
                          return 
                              _ resolve 
                                  @ result
                      catch_reject( api.${md.ApiName}.MetaExecuteInMemory )

        set ${md.ApiName}.getMetaHubProduction
          function
              param metaItems
              # log 'getMetaHubProduction.enter', metaItems
              const retval
                {
                  [ provides
                  [ metaProductions
                  [ parameters
                  [ packiFiles
              r_promise()
                function doItem
                  param count
                  const metaItem = metaItems[count]
                  if !metaItem
                    # log 'getMetaHubProduction.retval', retval
                    return
                      _ resolve
                        @ retval
                  const packiFilesString = metaItem.packiFiles
                  const packiFilesObj = packiFilesString ? JSON.parse(packiFilesString) : null
                  const parameters
                    _ api.Packi.clonePackiFiles
                      @ packiFilesObj
                      [
                        @ '.packi/parameters/'
                  # log 'getMetaHubProduction.parameters', parameters
                  +
                  if Object.keys(parameters).length < 1
                    return
                      _ doItem
                        @ count + 1
                  +
                  const folderTemplates
                    _ api.Packi.clonePackiFiles
                      @ packiFilesObj
                      [
                        @ 'folderTemplates/'
                  # log 'getMetaHubProduction.folderTemplates', folderTemplates
                  +
                  const ittfDocumentTemplates
                    _ api.Packi.clonePackiFiles
                      @ packiFilesObj
                      [
                        @ 'ittfDocumentTemplates/'
                  # log 'getMetaHubProduction.ittfDocumentTemplates', ittfDocumentTemplates
                  +
                  const plainDocuments
                    _ api.Packi.clonePackiFiles
                      @ packiFilesObj
                      [
                        @ 'plainDocuments/'
                  # log 'getMetaHubProduction.plainDocuments', plainDocuments
                  _ retval.metaProductions.push
                    {
                      @ name metaItem.name
                      @ packiFilesObj
                      @ parameters
                      @ folderTemplates
                      @ ittfDocumentTemplates
                      @ plainDocuments
                  _ doItem
                    @ count + 1
                _ doItem
                  @ 0

