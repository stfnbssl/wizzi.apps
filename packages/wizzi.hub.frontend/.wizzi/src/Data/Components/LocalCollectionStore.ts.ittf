module
    $
        var myName = 'LocalCollectionStore';

    import
        @ LocalStorageItem
        from "../types"
    
    export
        #
            # 
            # Creates a new client side local storage object and will create an empty
            # collection if no collection already exists.
            # 
            # @param {string} name The name of our DB we want to use
            # @param {function} callback Our local storage DB uses callbacks
            # 
        class ${myName}
            p dbName
                :string
            ctor
                param name
                    :string
                set this.dbName = name
                let items
                    :[
                        :ref LocalStorageItem
                    [
                let itemsString = localStorage.getItem(name)
                if !itemsString
                    _ localStorage.setItem(name, JSON.stringify(items))
                else
                    try
                        set items = JSON.parse(itemsString)
                    catch ex
                        set items = []
                        _ localStorage.setItem(name, JSON.stringify(items))
            m find
                param query
                    :{
                        :index
                            :any
                            param key
                                :string
                param_callback( required, Method: ${myName}.find )
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                var items
                    :[
                        :ref LocalStorageItem
                    _ JSON.parse(localStorage.getItem(this.dbName) || '[]')
                _ callback.call
                    @ this
                    _ items.filter
                        function 
                            param item
                            for var q in query
                                if query[q] !== item[q]
                                    return false
                            return true
                #
                    # 
                    # Finds items based on a query given as a JS object
                    # 
                    # @param {object} query The query to match against (i.e. {foo: 'bar'})
                    # @param {function} callback	 The callback to fire when the query has
                    # completed running
                    # 
                    # @example
                    # db.find({foo: 'bar', hello: 'world'}, function (data) {
                    #    // data will return any items that have foo: bar and
                    #    // hello: world in their properties
                    # });
                    # 
            m findAll
                param_callback( required, Method: ${myName}.findAll )
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                var items
                    :[
                        :ref LocalStorageItem
                    _ JSON.parse(localStorage.getItem(this.dbName) || '[]')
                _ callback.call(this, items)
                #
                    # 
                    # Will retrieve all data from the collection
                    # 
                    # @param {function} callback The callback to fire upon retrieving data
                    # 
            m save
                param updateData
                    :ref LocalStorageItem
                param id
                    :union
                        :string
                        :null
                param_callback()
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                var items
                    :[
                        :ref LocalStorageItem
                    _ JSON.parse(localStorage.getItem(this.dbName) || '[]')
                if id
                    # log 'api.${myName}.prototype.save', id
                    var matched = false
                    for var i = 0; i < items.length; i++
                        if items[i].id === id
                            set matched = true
                            # log 'api.${myName}.prototype.save', 'matched', id
                            for var key in updateData
                                set items[i][key] = updateData[key]
                            break 
                    if !matched
                      set updateData.id = id
                          # Generate an ID
                      _ items.push(updateData)
                    _ localStorage.setItem(this.dbName, JSON.stringify(items))
                    _ callback.call(this, items)
                    # If an ID was actually given, find the item and update each property
                else
                    set updateData.id = new Date().getTime()
                        # Generate an ID
                    _ items.push(updateData)
                    _ localStorage.setItem(this.dbName, JSON.stringify(items))
                    _ callback.call
                        @ this
                        @ items 
                #
                    # 
                    # Will save the given data to the DB. If no item exists it will create a new
                    # item, otherwise it'll simply update an existing item's properties
                    # 
                    # @param {object} updateData The data to save back into the DB
                    # @param {function} callback The callback to fire after saving
                    # @param {number} id An optional param to enter an ID of an item to update
                    # 
            m remove
                param id
                    :string
                param_callback()
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                var items
                    :[
                        :ref LocalStorageItem
                    _ JSON.parse(localStorage.getItem(this.dbName) || '[]')
                for var i = 0; i < items.length; i++
                    if items[i].id == id
                        _ items.splice(i, 1)
                        break 
                _ localStorage.setItem(this.dbName, JSON.stringify(items))
                _ callback.call(this, items)
                #
                    # 
                    # Will remove an item from the ${myName} based on its ID
                    # 
                    # @param {number} id The ID of the item you want to remove
                    # @param {function} callback The callback to fire after saving
                    # 
            m drop
                param_callback()
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                var items
                    :[
                        :ref LocalStorageItem
                    [
                _ localStorage.setItem(this.dbName, JSON.stringify(items))
                _ callback.call(this, items)
                #
                    # 
                    # Will drop all storage and start fresh
                    # 
                    # @param {function} callback The callback to fire after dropping the data
                    # 
            m replace
                param items
                    :[
                        :ref LocalStorageItem
                param_callback()
                    :=> 
                        :void 
                        param items
                            :[ 
                                :ref LocalStorageItem
                _ localStorage.setItem(this.dbName, JSON.stringify(items))
                _ callback.call(this, items)
                #
                    # 
                    # Will replace the entire items collection
                    # 
                    # @param {array} [items] new items collection
                    # @param {function} callback The callback to fire after replacing the data
                    #                 