module
    $
        var myName = 'Controller';

    import
        @ JobItem
        from "@/Data/types"

    import
        @ Constants
        from "./Constants"
    
    import
        @ Model
        from "./Model"

    import
        @ arrayAddUniqueName
        from "@/Utils/arrays"

    import
        @ AppState
        from "./types"

    export
        class ${myName}
            p constants
                :typeof Constants
            p model
                :ref InstanceType
                    :param 
                        :typeof Model
            ctor
                param model
                    :ref InstanceType
                        :param 
                            :typeof Model
                param constants
                    :typeof Constants
                set this.model = model
                set this.constants = constants

            m getAppState
                param_callback( required, Method: ${myName}.getAppState )
                    :=> 
                        :void 
                        param cb
                            :ref AppState
                $$ info '${myName}.prototype.getAppState.called'
                _ this.model.getAppState
                    =>
                        param state
                        if !state.activeView 
                            set state.activeView = 'productions-selection'
                            delete state.currentJobId
                        set state.activeView = 'productions-selection'
                        $$ info '${myName}.prototype.getAppState.returning', state
                        return
                            _ callback
                                @ state

            m setAppState
                param newState
                    :ref AppState
                param_callback( required, Method: ${myName}.getAppState )
                    :=> 
                        :void 
                _ this.model.getAppState
                    =>
                        param oldState
                        _ this.model.setAppState
                            _ Object.assign
                                {
                                @ oldState
                                @ newState
                            @ callback           
            
            m selectMetaPluginCategory
                param currentJob
                    :ref JobItem
                param category
                    :string
                param oper
                    :string
                $$ info '${myName}.prototype.selectMetaPluginCategory.currentJob', currentJob
                $$ info '${myName}.prototype.selectMetaPluginCategory.category', category
                if !currentJob.__mpls
                    throw new Error("Property `currentJob.__mpls` not set")
                const 
                    {
                        @ text mplsTextContent
                        @ json mplsJsonContent
                    = currentJob.__mpls
                if oper == 'select'
                    _ arrayAddUniqueName
                        @ mplsJsonContent.metaPluginCategories
                        {
                            @ name category
                else
                    set mplsJsonContent.metaPluginCategories
                        _ mplsJsonContent.metaPluginCategories.filter
                            =>
                                param item
                                return item.name != category
                $$ info '${myName}.prototype.selectMetaPluginCategory.mplsJsonContent', mplsJsonContent
                _ this.model.updatePackiFile
                    @ 'job'
                    @ currentJob.id
                    @ this.constants.metaPluginSelectionsFilePath
                    @ mplsTextContent
                    @ JSON.stringify(mplsJsonContent, null, 2)
                    =>
                        param result
                        $$ info '${myName}.prototype.selectMetaPluginCategory.result', result

            m selectMetaPlugin
                param currentJob
                    :ref JobItem
                param metaPlugin
                    :string
                param oper
                    :string
                if !currentJob.__mpls
                    throw new Error("Property `currentJob.__mpls` not set")
                info '%%%%%%%%%%%%%% ${myName}.prototype.selectMetaPlugin.currentJob', currentJob
                info '${myName}.prototype.selectMetaPlugin.metaPlugin', metaPlugin
                info '${myName}.prototype.selectMetaPlugin.oper', oper
                const 
                    {
                        @ text mplsTextContent
                        @ json mplsJsonContent
                    = currentJob.__mpls
                if oper == 'select'
                    _ arrayAddUniqueName
                        @ mplsJsonContent.metaPlugins
                        {
                            @ name metaPlugin
                else
                    set mplsJsonContent.metaPlugins
                    _ mplsJsonContent.metaPlugins.filter
                        =>
                            param item
                            return item.name != metaPlugin
                info '${myName}.prototype.selectMetaPlugin.mplsJsonContent', mplsJsonContent
                _ this.model.updatePackiFile
                    @ 'job'
                    @ currentJob.id
                    @ this.constants.metaPluginSelectionsFilePath
                    @ mplsTextContent
                    @ JSON.stringify(mplsJsonContent, null, 2)
                    =>
                        param result
                        $$ info '${myName}.prototype.selectMetaPlugin.result', result

            m selectMetaProductionCategory
                param currentJob
                    :ref JobItem
                param category
                    :string
                param oper
                    :string
                $$ info '${myName}.prototype.selectMetaProductionCategory.currentJob', currentJob
                $$ info '${myName}.prototype.selectMetaProductionCategory.category', category
                if !currentJob.__mps
                    throw new Error("Property `currentJob.__mpls` not set")
                const 
                    {
                        @ text mpsTextContent
                        @ json mpsJsonContent
                    = currentJob.__mps
                if oper == 'select'
                    _ arrayAddUniqueName
                        @ mpsJsonContent.metaProductionCategories
                        {
                            @ name category
                    $$ info '${myName}.prototype.selectMetaProductionCategory.mpsJsonContent', mpsJsonContent
                else
                    set mpsJsonContent.metaProductionCategories
                        _ mpsJsonContent.metaProductionCategories.filter
                            =>
                                param item
                                return item.name != category
                _ this.model.updatePackiFile
                    @ 'job'
                    @ currentJob.id
                    @ this.constants.metaProductionSelectionsFilePath
                    @ mpsTextContent
                    @ JSON.stringify(mpsJsonContent, null, 2)
                    =>
                        param result
                        $$ info '${myName}.prototype.selectMetaProductionCategory.result', result

            m selectMetaProduction
                param currentJob
                    :ref JobItem
                param metaProduction
                    :string
                param oper
                    :string
                $$ info '%%%%%%%%%%%%%% ${myName}.prototype.selectMetaProduction.currentJob', currentJob
                $$ info '${myName}.prototype.selectMetaProduction.metaProduction', metaProduction
                $$ info '${myName}.prototype.selectMetaProduction.oper', oper
                if !currentJob.__mps
                    throw new Error("Property `currentJob.__mpls` not set")
                const 
                    {
                        @ text mpsTextContent
                        @ json mpsJsonContent
                    = currentJob.__mps
                if oper == 'select'
                    _ arrayAddUniqueName
                        @ mpsJsonContent.metaProductions
                        {
                            @ name metaProduction
                else
                    set mpsJsonContent.metaProductions
                        _ mpsJsonContent.metaProductions.filter
                            =>
                                param item
                                return item.name != metaProduction
                $$ info '${myName}.prototype.selectMetaProduction.mpsJsonContent', mpsJsonContent
                _ this.model.updatePackiFile
                    @ 'job'
                    @ currentJob.id
                    @ this.constants.metaProductionSelectionsFilePath
                    @ mpsTextContent
                    @ JSON.stringify(mpsJsonContent, null, 2)
                    =>
                        param result
                        $$ info '${myName}.prototype.selectMetaProduction.result', result
