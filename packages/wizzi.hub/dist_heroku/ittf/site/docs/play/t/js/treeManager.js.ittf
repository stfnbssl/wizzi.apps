$group

	class TreeManager
		
		ctor
			param props
			set this.props = props
			set this.schemaTreeViews = {}
			_ this.initialize

		m initialize
			
			js/event_on( schema-selected-ready
				let ittfSelectTag = wz.element("ittfSelect")
				set ittfSelectTag.onchange
					=>
						param ev
						log 'ittfSelectTag.click', ev.target.value
						js/event_emit( ittf-cheatsheet-item-changed
							@ id ev.target.value
				let snippetSelectTag = wz.element("snippetSelect")
				set snippetSelectTag.onchange
					=>
						param ev
						log 'snippetSelectTag.click', ev.target.value
						js/event_emit( snippet-cheatsheet-item-changed
							@ id ev.target.value
				var 
					decl i
					decl L = ittfSelectTag.options.length - 1
				for i=L; i >= 0; i--
					_ ittfSelectTag.remove(i)
				let opt = document.createElement("option")
				set opt.value = -1
				set opt.innerHTML = ""
				_ ittfSelectTag.append(opt)
				_ data.json.elements.map
					=> 
						param element
						param i
						# log "TreeManager", "initialize", "element", element
						_ element.items.map
							=> 
								param item
								param j
								# log "TreeManager", "initialize", "item", item
								set opt = document.createElement("option")
								set opt.value = item.id
								set opt.innerHTML = item.title
								_ ittfSelectTag.append(opt)
				
				var 
					decl i
					decl L = snippetSelectTag.options.length - 1
				for i=L; i >= 0; i--
					_ snippetSelectTag.remove(i)
				set opt = document.createElement("option")
				set opt.value = -1
				set opt.innerHTML = ""
				_ snippetSelectTag.append(opt)
				_ data.json.elements.map
					=> 
						param element
						param i
						# log "TreeManager", "initialize", "element", element
						_ element.items.map
							=> 
								param item
								param j
								log "TreeManager", "initialize", "item", item
								set opt = document.createElement("option")
								set opt.value = item.id
								set opt.innerHTML = item.title
								_ snippetSelectTag.append(opt)

				if false
					_ this.getSchemaTreeView
						@ data.name
						@ data.json

		m getSchemaTreeView
			param name
			param json

			if this.schemaTreeViews[name]

				_ wz.replaceChildren
					@ 'items-tree-view'
					@ this.schemaTreeViews[name]
			
			else

				var treeView
					new TreeView
						{
							@ app this
							@ filesystem null
							@ formsContainerId null

				_ treeView.render
					_ jsonToItemTree
						@ name
						@ json
					a_cb_throw( element )
						# log 'treeView.render', element
						set this.schemaTreeViews[name] = element
						_ wz.replaceChildren
							@ 'items-tree-view'
							@ element

	function jsonToItemTree
		param schemaName
		param json
		
		var root
			{
				@ name schemaName
				@ isFolder true
				@ expanded true
				[ children
		
		foreach e in json.elements
			var item
				{
					@ name e.name
					@ isFolder true
					@ expanded true
					[ children
			_ root.children.push
				@ item
			foreach e2 in e.items
				var item2
					{
						@ name e2.title
						@ id e2.id
						@ isFolder false
						[ children
				_ item.children.push
					@ item2

		return root