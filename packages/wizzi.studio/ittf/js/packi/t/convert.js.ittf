$group

    iife_window( api, ${myName}, increment )
        
        set ${myName}.getFolders
            =>
                param path
                const pathSegments = path.split('/')
                if pathSegments.length === 0
                    return []
                const result = []
                for let pathIdx = 0; pathIdx < pathSegments.length - 1; pathIdx++
                    _ result.push(pathSegments.slice(0, pathIdx + 1).join('/'))
                return result

        set ${myName}.packiToEntryArray
            =>
                param files
                param options 
                set options = options || {}
                const fileSystem = []
                const foldersInFileSystem = new Set()
                for const filename of Object.keys(files).sort()
                    log 'packiToEntryArray', filename, options.filter, filename.startsWith(options.filter)
                    if options.filter && !filename.startsWith(options.filter)
                        continue
                    log 'packiToEntryArray.go'
                    for const folder of ${myName}.getFolders(filename)
                        if !foldersInFileSystem.has(folder)
                            _ fileSystem.push
                                {
                                    { item
                                        @ path folder
                                        @ type 'folder'
                                    { state
                            _ foldersInFileSystem.add(folder)
                    const isEntry = ${myName}.isEntryPoint(filename)
                    _ fileSystem.push
                        iif files[filename].type === 'ASSET'
                            then
                                {
                                    { item
                                        @ path filename
                                        @ type 'file'
                                        @ uri files[filename].contents
                                        @ asset true
                                    { state
                            else
                                {
                                    { item
                                        @ path filename
                                        @ type 'file'
                                        @ content files[filename].contents
                                        @ generated files[filename].generated
                                    { state
                                        @ isOpen isEntry
                                        @ isSelected isEntry
                                        @ isFocused isEntry
                return fileSystem

        set ${myName}.packiFilterIttf
            =>
                param files
                const ittfFiles 
                    {
                _ Object.keys(files).forEach
                    =>
                        param k
                        if k.endsWith('.ittf')
                            set ittfFiles[k] = files[k]
                return ittfFiles

        set ${myName}.mixPreviousAndGeneratedPackiFilesToEntryArray
            =>
                param previous
                param generated
                return ${myName}.packiToEntryArray(mixPreviousAndGeneratedPackiFiles(previous, generated))
    
        set ${myName}.mixPreviousAndGeneratedPackiFiles
            =>
                param previous
                param generated
                const files
                    _ Object.assign
                        {
                        @ previous
                _ Object.keys(generated).forEach
                    =>
                        param k
                        if previous[k]
                            set generated[k].bothRealAndGenerated = true
                        set files[k] = generated[k]
                return files

        set ${myName}.entryArrayToPacki
            =>
                param entryArray
                const sourceResult 
                    {
                for const { item } of entryArray
                    if item.type === 'file'
                        if item.asset
                            set sourceResult[item.path] =
                                {
                                    @ contents item.uri
                                    @ type 'ASSET'
                        else
                            set sourceResult[item.path] =
                                {
                                    @ contents item.content
                                    @ type 'CODE'
                return sourceResult

        set ${myName}.entryArrayDiff
            =>
                param a
                param b
                const diff
                    {
                _ a.forEach
                    =>
                        param entry
                        set diff[entry.item.path] =
                            {
                                @ kind '-'
                                @ a entry.item
                            # console.log('-', entry.item.path)
                _ b.forEach
                    =>
                        param entry
                        if diff[entry.item.path]
                            if diff[entry.item.path].a === entry.item
                                delete diff[entry.item.path]
                            else
                                set diff[entry.item.path].kind === '<>'
                                    # console.log('<>', entry.item.path)
                                set diff[entry.item.path].b === entry.item
                        else
                            set diff[entry.item.path] =
                                {
                                    @ kind '+'
                                    @ b entry.item
                                # console.log('+', entry.item.path)
                return diff
