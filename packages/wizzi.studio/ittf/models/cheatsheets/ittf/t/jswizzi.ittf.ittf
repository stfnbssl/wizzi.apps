$group

	element jsWizzi
		tag
		ast 
		category

		item
			title jsWizzi variable declaration and interpolation
			ittf
				root
					${'$'}
						var name = 'stefi';
						var options = {
							title: 'Chapter 1'
						};
					node title is ${'$'}{options.title}
					node name is ${'$'}{name}

		item 
			title More variable declarations
			ittf
				html
					${'$'}
						var name = 'Ribot';
						var runDowns = 16, runWon = 16;
						var placements = [1, 1, 1, 1, 1];
						var pedigree = {
							mother: 'Romanella',
							father: 'Tenerani',
							paternalGrandfather: 'Bellini',
							maternalGrandfather: 'El greco'
						};

					p ${'$'}{name} was undefeated. Won ${'$'}{runWon} out of ${'$'}{runDowns} races.
					p His father was ${'$'}{pedigree.father} and his mother ${'$'}{pedigree.mother}.
					p His placements are boring: ${'$'}{placements}, ...

		item 
			title Inpute parameters with default values
			ittf
				root
					${'$'}params name|stefi, age:integer|61, inlove:boolean|true
					node ${'$'}{name}, age ${'$'}{age}, ${'$'}{inlove ? 'is' : 'is not'} in love.

		item
			title Unary expressions
			ittf
				any
					any +2 =  ${'$'}{ +2 }
					any -2 = ${'$'}{ -2 }
					any !(2 == 2) = ${'$'}{ !(2 == 2) }
					${'$'}
						var a = 0;
					any a = = ${'$'}{ a }
					any ++a = ${'$'}{ ++a }
					any ++a = ${'$'}{ ++a }
					any --a = ${'$'}{ --a }
					any typeof 3 = ${'$'}{ typeof 3 }
					any typeof '3' = ${'$'}{ typeof '3' }
					any typeof xyz = ${'$'}{ typeof xyz }

		item
			title Expressions
			ittf
				any
					any 2 + 2 = ${'$'}{ 2 + 2 }
					any 5 - 2 = ${'$'}{ 5 - 2 }
					any 3 * 3 = ${'$'}{ 3 * 3 }
					any 6 / 2 = ${'$'}{ 6 / 2 }
					any 5 % 2 = ${'$'}{ 5 % 2 }
					any 5 == 2 = ${'$'}{ 5 == 2 }
					any 5 != 2 = ${'$'}{ 5 != 2 }
					any 5 > 2 = ${'$'}{ 5 > 2 }
					any 5 >= 5 = ${'$'}{ 5 >= 5 }
					any 5 < 2 = ${'$'}{ 5 < 2 }
					any 5 <= 5 = ${'$'}{ 5 <= 5 }
					any "a" in { a: 1} = ${'$'}{ "a" in { a: 1} }
					any typeof 5 === 'string' = ${'$'}{ typeof 5 === 'string' }
					any String(5) = ${'$'}{ String(5) }
					any Number('5.5') = ${'$'}{ Number('5.5') }
					any Date(2013,6,12) = ${'$'}{ Date(2013,6,12) }
					any 5 << 5 = ${'$'}{ 5 << 5 }
					any 5 >> 5 = ${'$'}{ 5 >> 5 }
					any 5 >>> 5 = ${'$'}{ 5 >>> 5 }
					any 5 | 5 = ${'$'}{ 5 | 5 }
					any 5 & 5 = ${'$'}{ 5 & 5 }
					any 5 ^ 5 = ${'$'}{ 5 ^ 5 }


		item 
			title Conditional operator
			ittf
				root
					node (3 == 3 ? 1 : 0) = ${'$'}{ 3 == 3 ? 1 : 0 }
					node (true ? 5 : 2) = ${'$'}{ true ? 5 : 2 }


		item 
			title Assignments
			ittf
				root
					${'$'} var a = 0;
					node var a = 0; a += 2; -> ${'$'}{ a += 2 }
					${'$'} var a = 0;
					node var a = 0; a -= 2; -> ${'$'}{ a -= 2 }
					${'$'} var a = 3;
					node var a = 3; a *= 2; -> ${'$'}{ a *= 2 }
					${'$'} var a = 3;
					node var a = 3; a /= 2; -> ${'$'}{ a /= 2 }
					${'$'} var a = 3;
					node var a = 3; a %= 2; -> ${'$'}{ a %= 2 }
					${'$'} var a = 3;
					node var a = 3; a <<= 2; -> ${'$'}{ a <<= 2 }
					${'$'} var a = 3;
					node var a = 3; a >>= 2; -> ${'$'}{ a >>= 2 }
					${'$'} var a = 3;
					node var a = 3; a >>>= 2; -> ${'$'}{ a >>>= 2 }
					${'$'} var a = 3;
					node var a = 3; a &= 2; -> ${'$'}{ a &= 2 }
					${'$'} var a = 3;
					node var a = 3; a |= 2; -> ${'$'}{ a |= 2 }
					${'$'} var a = 3;
					node var a = 3; a ^= 2; -> ${'$'}{ a ^= 2 }



