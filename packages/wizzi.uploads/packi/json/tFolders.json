[
  {
    "owner": "stfnbssl",
    "name": "wizzihub",
    "packiFiles": {
      "t/a_cb.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params result|notUsed\n    =>\n        param err\n        param ${result}\n        if err\n            return\n                _ callback\n                    @ err\n        $hook\n"
      },
      "t/a.html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params text, href|#, ca|@@null\n    a ${text}\n        href ${href}\n        $if ca\n            class ${ca}\n        $hook\n"
      },
      "t/a_cb_no_err.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params result|notUsed\n    =>\n        param err\n        param ${result}\n        $hook\n"
      },
      "t/a_cb_throw.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params result|notUsed\n    =>\n        param err\n        param ${result}\n        if err\n            log 'err', err\n            throw err\n        $hook\n"
      },
      "t/css_wz.html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params url\n    $if isWizziStudio\n        link\n            href ${url}.ittf\n            rel stylesheet\n    $else\n        link\n            href ${url}\n            rel stylesheet\n"
      },
      "t/event_emit.js.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\t$params name\r\n\r\n\t_ glEventHub.emit\r\n\t\t@ '${name}'\r\n\t\t{\r\n\t\t\t$hook\r\n"
      },
      "t/f_cb.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params result|notUsed\n    function\n        param err\n        param ${result}\n        if err\n            return\n                _ callback\n                    @ err\n        $hook\n"
      },
      "t/event_on.js.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\t$params name\r\n\r\n\t_ glEventHub.on\r\n\t\t@ '${name}'\r\n\t\t=>\r\n\t\t\tparam data\r\n\t\t\tlog 'on ${name}', data\r\n\t\t\t$hook\r\n"
      },
      "t/f_cb_no_err.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params result|notUsed\n    function\n        param err\n        param ${result}\n        $hook\n"
      },
      "t/f_cb_throw.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params result|notUsed\n    function\n        param err\n        param ${result}\n        if err\n            log 'err', err\n            throw err\n        $hook\n"
      },
      "t/j.html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params url\n    script\n        src ${url}\n        crossorigin anonymous\n"
      },
      "t/js_wz.html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params url\n    $if isWizziStudio\n        script\n            src ${url}.ittf\n            crossorigin anonymous\n    $else\n        script\n            src ${url}\n            crossorigin anonymous\n"
      },
      "t/r_cb.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params result|@@null\n    return\n        _ callback\n            @ null\n            $if result !== null\n                @ ${result}\n            $hook\n"
      },
      "t/s.html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params url\n    link\n        href ${url}\n        rel stylesheet\n"
      },
      "t/wfjobs.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params name, &jobCtx, ext|@@null\n    $if name == 'any_js'\n        artifact any_js\n            src ./**/*.js.ittf\n            schema js\n            generator js/module\n            extension js\n            ignore /**/bin/**/*.js\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_ts'\n        artifact any_ts\n            src ./**/*.ts.ittf\n            schema ts\n            generator ts/module\n            extension ts\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_tsx'\n        artifact any_tsx\n            src ./**/*.tsx.ittf\n            schema ts\n            generator ts/module\n            extension tsx\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_css'\n        artifact any_css\n            src ./**/*.css.ittf\n            schema css\n            generator css/document\n            extension css\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_svg'\n        artifact any_svg\n            src ./**/*.svg.ittf\n            schema svg\n            generator svg/document\n            extension svg\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_html'\n        artifact any_html\n            src ./**/*.html.ittf\n            schema html\n            generator html/document\n            extension html\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_json'\n        artifact any_json\n            src ./**/*.json.ittf\n            schema json\n            generator json/document\n            extension json\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_xml'\n        artifact any_xml\n            src ./**/*.xml.ittf\n            schema xml\n            generator xml/document\n            extension xml\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_yml'\n        artifact any_yml\n            src ./**/*.yml.ittf\n            schema yaml\n            generator yaml/document\n            extension yml\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_yaml'\n        artifact any_yaml\n            src ./**/*.yaml.ittf\n            schema yaml\n            generator yaml/document\n            extension yaml\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_md'\n        artifact any_md\n            src ./**/*.md.ittf\n            schema md\n            generator md/document\n            extension md\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_text'\n        artifact any_text\n            src ./**/*.text.ittf\n            schema text\n            generator text/document\n            extension text\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_text_no_extension'\n        artifact any_text\n            src ./**/*.text.ittf\n            schema text\n            generator text/document\n            extension @@null\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_ittf'\n        artifact any_ittf\n            src ./**/*.ittf.ittf\n            schema ittf\n            generator ittf/document\n            extension ittf\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == '.env'\n        artifact .env\n            src .env.text.ittf\n            schema text\n            generator text/document\n            dest-path .env\n            extension env\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'www'\n        artifact www\n            src bin/www.js.ittf\n            schema js\n            generator js/module\n            dest-path bin/www\n            extension\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == '.babelrc'\n        artifact .babelrc\n            src .babelrc.json.ittf\n            schema json\n            generator json/document\n            dest-path .babelrc\n            extension babelrc\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == '.gitignore'\n        artifact .gitignore\n            src .gitignore.text.ittf\n            schema text\n            generator text/document\n            dest-path .gitignore\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == '.prettierrc'\n        artifact .prettierrc\n            src .prettierrc.json.ittf\n            schema json\n            generator json/document\n            dest-path .prettierrc.json\n            extension json\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == '.prettierignore'\n        artifact .prettierignore\n            src .prettierignore.text.ittf\n            schema text\n            generator text/document\n            dest-path .prettierignore\n            extension text\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == '.eslintrc'\n        artifact .eslintrc\n            src .eslintrc.js.ittf\n            schema js\n            generator js/module\n            dest-path .eslintrc.js\n            extension js\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == '.eslintignore'\n        artifact .eslintignore\n            src .eslintignore.text.ittf\n            schema text\n            generator text/document\n            dest-path .eslintignore\n            extension text\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == '.npmignore'\n        artifact .npmignore\n            src .npmignore.text.ittf\n            schema text\n            generator text/document\n            dest-path .npmignore\n            extension text\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'Procfile'\n        artifact Procfile\n            src Procfile.text.ittf\n            schema text\n            generator text/document\n            dest-path Procfile\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == '.azure_deployment'\n        artifact .azure_deployment\n            src .deployment.text.ittf\n            schema text\n            generator text/document\n            dest-path .deployment\n            extension text\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'server.cert'\n        artifact server.cert\n            src server.cert.text.ittf\n            schema text\n            generator text/document\n            dest-path server.cert\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'server.key'\n        artifact server.key\n            src server.key.text.ittf\n            schema text\n            generator text/document\n            dest-path server.key\n            $if jobCtx.job_model\n                model-ref ${jobCtx.job_model}\n                    export-name ${jobCtx.job_model}\n            $hook\n    $elif name == 'any_plain'\n        artifact any_plain_${ext}\n            src ./**/*.${ext}\n            extension ${ext}\n    $elif name == 'any_plain_image'\n        artifact any_plain_jpeg\n            src ./**/*.jpeg\n            extension jpeg\n        artifact any_plain_jpg\n            src ./**/*.jpg\n            extension jpg\n        artifact any_plain_gif\n            src ./**/*.gif\n            extension gif\n        artifact any_plain_png\n            src ./**/*.png\n            extension png\n        artifact any_plain_bmp\n            src ./**/*.bmp\n            extension bmp\n        artifact any_plain_svg\n            src ./**/*.svg\n            extension svg\n    $else\n        $throw wfjob name not managed: ${name}\n"
      },
      "t/css/ace-edit-browse.css.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\t. ittf-editor\r\n\t\tdisplay flex\r\n\t\tflex-direction column !important\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n\r\n\t# ittf-editor-title\r\n\t\theight 20px !important\r\n\t\twidth 100% !important\r\n\t\tpadding 2px 8px\r\n\r\n\t. ittf-editor-panel\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n\r\n\t# editorContainer\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n\r\n\t. result-browser\r\n\t\tdisplay flex\r\n\t\tflex-direction column !important\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n\r\n\t# result-browser-title\r\n\t\theight 20px !important\r\n\t\twidth 100% !important\r\n\t\tpadding 2px 8px\r\n\r\n\t. result-browser-panel\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n\r\n\t. result-browser-container\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n\r\n\t. result-browser-control\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n\r\n\t. result-iframe\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n"
      },
      "t/css/file-explorer.css.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\t. fl\r\n\t\tmargin 12px 0\r\n\r\n\t. fl-nodes\r\n\t\tpadding 0 8px\r\n\r\n    . fl-icon\r\n        height 16px !important\r\n        width 16px !important\r\n        @ fill currentcolor !important\r\n        vertical-align middle !important\r\n        opacity 0.7 !important"
      },
      "t/css/bars.css.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\t. result-bar\r\n\t\tpadding 3rem 0.1rem\r\n\r\n\t. result-cmd\r\n\t\tmargin 1rem 0\r\n\r\n\t. result-cmd-btn\r\n\t\twidth 100%\r\n\t\tbackground-color #ddd\r\n        display inline-block\r\n        padding 0.3em\r\n        border 0.16em solid rgba(255,255,255,0)\r\n        border-radius 1em\r\n        box-sizing border-box\r\n        text-decoration none\r\n        font-family 'Roboto',sans-serif\r\n        font-weight 300\r\n        color #333333\r\n        text-shadow 0 0.04em 0.04em rgba(0,0,0,0.35)\r\n        text-align center\r\n        transition all 0.2s\r\n\t\t& :hover\r\n\t\t\tborder-color rgba(255,255,255,1)\r\n"
      },
      "t/css/shell.css.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\t. sh\r\n\t\tdisplay flex !important\r\n\t    flex-direction column !important\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n\t\tbackground-color rgb(250, 250, 250) !important\r\n\t\tcolor rgb(17, 17, 17) !important\r\n\t\toverflow hidden !important\r\n\r\n\t. sh-he\r\n\t\tdisplay flex !important\r\n\t    flex-direction row\r\n\t\talign-items center !important\r\n\t\tjustify-content space-between !important\r\n\t\theight 60px !important\r\n\t\tbackground-color rgb(255, 255, 255) !important\r\n\t\tborder-bottom 1px solid rgba(0, 0, 0, 0.08) !important\r\n\t\tpadding 10px 20px\r\n\r\n\t. sh-bo\r\n\t\tdisplay flex !important\r\n\t    flex-direction row\r\n\t\tmin-height 0px !important\r\n\t\tmin-width 0px !important\r\n\t\tflex 1 1 0% !important\r\n        width 100% !important\r\n\r\n\t. sh-bo-lsb\r\n        -webkit-box-direction normal !important\r\n        -webkit-box-orient vertical !important\r\n        display flex !important\r\n\t\tmin-width 10rem !important\r\n        flex-direction column !important\r\n\t\t# bg for test\r\n\t\tbackground-color rgb(230, 230, 230) !important\r\n\r\n    . sh-bo-lsb-schema-button        \r\n        font-size 1.3em\r\n        font-weight bold\r\n        margin 5px\r\n        padding 5px\r\n        background-color #434343\r\n        color #bbb\r\n        border-radius 5px\r\n        text-align center\r\n        cursor pointer\r\n        & :hover\r\n            color #ddd\r\n    . sh-bo-lsb-schema-button.selected\r\n        color #fff\r\n        font-size 1.35em\r\n\r\n\t. sh-bo-co\r\n        -webkit-box-direction normal !important\r\n        -webkit-box-orient vertical !important\r\n        display flex !important\r\n        flex-direction column !important\r\n        min-width 0px !important\r\n        min-height 0px !important\r\n        flex 1 1 0% !important\r\n        background-color #bcbcbc\r\n\r\n    . sh-bo-co-title        \r\n        font-size 1.5em\r\n        font-weight bold\r\n\t\r\n\t. sh-bo-co-ge\r\n\t\tdisplay flex !important\r\n\t    flex-direction row\r\n\t\tmin-height 0px !important\r\n\t\tmin-width 0px !important\r\n\t\tflex 1 1 0% !important\r\n        margin 5px\r\n\r\n\t. sh-bo-co-ge-ittf\r\n\t\theight 100% !important\r\n        width 50%\r\n\r\n\t. sh-bo-co-ge-result\r\n\t\tflex 1 1 0% !important\r\n\t\theight 100% !important\r\n        width 50%\r\n\r\n\t. sh-bo-co-wi\r\n\t\tdisplay flex !important\r\n\t    flex-direction row\r\n\t\tmin-height 0px !important\r\n\t\tmin-width 0px !important\r\n\t\tflex 1 1 0% !important\r\n        margin 5px\r\n        \r\n\r\n\t. sh-bo-co-wi-snippet\r\n\t\theight 100% !important\r\n        width 50%\r\n\r\n\t. sh-bo-co-wi-result\r\n\t\tflex 1 1 0% !important\r\n\t\theight 100% !important\r\n        width 50%\r\n\r\n\t. sh-fo\r\n        -webkit-box-align center !important\r\n        -webkit-box-direction normal !important\r\n        -webkit-box-orient horizontal !important\r\n        position relative !important\r\n        display flex !important\r\n        flex-direction row !important\r\n        align-items center !important\r\n        height 30px !important\r\n        z-index 10 !important\r\n        background-color rgb(255, 255, 255) !important\r\n        color rgb(153, 153, 153) !important\r\n        padding 0px 0.25em !important\r\n        border-top 1px solid rgba(0, 0, 0, 0.08) !important\r\n\r\n\t# gen-ittf-editor\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n        max-height 41vh\r\n        \r\n\r\n\t# gen-result-editor\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n        max-height 41vh\r\n\r\n\t# snippet-source-editor\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n        max-height 41vh\r\n\r\n\t# snippet-result-editor\r\n\t\theight 100% !important\r\n\t\twidth 100% !important\r\n        max-height 41vh"
      },
      "t/css/tree-node.css.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\t. tree-node\r\n        position relative\r\n\t\tfont-size 13px\r\n\t\tline-height 1.8\r\n\t\t. copying\r\n\t\t\tborder 1px dashed #dedede\r\n\t\t. cutting\r\n\t\t\tborder 1px dashed #dedede\r\n\t\t\topacity 0.5\r\n\t\t. icon-item-group\r\n\t\t\tposition relative !important\r\n\t\t\tdisplay inline-block !important\r\n\t\t\twidth 100% !important\r\n\t\t\tcursor pointer !important\r\n\t\t\tz-index 1 !important\r\n\t\t\twhite-space nowrap !important\r\n\t\t\toutline 0px !important\r\n\t\t\tpadding 0px 16px !important\r\n\t\t. item-name\r\n\t\t\tvertical-align -1px !important\r\n\t\t\tuser-select none !important\r\n\t\t\tmargin 0px 6px !important\r\n    \r\n\t. tree-node .tree-child-leaves\r\n        display block\r\n        margin-left 15px\r\n    \r\n\t. tree-node .hidden\r\n        display none\r\n    \r\n\t. tree-node .tree-expando\r\n        background #ddd\r\n        border-radius 3px\r\n        cursor pointer\r\n        float left\r\n        height 10px\r\n        line-height 10px\r\n        position relative\r\n        text-align center\r\n        top 5px\r\n        width 10px\r\n    \r\n\t. tree-node .hidden\r\n        visibility hidden\r\n    \r\n\t. tree-node .tree-expando:hover\r\n        background #aaa\r\n    \r\n\t. tree-node .tree-node-text\r\n        cursor pointer\r\n        float left\r\n        margin-left 5px\r\n    \r\n\t. tree-node .tree-node-text:hover\r\n        color blue\r\n    \r\n\t. tree-node .tree-node-content\r\n\t\tdisplay flex\r\n\t\tflex-direction row\r\n\t\t& :hover\r\n\t\t\tbackground #dedede\r\n\r\n\t. tree-node-context-menu-on\r\n\t\tbackground #cdcdcd\r\n\t\r\n\t$*\r\n\t. tree-node .tree-node-content:before\r\n        + .tree-node .tree-node-content:after\r\n        content \" \"\r\n        display table\r\n    \r\n\t. tree-node .tree-node-content:after\r\n        clear both\r\n\t*$\r\n"
      },
      "t/css/splash.css.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\t. splash-editor\r\n\t\theight 100%\r\n\t\twidth 100%\r\n\t\tbackground-color rgb(230, 230, 230) !important\r\n\r\n\t. splash-result\r\n\t\theight 100%\r\n\t\twidth 100%\r\n\t\tbackground-color rgb(230, 230, 230) !important"
      },
      "t/css/widgets/file-explorer.css.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\t. fl\r\n\t\tmargin 12px 0\r\n\r\n\t. fl-nodes\r\n\t\tpadding 0 8px\r\n\r\n    . fl-icon\r\n        height 16px !important\r\n        width 16px !important\r\n        @ fill currentcolor !important\r\n        vertical-align middle !important\r\n        opacity 0.7 !important"
      },
      "t/css/widgets/tree-node.css.ittf": {
        "type": "CODE",
        "contents": "$group\r\n\r\n\t. tree-node\r\n        position relative\r\n\t\tfont-size 13px\r\n\t\tline-height 1.8\r\n\t\t. copying\r\n\t\t\tborder 1px dashed #dedede\r\n\t\t. cutting\r\n\t\t\tborder 1px dashed #dedede\r\n\t\t\topacity 0.5\r\n\t\t. icon-item-group\r\n\t\t\tposition relative !important\r\n\t\t\tdisplay inline-block !important\r\n\t\t\twidth 100% !important\r\n\t\t\tcursor pointer !important\r\n\t\t\tz-index 1 !important\r\n\t\t\twhite-space nowrap !important\r\n\t\t\toutline 0px !important\r\n\t\t\tpadding 0px 16px !important\r\n\t\t\t& .selected\r\n\t\t\t\tbackground #cdcdcd\r\n\t\t. item-name\r\n\t\t\tvertical-align -1px !important\r\n\t\t\tuser-select none !important\r\n\t\t\tmargin 0px 6px !important\r\n    \r\n\t. tree-node .tree-child-leaves\r\n        display block\r\n        margin-left 15px\r\n    \r\n\t. tree-node .hidden\r\n        display none\r\n    \r\n\t. tree-node .tree-expando\r\n        background #ddd\r\n        border-radius 3px\r\n        cursor pointer\r\n        float left\r\n        height 10px\r\n        line-height 10px\r\n        position relative\r\n        text-align center\r\n        top 5px\r\n        width 10px\r\n    \r\n\t. tree-node .hidden\r\n        visibility hidden\r\n    \r\n\t. tree-node .tree-expando:hover\r\n        background #aaa\r\n    \r\n\t. tree-node .tree-node-text\r\n        cursor pointer\r\n        float left\r\n        margin-left 5px\r\n    \r\n\t. tree-node .tree-node-text:hover\r\n        color blue\r\n    \r\n\t. tree-node .tree-node-content\r\n\t\tdisplay flex\r\n\t\tflex-direction row\r\n\t\t& :hover\r\n\t\t\tbackground #dedede\r\n\r\n\t. tree-node-context-menu-on\r\n\t\tbackground #cdcdcd\r\n\t\r\n\t$*\r\n\t. tree-node .tree-node-content:before\r\n        + .tree-node .tree-node-content:after\r\n        content \" \"\r\n        display table\r\n    \r\n\t. tree-node .tree-node-content:after\r\n        clear both\r\n\t*$\r\n"
      },
      "t/images/logo.html.ittf": {
        "type": "CODE",
        "contents": "svg\n    $params color|#000, bgcolor|#fff, viewBox|0 0 660 280\n    $\n        var opt = {};\n        opt.y0 = 10;\n        opt.y1 = 10;\n        opt.y1a = 90;\n        opt.y2 = 210;\n        opt.ybottom = 250;\n        opt.color = color;\n    preserve-aspect-ratio xMidYMid meet\n    viewBox ${viewBox}\n    rect\n        x 0\n        y 0\n        width 660\n        height 280\n        fill ${bgcolor}\n        stroke none\n    polyline\n        stroke ${color}\n        fill ${color}\n        stroke-width 2\n        points 10 ${opt.ybottom} 45 ${opt.y0} 60 ${opt.y0} 75 ${opt.y1a + 40} 120 ${opt.y2} 120 ${opt.y1a + 40} 175 ${opt.y2} 175 ${opt.y1a + 20} 230 ${opt.y2} 230 ${opt.ybottom}\n    i( 250, &opt )\n    z( 320, &opt )\n    z( 450, &opt )\n    i( 590, &opt )\n"
      },
      "t/images/t/z.html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params l:integer, &opt\n    polyline\n        stroke ${opt.color}\n        fill ${opt.color}\n        stroke-width 2\n        points ${l} ${opt.ybottom} ${l} ${opt.ybottom - 20} ${l+100} ${opt.y1a+40} ${l+80} ${opt.y1a+20} ${l+80} ${opt.y1a} ${l+130} ${opt.y1a} ${l+100} ${opt.ybottom - 20} ${l+120} ${opt.ybottom - 20} ${l+120} ${opt.ybottom}\n"
      },
      "t/images/t/i.html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params l:integer, &opt\n    polyline\n        stroke ${opt.color}\n        fill ${opt.color}\n        stroke-width 2\n        points ${l} ${opt.ybottom} ${l+10} ${opt.y1+80} ${l+40} ${opt.y1+80} ${l+50} ${opt.ybottom}\n    path\n        stroke ${opt.color}\n        fill ${opt.color}\n        stroke-width 2\n        d M${l+30}, ${opt.y1+20} C${l+60},${opt.y1+40} ${l+0},${opt.y1+60} ${l+30}, ${opt.y1+74}\n"
      },
      "t/layouts/site-scripts.html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &opt\n    $\n        var useReact = opt.useReact || opt.useMaterialUI;\n        var useBabel = useReact || opt.useBabel;\n    \n    $if opt.useAce\n        $if opt.isWizziStudio\n            $if opt.production\n                j( /public/lib/ace/src-min-noconflict/ace.js\n            $else\n                j( /public/lib/ace/src-noconflict/ace.js\n        $else\n            j( https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.2/ace.js\n    $if opt.useBootstrap\n        j( /public/lib/bootstrap/dist/js/bootstrap.min.js\n    $if opt.useEventEmitter\n        j( https://unpkg.com/eventemitter3@latest/umd/eventemitter3.min.js\n    $if opt.useCodemirror\n        j( /public/lib/codemirror/lib/codemirror.js\n        j( /public/lib/codemirror/mode/javascript/javascript.js\n        j( /public/lib/codemirror/mode/xml/xml.js\n        j( /public/lib/codemirror/theme/monokai.css\n        j( /public/lib/codemirror/theme/twilight.css\n    $if opt.useDeepDiff\n        $if opt.isWizziStudio\n            j( /public/lib/flitbit/deep-diff.min.js\n        $else\n            j( https://cdnjs.cloudflare.com/ajax/libs/deep-diff/0.3.3/deep-diff.min.js\n    $if opt.useKeycode\n        $if opt.isWizziStudio\n            j( /public/lib/material-ui/keycode.min.2.2.0.js\n        $else\n            j( https://cdn.jsdelivr.net/npm/keycode.js\n    $if opt.useHighlight\n        $if opt.isWizziStudio\n            j( https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/highlight.min.js\n        $else\n            j( https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/highlight.min.js\n    $if opt.useInteractJs\n        j( /public/lib/interactjs/interact.js\n    $if opt.useJarallax\n        j( /public/lib/object-fit-images/ofi.min.js\n        $if opt.production\n            j( /public/lib/jarallax/jarallax.min.js\n            j( /public/lib/jarallax/jarallax-video.min.js\n            j( /public/lib/jarallax/jarallax-element.min.js\n        $else\n            j( /public/lib/jarallax/jarallax.js\n            j( /public/lib/jarallax/jarallax-video.js\n            j( /public/lib/jarallax/jarallax-element.js\n    $if opt.useJQuery || opt.useBootstrap\n        $if opt.production\n            j( /public/lib/jquery/jquery.min.js\n        $else\n            j( /public/lib/jquery/jquery.js\n    $if opt.useJsonFormatter\n        $if opt.isWizziStudio\n            j( /public/lib/json-formatter/json-formatter.js\n        $else\n            j( https://cdn.jsdelivr.net/npm/json-formatter-js@2.2.1/dist/json-formatter.min.js\n    $if opt.useJss\n        js /public/lib/jss/jss.js\n        js /public/lib/jss/jss-preset-default.js\n    $if opt.useMarkdown\n        j( https://cdn.jsdelivr.net/npm/marked/marked.min.js\n    $if opt.useMathJax\n        j( https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\n    $if opt.usePopper\n        j( /public/lib/popper/popper.js\n    $if opt.usePrism\n        $if opt.isWizziStudio\n            js /public/lib/prism/prism.js\n        $else\n            js https://cdnjs.cloudflare.com/ajax/libs/prism/1.6.0/prism.min.js\n    $if opt.usePubSub\n        js /public/lib/pubsub/pubsub.js\n    $if useReact\n        $if opt.production\n            j( https://unpkg.com/prop-types@15.8.1/prop-types.min.js\n        $else\n            j( https://unpkg.com/prop-types@15.8.1/prop-types.js\n        $if opt.useReactLatest\n            $if opt.production\n                j( https://unpkg.com/react@18.2.0/umd/react.production.min.js\n                j( https://unpkg.com/react-dom@latest/umd/react-dom.production.min.js\n            $else\n                j( https://unpkg.com/react@latest/umd/react.development.js\n                j( https://unpkg.com/react-dom@latest/umd/react-dom.development.js\n        $else\n            $if opt.production\n                j( https://unpkg.com/react@18.2.0/umd/react.production.min.js\n                j( https://unpkg.com/react-dom@18.2.0/umd/react-dom.production.min.js\n            $else\n                j( https://unpkg.com/react@18.2.0/umd/react.development.js\n                j( https://unpkg.com/react-dom@18.2.0/umd/react-dom.development.js\n        $if opt.useClassNames\n            j( /public/lib/react/classnames.js\n        $if opt.useMaterialUI\n            $if opt.materialUI.latest\n                $if opt.production\n                    j( https://unpkg.com/@mui/material@latest/umd/material-ui.production.min.js\n                $else\n                    j( https://unpkg.com/@mui/material@latest/umd/material-ui.development.js\n            $else\n                $if opt.production\n                    $if opt.materialUI.v4\n                        j( https://unpkg.com/@material-ui/core@4.12.4/umd/material-ui.development.min.js\n                    $else\n                        j( https://unpkg.com/@mui/material@5.8.7/umd/material-ui.production.min.js\n                $else\n                    $if opt.materialUI.v4\n                        j( https://unpkg.com/@material-ui/core@4.12.4/umd/material-ui.development.js\n                    $else\n                        j( https://unpkg.com/@mui/material@5.8.7/umd/material-ui.development.js\n        $if opt.useRouter\n            $if opt.local || opt.isWizziStudio\n                j( /public/lib/react/react-router.min.4.3.1.js\n            $else\n                $if opt.useRouterLatest\n                    j( https://unpkg.com/react-router-dom@latest/umd/react-router-dom.js\n                $else\n                    j( https://unpkg.com/react-router-dom@4.3.1/umd/react-router-dom.js\n        $if opt.useReactGrid\n            j( /public/lib/react/react-grid-layout.min.js\n        $if opt.useDownshift\n            $if opt.local || opt.isWizziStudio\n                j( https://unpkg.com/downshift@6.1.7/dist/downshift.umd.js\n            $else\n                j( https://cdn.jsdelivr.net/npm/downshift@2.0.10/dist/downshift.umd.min.js\n        $if opt.useGridLayout\n            $if opt.useGridLayoutLatest\n                j( https://unpkg.com/react-grid-layout@latest/dist/react-grid-layout.min.js\n            $else\n                j( https://unpkg.com/react-grid-layout@1.3.4/dist/react-grid-layout.min.js\n        $if opt.react.useStyledComponents\n            js //unpkg.com/styled-components@4.0.1/dist/styled-components.min.js\n        $if opt.react.useTransitionGroup\n            js https://cdnjs.cloudflare.com/ajax/libs/react-transition-group/4.4.1/react-transition-group.min.js\n    $if opt.useRxJs\n        j( /public/lib/rxjs/rxjs.umd.min.js\n    $if opt.useScrollReveal\n        j( /public/lib/scrollreveal/scrollreveal.js\n    $if opt.useSplit\n        js /public/lib/controls/split.js\n    $if opt.useSweetalert\n        j( https://cdn.jsdelivr.net/npm/sweetalert2@7.31.1/dist/sweetalert2.all.min.js\n    $if opt.useUnderscore\n        $if opt.production\n            j( /public/lib/underscore/underscore.min.js\n        $else\n            j( /public/lib/underscore/underscore.js\n    $if opt.useVue\n        j( https://unpkg.com/vue\n    $if opt.useWizzi\n        $if opt.isWizziStudio\n            j( /public/wizzi-play/scripts/wizzi.standalone.js\n        $else\n            j( /scripts/wizzi.standalone.js\n    $if opt.useMathJax\n        script\n            #\n                _ MathJax.Hub.Config\n                    {\n                        @ tex2jax\n                            {\n                                @ inlineMath [['$','$'], ['\\\\(','\\\\)']]\n                                @ processEscapes true\n    $if useBabel\n        j( https://unpkg.com/babel-standalone@latest/babel.min.js\n    $if opt.useMonaco\n        j( /public/lib/monaco-editor/min/vs/loader.js\n    $if opt.mainJs && opt.mainJs.length > 0\n        $if useBabel\n            script\n                src ${opt.mainJs}\n                type text/babel\n        $else\n            js ${opt.mainJs}\n"
      },
      "t/layouts/site-styles.html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &opt\n    $if opt.useBootstrap\n        css /public/lib/bootstrap/dist/css/bootstrap.min.css\n    $if opt.useCodemirror\n        s( /public/lib/codemirror/lib/codemirror.css\n        s( /public/lib/codemirror/theme/monokai.css\n        s( /public/lib/codemirror/theme/twilight.css\n    $if typeof(wzCtx.aspect) !== 'undefined'\n        $if wzCtx.aspect.AnimateCss\n            $if wzCtx.aspect.production\n                s( /public/lib/animatecss/animate.min.css\n            $else\n                s( /public/lib/animatecss/animate.css\n    $if opt.useFontAwesome\n        $\n            var fontAwesomeKey = 'eab461efef';\n        script\n            src https://kit.fontawesome.com/${fontAwesomeKey}.js\n            crossorigin anonymous\n    $if opt.useFontRoboto\n        s( https://fonts.googleapis.com/css?family=Roboto:300,400,500\n    $if opt.useFontMaterialIcons\n        s( https://fonts.googleapis.com/icon?family=Material+Icons\n    $if opt.useGoogleFonts\n        $foreach item in opt.googleFonts\n            css https://fonts.googleapis.com/css?family=${item}\n    $if opt.useHighlight\n        $if opt.isWizziStudio\n            s( /public/lib/highlight/styles/github.css\n            s( /public/lib/highlightjs-master/dracula.css\n        $else\n            s( https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/styles/default.min.css\n    $if opt.useJarallax\n        s( /public/lib/jarallax/jarallax.css\n    $if opt.useJsonFormatter\n        $if opt.isWizziStudio\n            s( https://cdnjs.cloudflare.com/ajax/libs/json-formatter/0.7.0/json-formatter.min.css\n        $else\n            s( https://cdnjs.cloudflare.com/ajax/libs/json-formatter/0.7.0/json-formatter.min.css\n    $if opt.useMaterialUI\n        s( https://fonts.googleapis.com/icon?family=Material+Icons\n    $if opt.usePopper\n        s( /public/lib/popper/main.css\n    $if opt.usePrism\n        $if opt.isWizziStudio\n            css /public/lib/prism/prism.css\n        $else\n            css https://cdnjs.cloudflare.com/ajax/libs/prism/1.6.0/themes/prism.min.css\n    $if opt.useSocial\n        s( /public/lib/social/social-icons.css\n    $if opt.useSweetalert\n        s( https://cdn.jsdelivr.net/npm/sweetalert2@7.31.1/dist/sweetalert2.min.css\n    $if opt.mainCss && opt.mainCss.length > 0\n        s( ${opt.mainCss}\n"
      },
      "t/layouts/site.html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &opt\n    $\n        var ca = 'm-s p-s color-header font-l font-w-xxl';\n        var ca_inverse = 'm-s p-s color-header-inverse bg-color-header-inverse font-l font-w-xxl';\n        var ca2 = 'color-header font-x font-w-s';\n    head\n        $if opt.title\n            @title ${opt.title}\n        meta\n            charset utf-8\n        meta\n            name viewport\n            content width=device-width, initial-scale=1\n        link\n            rel preconnect\n            href https://fonts.googleapis.com\n        link\n            rel preconnect\n            href https://fonts.gstatic.com\n            crossorigin\n        link\n            @ rel \"stylesheet\"\n            @ href \"https://cdn.jsdelivr.net/npm/normalize.css@8.0.1/normalize.min.css\"\n        css /ittf/css/main.css.ittf\n        script\n            module\n                set window.__filename = 'browser'\n                $if opt.isWizziStudio && !opt.useFirebase\n                    var WizziBrowser\n                        {\n                            @ log\n                                function\n                                    var line\n                                        _ Array.prototype.slice.call(arguments).map\n                                            function\n                                                param argument\n                                                return\n                                                    iif typeof argument === 'string'\n                                                        then argument\n                                                        else JSON.stringify(argument)\n                                            ._ join\n                                                @ '\\n '\n                                    if arguments.length > 1 && arguments[arguments.length-1] === '-'\n                                        set line += new Array(50).join('-')\n                                    set document.querySelector('#wizzi-browser-log').textContent += line + '\\n'\n                            @ clearLog\n                                function\n                                    set document.querySelector('#wizzi-browser-log').textContent = ''\n                            @ setStatus\n                                function\n                                    param status\n                                    set document.querySelector('#wizzi-browser-status').textContent = status\n                            @ setContent\n                                function\n                                    param newContent\n                                    var content = document.querySelector('#wizzi-browser-content')\n                                    while content.hasChildNodes()\n                                        _ content.removeChild(content.lastChild)\n                                    _ content.appendChild(newContent)\n        $hook head-styles-0\n        $if opt.isWizziStudio && !opt.useFirebase\n            @style\n                css\n                    # wizzi-browser-status\n                        margin .5em 0\n                        font-style italic\n                    # wizzi-browser-log\n                        margin .5em 0\n                        white-space pre-wrap\n                    # wizzi-browser-content\n                        margin .5em 0\n                    # status:empty, #log:empty, #content:empty\n                        display none\n        ./site-styles( &opt )\n        $if opt.stickyNav\n            style\n                # ${opt.stickyNav}.sticky\n                    position fixed\n                    top 0\n                . ${opt.stickyNav}OffsetMargin\n                    padding-top ${opt.stickyNavOffset}px\n                $if opt.stickyNavLogo\n                    # ${opt.stickyNavLogo}.visible\n                        display block\n                    # ${opt.stickyNavLogo}.hidden\n                        display none\n        $hook head-styles\n        $hook head-styles-2\n        $hook head-styles-3\n        $hook head-scripts\n    body\n        . flex-row space-between bg-color-header color-header align-items-center\n            id __main_navbar\n            . flex-row\n                a( , /, ${ca2}\n                    div\n                        style width: 80px; margin-top: 5px; margin-left: 20px;\n                        images/logo(#efefef, #434343)\n            . flex-row\n                $if locals.user\n                    $if opt.section != 'Starter'\n                        a( Starter, /ittf/site/starter.html.ittf, ${ca}\n                    $else\n                        . ${ca_inverse}\n                            + Starter\n                    $if opt.section != 'Lab'\n                        a( Lab, /ittf/site/lab.html.ittf, ${ca}\n                    $else\n                        . ${ca_inverse}\n                            + Lab\n                    $if opt.section != 'Productions'\n                        a( Productions, /ittf/site/productions.html.ittf, ${ca}\n                    $else\n                        . ${ca_inverse}\n                            + Productions\n                    $if opt.section != 'Project'\n                        a( Project, /ittf/site/project.html.ittf, ${ca}\n                    $else\n                        . ${ca_inverse}\n                            + Project\n            . flex-row\n                $if opt.section != 'Docs'\n                    a( Docs, /ittf/site/docs/concepts/overview.html.ittf, ${ca}\n                $else\n                    . ${ca_inverse}\n                        + Docs\n                a( Github, https://github.com/stfnbssl/wizzi, ${ca}\n            . flex-row m-r-x\n                $if locals.user\n                    a( Profile, /account/profile, ${ca}\n                    a( Log Out, /auth/logout, ${ca}\n                $else\n                    a( Log In, /auth/login, ${ca}\n        $hook\n        $hook body-scripts-0\n        $if opt.isWizziStudio && !opt.useFirebase\n            div\n                # wizzi-browser-status\n                # wizzi-browser-log\n                # wizzi-browser-content\n        ./site-scripts( &opt )\n        $if opt.stickyNav\n            script\n                let header = document.getElementById(\"__main_navbar\")\n                let stickyBar = document.getElementById(\"${opt.stickyNav}\")\n                $if opt.stickyNavLogo\n                    let stickyLogo = document.getElementById(\"${opt.stickyNavLogo}\")\n                let stickyPos = ${opt.stickyNavOffset}\n                _ window.addEventListener\n                    @ \"scroll\"\n                    =>\n                        param e\n                        let scrollPos = window.scrollY\n                        log 'pre sticki', stickyPos, scrollPos, scrollPos > stickyPos\n                        if scrollPos > stickyPos\n                            _ stickyBar.classList.add('sticky')\n                            _ header.classList.add('${opt.stickyNav}OffsetMargin')\n                            $if opt.stickyNavLogo\n                                _ stickyLogo.classList.add('visible')\n                                _ stickyLogo.classList.remove('hidden')\n                            log 'sticki', scrollPos\n                        else\n                            _ stickyBar.classList.remove('sticky')\n                            _ header.classList.remove('${opt.stickyNav}OffsetMargin')\n                            $if opt.stickyNavLogo\n                                _ stickyLogo.classList.remove('visible')\n                                _ stickyLogo.classList.add('hidden')\n        $hook body-scripts\n        $hook body-scripts-2\n        $hook body-scripts-3\n        $if opt.useHighlight\n            script\n                _ document.addEventListener\n                    @ 'DOMContentLoaded'\n                    =>\n                        param event\n                        _ document.querySelectorAll\n                            @ 'pre .hljs'\n                            ._ forEach\n                                =>\n                                    param block\n                                    _ hljs.highlightBlock(block)\n"
      },
      "t/models/docs/wzctx.ittf": {
        "type": "CODE",
        "contents": "$group\n    $global\n        var wzCtx = {\n            name: \"stfnbssl.github.io/wizzi\",\n            version: \"0.7.1\",\n            description: \"Wizzi github page\",\n            author: \"Stefano Bassoli\",\n            license: \"MIT\",\n            Params: {\n                title: \"Wizzi\",\n                baseUrl: \"https://stfnbssl.github.io/wizzi\"\n            },\n            Section: {\n                items: [\n                    {\n                        title: \"Concepts\",\n                        url: \"/ittf/site/docs/concepts/overview.html.ittf\"\n                    },\n                    {\n                        title: \"How to\",\n                        url: \"/ittf/site/docs/howtos/getstarted.html.ittf\"\n                    },\n                    {\n                        title: \"Sample code\",\n                        url: \"/ittf/site/docs/samplecode/overview.html.ittf\"\n                    },\n                    {\n                        title: \"Geeky\",\n                        url: \"/ittf/site/docs/geeky/overview.html.ittf\"\n                    },\n                    {\n                        title: \"Cheatsheets\",\n                        url: \"/docs/cheatsheet/html\"\n                    },\n                    {\n                        title: \"Play\",\n                        url: \"/ittf/site/docs/play/index.html.ittf\"\n                    }\n                ]\n            },\n            Docs: {\n                items: [\n                    {\n                        title: \"Overview\",\n                        url: \"./overview.html.ittf\"\n                    },\n                    {\n                        title: \"Ittf Documents\",\n                        url: \"./ittfdocuments.html.ittf\"\n                    },\n                    {\n                        title: \"Template Engine\",\n                        url: \"./templateengine.html.ittf\"\n                    },\n                    {\n                        title: \"JsWizzi\",\n                        url: \"./jswizzi.html.ittf\"\n                    },\n                    {\n                        title: \"mTrees\",\n                        url: \"./mtrees.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Schemas\",\n                        url: \"./wizzischemas.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Model DOMs\",\n                        url: \"./wizzimodeldoms.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Model Instances\",\n                        url: \"./wizzimodelinstances.html.ittf\"\n                    },\n                    {\n                        title: \"Model Transformers\",\n                        url: \"./modeltransformers.html.ittf\"\n                    },\n                    {\n                        title: \"Artifact Generators\",\n                        url: \"./artifactgenerators.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Jobs\",\n                        url: \"./wizzijobs.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Plugins\",\n                        url: \"./wizziplugins.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi API\",\n                        url: \"./wizziapi.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi CLI\",\n                        url: \"./wizzicli.html.ittf\"\n                    },\n                    {\n                        title: \"Virtual Store System\",\n                        url: \"./virtualstoresystem.html.ittf\"\n                    },\n                    {\n                        title: \"Glossary\",\n                        url: \"./glossary.html.ittf\"\n                    }\n                ]\n            },\n            HowTos: {\n                items: [\n                    {\n                        title: \"Get started\",\n                        url: \"./getstarted.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi API\",\n                        url: \"./wizziapi.html.ittf\"\n                    }\n                ]\n            },\n            SampleCode: {\n                items: [\n                    {\n                        title: \"Overview\",\n                        url: \"./overview.html.ittf\"\n                    },\n                    {\n                        title: \"Template Engine\",\n                        url: \"./templateengine.html.ittf\"\n                    },\n                    {\n                        title: \"JsWizzi\",\n                        url: \"./jswizzi.html.ittf\"\n                    },\n                    {\n                        title: \"mTrees\",\n                        url: \"./mtrees.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Schemas\",\n                        url: \"./wizzischemas.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Model DOMs\",\n                        url: \"./wizzimodeldoms.html.ittf\"\n                    },\n                    {\n                        title: \"Model Transformers\",\n                        url: \"./modeltransformers.html.ittf\"\n                    },\n                    {\n                        title: \"Artifact Generators\",\n                        url: \"./artifactgenerators.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Jobs\",\n                        url: \"./wizzijobs.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Plugins\",\n                        url: \"./wizziplugins.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi API\",\n                        url: \"./wizziapi.html.ittf\"\n                    },\n                    {\n                        title: \"Virtual Store System\",\n                        url: \"./virtualstoresystem.html.ittf\"\n                    },\n                    {\n                        title: \"Glossary\",\n                        url: \"./glossary.html.ittf\"\n                    }\n                ]\n            },\n            Geeky: {\n                items: [\n                    {\n                        title: \"Overview\",\n                        url: \"./overview.html.ittf\"\n                    },\n                    {\n                        title: \"Template Engine\",\n                        url: \"./templateengine.html.ittf\"\n                    },\n                    {\n                        title: \"JsWizzi\",\n                        url: \"./jswizzi.html.ittf\"\n                    },\n                    {\n                        title: \"mTrees\",\n                        url: \"./mtrees.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Schemas\",\n                        url: \"./wizzischemas.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Model DOMs\",\n                        url: \"./wizzimodeldoms.html.ittf\"\n                    },\n                    {\n                        title: \"Model Transformers\",\n                        url: \"./modeltransformers.html.ittf\"\n                    },\n                    {\n                        title: \"Artifact Generators\",\n                        url: \"./artifactgenerators.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Jobs\",\n                        url: \"./wizzijobs.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi Plugins\",\n                        url: \"./wizziplugins.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi API\",\n                        url: \"./wizziapi.html.ittf\"\n                    },\n                    {\n                        title: \"Wizzi CLI\",\n                        url: \"./wizzicli.html.ittf\"\n                    },\n                    {\n                        title: \"Virtual Store System\",\n                        url: \"./virtualstoresystem.html.ittf\"\n                    },\n                    {\n                        title: \"Glossary\",\n                        url: \"./glossary.html.ittf\"\n                    }\n                ]\n            },\n            Starter: {\n                \"items\": [\n                    {\n                        title: \"wizzi-starter-wizzi-plugin\",\n                        url: \"https://github.com/wizzifactory/wizzi-examples/tree/master/packages/wizzi-starter-wizzi-plugin\"\n                    },\n                    {\n                        title: \"wizzi-starter-webpack-react\",\n                        url: \"https://github.com/wizzifactory/wizzi-examples/tree/master/packages/wizzi-starter-webpack-react\"\n                    },\n                    {\n                        title: \"wizzi-starter-mern\",\n                        url: \"https://github.com/wizzifactory/wizzi-examples/tree/master/packages/wizzi-starter-mern\"\n                    },\n                    {\n                        title: \"wizzi-starter-nextjs\",\n                        url: \"https://github.com/wizzifactory/wizzi-examples/tree/master/packages/wizzi-starter-nextjs\"\n                    },\n                    {\n                        title: \"wizzi-starter-gatsby\",\n                        url: \"https://github.com/wizzifactory/wizzi-examples/tree/master/packages/wizzi-starter-gatsby\"\n                    }\n                ]\n            },\n            \"Plugin\": {\n                items: [\n                    {\n                        title: \"wizzi-js\",\n                        url: \"https://github.com/wizzifactory/wizzi/tree/master/packages/wizzi-js/dist\"\n                    },\n                    {\n                        title: \"wizzi-web\",\n                        url: \"https://github.com/wizzifactory/wizzi/tree/master/packages/wizzi-web/dist\"\n                    },\n                    {\n                        title: \"wizzi-lab\",\n                        url: \"https://github.com/wizzifactory/wizzi/tree/master/packages/wizzi-lab/dist\"\n                    }\n                ]\n            },\n            Colors: {\n                \"bg_0\": \"#333\",\n                \"bg_f_0\": \"#000\",\n                \"c_0\": \"#fff\",\n                \"bg_dark\": \"#333\",\n                \"bg_dark_medium\": \"#444\",\n                \"c_dark\": \"#ddd\",\n                \"c_dark_medium\": \"#bbb\",\n                \"h3_c_dark\": \"#fc0\"\n            },\n            Fonts: {\n                \"useMaterialIcons\": true,\n                \"materialIcons\": {\n                    \"baseUrl\": \"https://stfnbssl.github.io/wizzi/fonts\",\n                    \"fontWeight\": \"400\",\n                    \"size\": \"24px\"\n                }\n            }\n        }\n        var mpage = {\n            Colors: {\n                background: \"#ffffff\",\n                scheme1Fade90: \"whiteFade-90,rgba(255,255,255,0.9)\",\n                themeBack: \"#ffffff\",\n                primary: \"#BDF3EE\",\n                primaryDark: \"#122944\",\n                primary30: \"#BDF3EE\",\n                gray70: \"grey-70,#222B31\",\n                grad1: \"#81B6CF\",\n                grad2: \"#222B31\"\n            }\n        }\n"
      },
      "t/v08/env/index.text.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    PORT=${wzCtx.App.port}\n    $if wzCtx.Build.useSession\n        SESSION_SECRET=${wzCtx.Build.session.secret}\n    NO_CACHE=${wzCtx.Build.noCache}\n    $if wzCtx.Build.useCors\n        CORS_CLIENT_ORIGIN=${wzCtx.Build.cors.clientOrigin}\n    $if wzCtx.Build.useWizzi\n        IS_WIZZI_DEV=${wzCtx.Build.wizzi.isDev}\n        WIZZI_BASE_PATH=${wzCtx.Build.wizzi.basePath}\n    $if wzCtx.Build.useAuthentication\n        $if wzCtx.Build.authentication.useGithub\n            $if wzCtx.Build.authentication.isLocal\n                GITHUB_CLIENT_ID=${wzCtx.Build.authentication.github.clientIdLocal}\n                GITHUB_CLIENT_SECRET=${wzCtx.Build.authentication.github.clientSecretLocal}\n                GITHUB_CALLBACK_URL=${wzCtx.Build.authentication.github.callbackURLLocal}\n            $else\n                GITHUB_CLIENT_ID=${wzCtx.Build.authentication.github.clientId}\n                GITHUB_CLIENT_SECRET=${wzCtx.Build.authentication.github.clientSecret}\n                GITHUB_CALLBACK_URL=${wzCtx.Build.authentication.github.callbackURL}\n        $if wzCtx.Build.authentication.useGoogle\n            $if wzCtx.Build.authentication.isLocal\n                GOOGLE_CLIENT_ID=${wzCtx.Build.authentication.google.clientIdLocal}\n                GOOGLE_CLIENT_SECRET=${wzCtx.Build.authentication.google.clientSecretLocal}\n                GOOGLE_CALLBACK_URL=${wzCtx.Build.authentication.google.callbackURLLocal}\n            $else\n                GOOGLE_CLIENT_ID=${wzCtx.Build.authentication.google.clientId}\n                GOOGLE_CLIENT_SECRET=${wzCtx.Build.authentication.google.clientSecret}\n                GOOGLE_CALLBACK_URL=${wzCtx.Build.authentication.google.callbackURL}\n    $if wzCtx.Build.useMongoDb\n        MONGO_HOST=${wzCtx.Build.mongoDb.host}\n        MONGO_USER=${wzCtx.Build.mongoDb.user}\n        MONGO_PASSWORD=${wzCtx.Build.mongoDb.password}\n        MONGO_PATH=${wzCtx.Build.mongoDb.dbPath}/${wzCtx.Build.mongoDb.dbName}\n    $if wzCtx.Build.useRedis\n        REDIS_CA=${wzCtx.Build.redis.ca}\n        REDIS_URL=${wzCtx.Build.redis.url}\n        REDIS_PASSWORD=${wzCtx.Build.redis.password}\n"
      },
      "t/v08/eslint/rc/extends.js.ittf": {
        "type": "CODE",
        "contents": "$group\n    $if wzCtx.Build.useExpo\n        @ 'universe/native'\n        @ 'universe/node'\n        @ 'universe/web'\n        @ 'universe/shared/typescript-analysis'\n    $else\n        @ 'standard'\n        @ 'eslint:recommended'\n        @ 'plugin:@typescript-eslint/eslint-recommended'\n        @ 'plugin:@typescript-eslint/recommended'\n"
      },
      "t/v08/eslint/rc/overrides.js.ittf": {
        "type": "CODE",
        "contents": "$group\n    {\n        [ files\n            $if wzCtx.Build.useTypescript\n                @ '*.ts'\n                @ '*.tsx'\n                @ '*.d.ts'\n        { parserOptions\n            $if wzCtx.Build.useTypescript\n                @ project './tsconfig.json'\n        { rules\n            [ '@typescript-eslint/naming-convention'\n                @ 'warn'\n                {\n                    @ selector 'typeLike'\n                    [ format\n                        @ 'PascalCase'\n                {\n                    @ selector 'enumMember'\n                    [ format\n                        @ 'UPPER_CASE'\n            @ 'no-unused-expressions' 'off'\n            $if wzCtx.Build.useTypescript\n                @ '@typescript-eslint/no-unused-expressions' 'warn'\n"
      },
      "t/v08/eslint/rc/parser.js.ittf": {
        "type": "CODE",
        "contents": "$group\n    @ parser '@typescript-eslint/parser'\n        ## This allows ESLint to understand TypeScript syntax.\n            # This is required, or else ESLint will throw errors\n            # as it tries to parse TypeScript code as if it were regular JavaScript.\n    { parserOptions\n        @ ecmaVersion 2018\n        @ sourceType \"module\"\n    { env\n        $if wzCtx.Build.useWebpack || wzCtx.Build.useReact\n            @ browser true\n        @ es6 true\n"
      },
      "t/v08/eslint/rc/plugins.js.ittf": {
        "type": "CODE",
        "contents": "$group\n    $if wzCtx.Build.usePrettier\n        @ 'prettier'\n    @ '@typescript-eslint'\n"
      },
      "t/v08/eslint/rc/settings.js.ittf": {
        "type": "CODE",
        "contents": "$group\n    $if wzCtx.Build.useReact\n        { react\n            @ version '16.8'\n"
      },
      "t/v08/eslint/rc/rules.js.ittf": {
        "type": "CODE",
        "contents": "$group\n    [ 'spaced-comment'\n        @ 'warn'\n        @ 'always'\n        {\n            { block\n                @ balanced true\n"
      },
      "t/v08/express/server.cert.text.ittf": {
        "type": "CODE",
        "contents": "$group\n    -----BEGIN CERTIFICATE-----\n    MIIDXTCCAkWgAwIBAgIJAMt/c5DHw9UFMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\n    BAYTAklUMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX\n    aWRnaXRzIFB0eSBMdGQwHhcNMjEwMzA2MTMwNjUwWhcNMjEwNDA1MTMwNjUwWjBF\n    MQswCQYDVQQGEwJJVDETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50\n    ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\n    CgKCAQEAuVkDqGIDc9RNa1ct4ad7v2PrkaYuETnTw4rM3O/s1sIxYZ993wnKwvpa\n    hAIk92LDn9EHX4lHI762TacMpRzv09OyrIqX6Sb5iIzMARvfOuMUPJzSwt376HEu\n    gvyt0KVos+LbORTF/AWrMdman/YBgw08ft5UAeNDo6clSEBQh0fSqcMfEjhG0p8i\n    mhnxByu+/N5pYIAlf+zrMzYIQhKVe8NTYCfhuQxBkCfYAEDM5Dp2wAVxD2ZmSAwF\n    gEju9VUjEtAeLU6Wja3HwooIjXZl5kxv244tQUYoIKQIrLKK7qkQg2cjyONmrp/g\n    /iBoGXvLdoxgNQU/WSM7yrvUJk2pKwIDAQABo1AwTjAdBgNVHQ4EFgQUTCCyc7ha\n    S+cbeFQuuwn/VF8aiIMwHwYDVR0jBBgwFoAUTCCyc7haS+cbeFQuuwn/VF8aiIMw\n    DAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAI8hslqPM45TK5JbGrkTS\n    xsxW7g8kYF8TF/O0fumUqHJqIXnfh+amz2QjOwLQw95DfhYu+DQSM66sb3jdwyJx\n    i67oolUcHDH67sPa1XSy3W5eOD/HXja0LPIhxlwOgr1fVU4tPwmvCXV29w/VqJtl\n    TOOraSevvT8NLfmlgXQC2eAitr8HXfTAQSWilagFxLbG3t5GQIqTMAhIhLgN95hD\n    Ixt93NwnGozSzUbrJmNEwyqWrCLTj+2MUGSbxFt/gqLVR79JoNH6pTPFGo/ivoQX\n    8+NMA5nARpHR4C0SXH8pB7New8aa4erEsf4tAYE1NcsNP/2eAkYkfsu3JYICIpa3\n    jg==\n    -----END CERTIFICATE-----\n"
      },
      "t/v08/express/server.key.text.ittf": {
        "type": "CODE",
        "contents": "$group\n    -----BEGIN PRIVATE KEY-----\n    MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC5WQOoYgNz1E1r\n    Vy3hp3u/Y+uRpi4ROdPDiszc7+zWwjFhn33fCcrC+lqEAiT3YsOf0QdfiUcjvrZN\n    pwylHO/T07KsipfpJvmIjMwBG9864xQ8nNLC3fvocS6C/K3QpWiz4ts5FMX8Basx\n    2Zqf9gGDDTx+3lQB40OjpyVIQFCHR9Kpwx8SOEbSnyKaGfEHK7783mlggCV/7Osz\n    NghCEpV7w1NgJ+G5DEGQJ9gAQMzkOnbABXEPZmZIDAWASO71VSMS0B4tTpaNrcfC\n    igiNdmXmTG/bji1BRiggpAissoruqRCDZyPI42aun+D+IGgZe8t2jGA1BT9ZIzvK\n    u9QmTakrAgMBAAECggEAF4e1bysCRTIuofHvYTZh/2ov/c2bC5TLzYdRerr61kjQ\n    /BPDZw1XMGmYFCoxhzaCn0dqKDbFUURk4HbUpCGIUNwPUthFcNQB2dQGEh33uQIb\n    D5bZKuQDlv7HaNmrN1HIeQ3TxutcNyKBGVMGzkfs6TZE99ZB0/uGGsCdew6vKn08\n    TgVWn+vcEkjrFN+lIy0jgQFHAUz+dnp/BtciMATrdk18An1AsztmJzqAUzLHUm1w\n    uo9avDZYd0q9bDHDQyV0y2zSGrwoBtcdjDF6eifPq1bjJ4kHwVqUMm2uoeLZeie+\n    kPhaNLeIUnfZ+qwpPcoyk9G5i4OQ7sXg3L8fD3voAQKBgQDqCR0Rgrv/sQSsK5CD\n    ldoIPW8TKTVTOdXr6CZZjNCjmAG56GHjz7CRokb3PL2ym4NIdWO39hFZTzDsCwYR\n    AcOPrLVJwo3ydfRszD+eW14KoyxQZ7ZqlNEgZRTxQJaUkOqN5yOeyxrN63dW+CDF\n    3d0pKbHOW4NtQmpxOmCcvI+8MwKBgQDKviL0yIRHMDgVBdZpatlinsuk5+hd+3nI\n    HRZMBsMRi1ue4lG1hwRCjlnA1aHLWsjOiaUBmsahOrn4QpQdTt6fre6ZG4tjBA7h\n    wKi7j5AtYXJidHPYBAQe9pP7X8GFOkKsMDxIhxV84qkkCb+DZ1RIwuAQ8zItF/07\n    tsG+1zBnKQKBgQCMXCTj4J1xzy+3NnV4hYH7GSUpv7gsju4+ir+dS3fB9aNrZPR4\n    lZIW9dVL6FD48o29AjJpHRnwjy8PEdl0j7NC0tjzQMyzEo0iRykMh02SYaRtIJZl\n    u5TksdrqicsFlRgnPO2/CZ6sy0CKl0vIf7RpQIlT8syS1ZdTCyjwN6KYwwKBgDVc\n    X9TvZala7pfR5oHuZnLHeq/XfdgmlQHvbevqp7LZa+7ggEL3204tK0BOufvM1CdQ\n    IQbQFtFepI3L8DHajUuXusG/dytDaStPytk6yua2zCVPoyHKxM7ldUNnC4cmM2Ag\n    fe1U6HnrKjta+XX7XzqbV9/+MkmeE7+AtXOmLY4pAoGBAMvbqdgIZ0sJk7V7XtQ/\n    PrWKynY88jUm2rij8SUW0iuLuuNy23hSPuWcvjmmaoZvRriqG8QJaAhTtgBik0D7\n    D1ma/CBFwuqPo/FPVKyOV0XTBldMcMaK45KDBz7vRc/jWKlKCI/gCSNbX4hWe5d3\n    HB5E+Wv5CU3CWLwzaUAqmrJq\n    -----END PRIVATE KEY-----\n"
      },
      "t/v08/express/common/index.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        as commonTypes\n        from './types'\n    +\n    export\n        @ commonTypes\n"
      },
      "t/v08/express/common/types.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    export\n        :type ValidateResult\n            :{\n                :p isValid\n                    :boolean\n                :p message\n                    :string\n                    :optional\n    +\n    export\n        :type CRUDResult\n            :{\n                :p oper\n                    :string\n                :p ok\n                    :boolean\n                :p item\n                    :any\n                    :optional\n                :p message\n                    :string\n                    :optional\n    +\n    $if wzCtx.Build.usePacki || wzCtx.Build.useWizziJsonFactory\n        :type RequiredPackiFileAttributes\n            :{\n                :p contents\n                    :string\n                :p type\n                    :union\n                        :literal 'ASSET'\n                        :literal 'CODE'\n                :p generated\n                    :optional\n                    :boolean\n                :p bothRealAndGenerated\n                    :optional\n                    :boolean\n        +\n        export\n            :type PackiFiles\n                :{\n                    :index\n                        :ref RequiredPackiFileAttributes\n                        param x\n                            :string\n        +\n    $if wzCtx.Build.useGithub\n        export\n            :type GitRepositoryMeta\n                :{\n                    :p owner\n                        :string\n                    :p name\n                        :string\n                    :p description\n                        :string\n                    :p branches\n                        :[\n                            :string\n        +\n        export\n            :type ClonedGitRepository\n                :{\n                    :p owner\n                        :string\n                    :p name\n                        :string\n                    :p description\n                        :string\n                    :p branch\n                        :string\n                    :p commitHistory\n                        :any\n                    :p files\n                        :ref PackiFiles\n        +\n"
      },
      "t/v08/express/features/filesystem/types.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        @ FileDef\n        from 'wizzi-utils'\n    import\n        @ packiTypes\n        from '../packi'\n    +\n    export\n        :type FsDbResult\n            :{\n                :p writtenCount\n                    :optional\n                    :number\n                :p deletedCount\n                    :optional\n                    :number\n    +\n    export\n        :type FsDb\n            :{\n                :p getPackiTemplatesList\n                    :=>\n                        :ref Promise\n                            :param\n                                :[\n                                    :string\n                :p getPackiTemplate\n                    :=>\n                        :ref Promise\n                            :param\n                                :[\n                                    :ref FileDef\n                        param name\n                            :string\n                :p getStarterTemplate\n                    :=>\n                        :ref Promise\n                            :param\n                                :[\n                                    :ref FileDef\n                :p savePackiTemplate\n                    :=>\n                        :ref Promise\n                            :param\n                                :ref FsDbResult\n                        param id\n                            :string\n                        param files\n                            :ref packiTypes.PackiFiles\n"
      },
      "t/v08/express/features/filesystem/index.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        as fsTypes\n        from './types'\n    +\n    export\n        @ fsTypes\n"
      },
      "t/v08/express/features/github/apicalls.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import fetch from 'node-fetch'\n    import path from 'path'\n    import git from 'isomorphic-git'\n    import http from 'isomorphic-git/http/node'\n    import\n        @ createFsFromVolume\n        @ Volume\n        from 'memfs'\n    import\n        @ vfile\n        @ FsImpl\n        @ FileDef\n        from 'wizzi-utils'\n    import\n        @ FileDiff\n        @ FileDiffItem\n        from '../repo/types'\n    import\n        @ PackiFiles\n        from '../packi/types'\n    import\n        @ GithubRepoOptions\n        @ CreateGithubRepoOptions\n        @ CreateGithubBranchOptions\n        @ ClonedGitRepository\n        @ GithubApiRepository\n        from './types'\n    +\n    const volume = new Volume()\n    +\n    const fs = createFsFromVolume(volume)\n    +\n    set (fs as any).kind = 'filesystem'\n    const wizzifs\n        _ vfile\n            + fs\n                :as\n                    :ref FsImpl\n    +\n    :type cb\n        :< T\n        :=>\n            :void\n            param err\n                :any\n            param result\n                :ref T\n        # const dir = fs.mkdtempSync(path.join(os.tmpdir(), 'test-'));\n    +\n    export\n        async-function getRepositories\n            param accessToken\n                :string\n            :return\n                :ref Promise\n                    :param\n                        :[\n                            :ref GithubApiRepository\n            return\n                _ fetch\n                    `lit\n                        + https://api.github.com/user/repos\n                    _ getOptions(accessToken)\n                    ._ then\n                        =>\n                            param response\n                            _ response.json()\n                    ._ then\n                        =>\n                            param responseData\n                                :any\n                            return responseData\n        # const dir = fs.mkdtempSync(path.join(os.tmpdir(), 'test-'));\n    +\n    export\n        async-function getRepository\n            param owner\n                :string\n            param repo\n                :string\n            param accessToken\n                :string\n            :return\n                :ref Promise\n                    :param any\n            return\n                _ fetch\n                    `lit\n                        + https://api.github.com/repos/\n                        @ owner\n                        + /\n                        @ repo\n                        +\n                    _ getOptions(accessToken)\n                    ._ then\n                        =>\n                            param response\n                            _ response.json()\n                    ._ then\n                        async=>\n                            param responseData\n                                :any\n                            set responseData._revisions =\n                                await\n                                    _ getRevisions(owner, repo, accessToken)\n                            set responseData._commits =\n                                await\n                                    _ getCommits(owner, repo, accessToken)\n                            set responseData._contents =\n                                await\n                                    _ getContents(owner, repo, accessToken)\n                            return responseData\n    +\n    export\n        async-function getPackiTemplateRepositories\n            :return\n                :ref Promise\n                    :param any\n            return\n                _ fetch\n                    `lit\n                        + https://api.github.com/users/stfnbssl/repos\n                    _ getOptions()\n                    ._ then\n                        =>\n                            param response\n                            _ response.json()\n                    ._ then\n                        =>\n                            param responseData\n                                :[\n                                    :ref GithubApiRepository\n                            return\n                                _ responseData.filter\n                                    =>\n                                        param value\n                                        _ value.name.startsWith('packi-template-')\n    +\n    export\n        async-function createRepository\n            param accessToken\n                :string\n            param options\n                :ref CreateGithubRepoOptions\n            :return\n                :ref Promise\n                    :param any\n            return\n                _ fetch\n                    `lit\n                        + https://api.github.com/user/repos\n                    _ postOptions(accessToken, options)\n                    ._ then\n                        =>\n                            param response\n                            _ response.json()\n                    ._ then\n                        =>\n                            param responseData\n                                :any\n                            return responseData\n    +\n    export\n        async-function getRevisions\n            param owner\n                :string\n            param repo\n                :string\n            param accessToken\n                :string\n            :return\n                :ref Promise\n                    :param any\n            return\n                _ fetch\n                    `lit\n                        + https://api.github.com/repos/\n                        @ owner\n                        + /\n                        @ repo\n                        + /git/refs/heads\n                    _ getOptions(accessToken)\n                    ._ then\n                        =>\n                            param response\n                            _ response.json()\n                    ._ then\n                        =>\n                            param responseData\n                                :any\n                            return responseData\n    +\n    export\n        async-function getBranches\n            param owner\n                :string\n            param repo\n                :string\n            param accessToken\n                :string\n            :return\n                :ref Promise\n                    :param any\n            return\n                _ fetch\n                    `lit\n                        + https://api.github.com/repos/\n                        @ owner\n                        + /\n                        @ repo\n                        + /branches\n                    _ getOptions(accessToken)\n                    ._ then\n                        =>\n                            param response\n                            _ response.json()\n                    ._ then\n                        =>\n                            param responseData\n                                :any\n                            return responseData\n    +\n    export\n        async-function createBranch\n            param accessToken\n                :string\n            param owner\n                :string\n            param repo\n                :string\n            param options\n                :ref CreateGithubBranchOptions\n            :return\n                :ref Promise\n                    :param any\n            return\n                _ fetch\n                    `lit\n                        + https://api.github.com/repos/\n                        @ owner\n                        + /\n                        @ repo\n                        + /git/refs\n                    _ postOptions\n                        @ accessToken\n                        {\n                            @ ref\n                                `lit\n                                    + refs/heads/\n                                    @ options.name\n                                    + >\n                            @ sha options.revisionFromHash\n                    ._ then\n                        =>\n                            param response\n                            _ response.json()\n                    ._ then\n                        =>\n                            param responseData\n                                :any\n                            return responseData\n    +\n    export\n        async-function cloneBranch\n            param repo\n                :ref GithubRepoOptions\n            param branch\n                :string\n                = 'master'\n            param kind\n                :string\n                = 'all'\n            :return\n                :ref Promise\n                    :param\n                        :ref ClonedGitRepository\n            _ volume.reset()\n            const dir = '/' + repo.name\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        _ fs.mkdir\n                            @ dir\n                            async=>\n                                param err\n                                if err\n                                    return reject(err)\n                                await\n                                    _ git.clone\n                                        {\n                                            @ fs\n                                            @ http\n                                            @ dir\n                                            @ url\n                                                `lit\n                                                    + https://github.com/\n                                                    @ repo.owner\n                                                    + /\n                                                    @ repo.name\n                                                    +\n                                            @ ref\n                                                `lit\n                                                    +\n                                                    @ branch\n                                                    +\n                                            @ singleBranch true\n                                            @ depth 10\n                                            @ onAuth\n                                                =>\n                                                    param url\n                                                        :string\n                                                    return\n                                                        {\n                                                            @ password repo.token\n                                                            # oauth2format 'github'\n                                let files\n                                    _ wizzifs.getFiles\n                                        @ dir\n                                        {\n                                            @ deep true\n                                            @ documentContent true\n                                const packies\n                                    :ref PackiFiles\n                                    =\n                                        {\n                                _ files.forEach\n                                    =>\n                                        param file\n                                        if file.relPath.startsWith('.git/') == false\n                                            if kind === 'all' || kind === 'ittf' && file.relPath.endsWith('.ittf') == true\n                                                set packies[file.relPath] =\n                                                    {\n                                                        @ type \"CODE\"\n                                                        @ contents\n                                                            @expr file.content\n                                                                :as\n                                                                    :string\n                                const log\n                                    await\n                                        _ git.log\n                                            {\n                                                @ fs\n                                                @ dir\n                                _ resolve\n                                    {\n                                        @ owner\n                                            @expr repo.owner\n                                                :as\n                                                    :string\n                                        @ name repo.name\n                                        @ description ''\n                                        @ branch\n                                        @ files packies\n                                        @ commitHistory log\n    +\n    export\n        async-function updateBranch\n            param packiFiles\n                :ref PackiFiles\n            param repo\n                :ref GithubRepoOptions\n            param branch\n                :string\n                = 'master'\n            _ volume.reset()\n            const dir = '/' + repo.name\n            _ fs.mkdir\n                @ dir\n                async=>\n                    param err\n                    await\n                        _ git.clone\n                            {\n                                @ fs\n                                @ http\n                                @ dir\n                                @ url\n                                    `lit\n                                        + https://github.com/\n                                        @ repo.owner\n                                        + /\n                                        @ repo.name\n                                        +\n                                @ ref\n                                    `lit\n                                        +\n                                        @ branch\n                                        +\n                                @ singleBranch true\n                                @ depth 10\n                    let files = fs.readdirSync(dir)\n                        #\n                            #\n                            # Object.keys(packiFiles).forEach(filePath=> {\n                            # if (packiFiles[filePath].type === \"CODE\") {\n                            # fs.writeFileSync(path.join(dir, filePath), packiFiles[filePath].contents);\n                            # }\n                            # })\n                            #\n                        # let msg = await git.log({fs, dir});\n                        # console.log(msg);\n                    _ filesDiff\n                        @ dir\n                        @ packiFiles\n                        async=>\n                            param err\n                            param result\n                            try\n                                _ Object.keys(result).forEach\n                                    =>\n                                        param entryName\n                                        if result[entryName].kind === '+' || result[entryName].kind === '<>'\n                                            _ wizzifs.write\n                                                _ path.join(dir, entryName)\n                                                @expr\n                                                    (\n                                                        @expr result[entryName].b\n                                                            :as\n                                                                :ref FileDiffItem\n                                                    . content\n                                                # fs.writeFileSync(path.join(dir, entryName), (result[entryName].b as FileDiffItem).content);\n                                        else\n                                            if\n                                                test\n                                                    op<\n                                                        [\n                                                            @ '.gitignore'\n                                                            @ 'LICENSE'\n                                                            @ 'README.md'\n                                                            ._ indexOf\n                                                                @ entryName\n                                                        + 0\n                                                _ fs.unlinkSync(path.join(dir, entryName))\n                                await\n                                    _ printStatus(dir)\n                                _ Object.keys(result).forEach\n                                    async=>\n                                        param entryName\n                                        if result[entryName].kind === '+' || result[entryName].kind === '<>'\n                                            await\n                                                _ git.add\n                                                    {\n                                                        @ fs\n                                                        @ dir\n                                                        @ filepath entryName\n                                        else\n                                            if\n                                                test\n                                                    op<\n                                                        [\n                                                            @ '.gitignore'\n                                                            @ 'LICENSE'\n                                                            @ 'README.md'\n                                                            ._ indexOf\n                                                                @ entryName\n                                                        + 0\n                                                await\n                                                    _ git.remove\n                                                        {\n                                                            @ fs\n                                                            @ dir\n                                                            @ filepath entryName\n                                await\n                                    _ printStatus(dir)\n                                let msg\n                                    await\n                                        _ git.commit\n                                            {\n                                                @ fs\n                                                @ dir\n                                                @ message 'Packi git export ' + new Date().toDateString()\n                                                { author\n                                                    @ name 'packi'\n                                                    @ email 'packi@gmail.com'\n                                log msg\n                                await\n                                    _ printStatus(dir)\n                                    # let msg = await git.listFiles({fs, dir});\n                                    # let msg = await git.listFiles({fs, dir});\n                                let pushResponse\n                                    await\n                                        _ git.push\n                                            {\n                                                @ fs\n                                                @ http\n                                                @ dir\n                                                @ remote 'origin'\n                                                @ ref\n                                                    `lit\n                                                        +\n                                                        @ branch\n                                                @ onAuth\n                                                    =>\n                                                        param url\n                                                            :string\n                                                        return\n                                                            {\n                                                                @ password repo.token\n                                                                # oauth2format 'github'\n                                                                # username: repo.owner,\n                                                                # password: repo.password,\n                                                                # username: 'stfnbssl',\n                                                                # password: 'gi++++01',\n                                log pushResponse\n                            catch ex\n                                error 'updateBranch.push. err', ex\n                        #\n                            #\n                            # Object.keys(packiFiles).forEach(filePath=> {\n                            # if (packiFiles[filePath].type === \"CODE\") {\n                            # fs.writeFileSync(path.join(dir, filePath), packiFiles[filePath].contents);\n                            # }\n                            # })\n                            #\n                        # let msg = await git.log({fs, dir});\n                        # console.log(msg);\n    +\n    export\n        async-function getCommits\n            param owner\n                :string\n            param repo\n                :string\n            param accessToken\n                :string\n            :return\n                :ref Promise\n                    :param any\n            return\n                _ fetch\n                    `lit\n                        + https://api.github.com/repos/\n                        @ owner\n                        + /\n                        @ repo\n                        + /commits\n                    _ getOptions(accessToken)\n                    ._ then\n                        =>\n                            param response\n                            _ response.json()\n                    ._ then\n                        =>\n                            param responseData\n                                :any\n                            return responseData\n    +\n    export\n        async-function getContents\n            param owner\n                :string\n            param repo\n                :string\n            param accessToken\n                :string\n            :return\n                :ref Promise\n                    :param any\n            return\n                _ fetch\n                    `lit\n                        + https://api.github.com/repos/\n                        @ owner\n                        + /\n                        @ repo\n                        + /contents\n                    _ getOptions(accessToken)\n                    ._ then\n                        =>\n                            param response\n                            _ response.json()\n                    ._ then\n                        =>\n                            param responseData\n                                :any\n                            return responseData\n    +\n    function filesDiff\n        param dir\n            :string\n        param packiFiles\n            :ref PackiFiles\n        param callback\n            :ref cb\n                :param\n                    :{\n                        :index\n                            :ref FileDiff\n                            param k\n                                :string\n        :return\n            :void\n        _ wizzifs.getFiles\n            @ dir\n            {\n                @ deep true\n                @ documentContent true\n            =>\n                param err\n                param result\n                const diff\n                    :{\n                        :index\n                            :ref FileDiff\n                            param k\n                                :string\n                    =\n                        {\n                _ result.forEach\n                    =>\n                        param entry\n                        if entry.relPath.startsWith('.git/') == false\n                            set diff[entry.relPath] =\n                                {\n                                    @ kind '-'\n                                    { a\n                                        @ path entry.relPath\n                                        @ content\n                                            @expr entry.content\n                                                :as\n                                                    :string\n                _ Object.keys(packiFiles).forEach\n                    =>\n                        param entryName\n                        if diff[entryName]\n                            if\n                                test\n                                    &&\n                                        + diff[entryName].a\n                                        ===\n                                            @expr\n                                                (\n                                                    @expr diff[entryName].a\n                                                        :as\n                                                            :ref FileDiffItem\n                                                . content\n                                            + packiFiles[entryName].contents\n                                delete diff[entryName]\n                            else\n                                set diff[entryName].kind = '<>'\n                                set diff[entryName].b =\n                                    {\n                                        @ path entryName\n                                        @ content packiFiles[entryName].contents\n                        else\n                            set diff[entryName] =\n                                {\n                                    @ kind '+'\n                                    { b\n                                        @ path entryName\n                                        @ content packiFiles[entryName].contents\n                _ callback(null, diff)\n    +\n    async-function printStatus\n        param dir\n            :string\n        :return\n            :ref Promise\n                :param void\n        return\n            new Promise\n                =>\n                    param resolve\n                    param reject\n                    _ wizzifs.getFiles\n                        @ dir\n                        {\n                            @ deep true\n                            @ documentContent false\n                        async=>\n                            param err\n                            param files\n                            if err\n                                return reject(err)\n                            for\n                                left\n                                    let file\n                                of files\n                                if file.relPath.startsWith('.git/') == false\n                                    let msg\n                                        await\n                                            _ git.status\n                                                {\n                                                    @ fs\n                                                    @ dir\n                                                    @ filepath file.relPath\n                            _ resolve()\n    +\n    function getOptions\n        param accessToken\n            :string\n            :optional\n        return\n            {\n                @ method 'GET'\n                @ headers headers(accessToken)\n    +\n    function postOptions\n        param accessToken\n            :string\n        param body\n            :any\n        return\n            {\n                @ method 'POST'\n                @ headers headers(accessToken)\n                @ body JSON.stringify(body)\n    +\n    function headers\n        param accessToken\n            :string\n            :optional\n        :return\n            :{\n                :index\n                    :string\n                    param k\n                        :string\n        const ret\n            :{\n                :index\n                    :string\n                    param k\n                        :string\n            =\n                {\n                    @ 'Accept' 'application/vnd.github.v3+json'\n                    @ 'Content-Type' 'application/json'\n        if accessToken\n            set ret['Authorization'] = 'token ' + (accessToken as string)\n        return ret\n"
      },
      "t/v08/express/features/github/index.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    +\n    import\n        as githubTypes\n        from './types'\n    import\n        as githubUtils\n        from './utils'\n    import\n        as githubApiCalls\n        from './apicalls'\n    +\n    export\n        @ githubTypes\n        @ githubApiCalls\n        @ githubUtils\n"
      },
      "t/v08/express/features/github/types.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        @ commonTypes\n        from '../../common'\n    +\n    export\n        :type GithubRepoOptions\n            :{\n                :p name\n                    :string\n                :p owner\n                    :optional\n                    :string\n                :p password\n                    :optional\n                    :string\n                :p token\n                    :optional\n                    :string\n    +\n    export\n        :type CreateGithubRepoOptions\n            :{\n                :p name\n                    :string\n                :p description\n                    :string\n                :p homepage\n                    :string\n                :p private\n                    :boolean\n                :p has_issues\n                    :optional\n                    :boolean\n                    # Either true to enable issues for this repository or false to disable them. Default: true.\n                :p has_projects\n                    :optional\n                    :boolean\n                    # Either true to enable issues for this repository or false to disable them. Default: true.\n                    # Either true to enable projects for this repository or false to disable them. Default: true. Note: If you're creating a repository in an organization that has disabled repository projects, the default is false, and if you pass true, the API returns an error.\n                :p has_wiki\n                    :optional\n                    :boolean\n                    # Either true to enable projects for this repository or false to disable them. Default: true. Note: If you're creating a repository in an organization that has disabled repository projects, the default is false, and if you pass true, the API returns an error.\n                    # Either true to enable the wiki for this repository or false to disable it. Default: true.\n                :p team_id\n                    :optional\n                    :number\n                    # Either true to enable the wiki for this repository or false to disable it. Default: true.\n                    # The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.\n                :p auto_init\n                    :optional\n                    :boolean\n                    # The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.\n                    # Pass true to create an initial commit with empty README. Default: false.\n                :p gitignore_template\n                    :string\n                    # Pass true to create an initial commit with empty README. Default: false.\n                    # Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, \"Haskell\".\n                :p license_template\n                    :string\n                    # Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, \"Haskell\".\n                    # Choose an open source license template that best suits your needs, and then use the license keyword as the license_template string. For example, \"mit\" or \"mpl-2.0\".\n                :p allow_squash_merge\n                    :optional\n                    :boolean\n                    # Choose an open source license template that best suits your needs, and then use the license keyword as the license_template string. For example, \"mit\" or \"mpl-2.0\".\n                    # Either true to allow squash-merging pull requests, or false to prevent squash-merging. Default: true\n                :p allow_merge_commit\n                    :optional\n                    :boolean\n                    # Either true to allow squash-merging pull requests, or false to prevent squash-merging. Default: true\n                    # Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits. Default: true\n                :p allow_rebase_merge\n                    :optional\n                    :boolean\n                    # Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits. Default: true\n                    # Either true to allow rebase-merging pull requests, or false to prevent rebase-merging. Default: true\n    +\n    export\n        :type CreateGithubBranchOptions\n            :{\n                :p name\n                    :string\n                :p revisionFromHash\n                    :string\n    +\n    export\n        :type IsoGitCommitter\n            :{\n                :p name\n                    :string\n                :p email\n                    :string\n                :p timestamp\n                    :number\n                :p timezoneOffset\n                    :number\n    +\n    export\n        :type IsoGitCommit\n            :{\n                :p oid\n                    :string\n                :p message\n                    :string\n                :p tree\n                    :string\n                :p parent\n                    :[\n                        :string\n                :p author\n                    :ref IsoGitCommitter\n                :p committer\n                    :ref IsoGitCommitter\n    +\n    export\n        :type GithubApiRepository\n            :{\n                :p name\n                    :string\n                :p description\n                    :string\n                :p private\n                    :boolean\n                :p url\n                    :string\n                :p html_url\n                    :string\n                :p clone_url\n                    :string\n                :p owner\n                    :{\n                        :p login\n                            :string\n                        :p url\n                            :string\n                        :p html_url\n                            :string\n                        :p avatar_url\n                            :string\n    +\n    export\n        :type ClonedGitRepository\n            :ref commonTypes.ClonedGitRepository\n"
      },
      "t/v08/express/features/github/utils.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        @ commonTypes\n        from '../../common'\n    import\n        @ GithubApiRepository\n        from './types'\n    +\n    export\n        function apiRepositoryToMeta\n            param apirepo\n                :ref GithubApiRepository\n            :return\n                :ref commonTypes.GitRepositoryMeta\n            return\n                {\n                    @ owner apirepo.owner.login\n                    @ name apirepo.name\n                    @ description apirepo.description\n                    [ branches\n                        @ 'master'\n                # TODO implement branches\n"
      },
      "t/v08/express/features/packi/index.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        @ ModelBuilderType\n        @ ControllerType\n        from '../app/types'\n    import\n        as packiTypes\n        from './types'\n        # import { UserModelBuilder, GetUserModel } from './mongo/user';\n    $if wzCtx.Build.usePacki\n        $if wzCtx.Build.useMongoDb\n            import\n                @ PackiModelBuilder\n                @ GetPackiModel\n                from './mongo/packi'\n                # import { UserModelBuilder, GetUserModel } from './mongo/user';\n        $if wzCtx.Build.useFilesystem\n            import\n                @ TemplatesController\n                from './controllers/templates'\n        import\n            @ PackiController\n            from './controllers/packi'\n        import\n            @ ProductionsController\n            from './controllers/productions'\n        $if wzCtx.Build.useMongoDb\n            $if wzCtx.Build.useGithub\n                import\n                    @ GithubController\n                    from './controllers/github'\n        $if wzCtx.Build.useMongoDb\n            const packiModelGetters\n                {\n                    @ GetPackiModel\n                        # GetUserModel\n            const packiModelBuilders\n                :[\n                    :ref ModelBuilderType\n                =\n                    [\n                        @ PackiModelBuilder\n                            # UserModelBuilder\n        const packiControllers\n            :[\n                :ref ControllerType\n            =\n                [\n                    $if wzCtx.Build.useFilesystem\n                        @ new TemplatesController()\n                    @ new PackiController()\n                    @ new ProductionsController()\n                    $if wzCtx.Build.useMongoDb\n                        $if wzCtx.Build.useGithub\n                            @ new GithubController()\n    export\n        @ packiTypes\n        $if wzCtx.Build.usePacki\n            $if wzCtx.Build.useMongoDb\n                @ packiModelGetters\n                @ packiModelBuilders\n            @ packiControllers\n"
      },
      "t/v08/express/features/packi/types.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    $if wzCtx.Build.useMongoDb\n        import\n            @ Document\n            from \"mongoose\"\n    import\n        @ commonTypes\n        from '../../common'\n    export\n        :type PackiFiles\n            :ref commonTypes.PackiFiles\n    export\n        :type TemplateList\n            :[\n                :string\n    export\n        :type Template\n            :{\n                :p name\n                    :string\n                :p files\n                    :ref PackiFiles\n    export\n        :type IUser\n            :{\n                :p userId\n                    :string\n                :p email\n                    :string\n                :p createdAt\n                    :ref Date\n                :p lastAccess\n                    :ref Date\n    $if wzCtx.Build.useMongoDb\n        export\n            :interface IUserModel\n                :extends IUser\n                :extends Document\n    export\n        :type IPacki\n            :{\n                :p userId\n                    :string\n                :p repoOwner\n                    :string\n                :p repoName\n                    :string\n                :p clonedAt\n                    :ref Date\n                :p lastCommitWhenCloned\n                    :string\n    $if wzCtx.Build.useMongoDb\n        export\n            :interface IPackiModel\n                :extends IPacki\n                :extends Document\n"
      },
      "t/v08/express/features/packi/controllers/github.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        @ Router\n        @ Request\n        @ Response\n        from 'express'\n    import\n        as bodyParser\n        from 'body-parser'\n    import\n        @ ControllerType\n        @ AppInitializerType\n        from '../../app/types'\n    import\n        @ githubTypes\n        @ githubApiCalls\n        @ githubUtils\n        from '../../github'\n    import\n        @ authManager\n        from '../../auth'\n    import\n        @ PackiFiles\n        @ TemplateList\n        @ Template\n        from '../types'\n    import\n        @ sendPromiseResult\n        @ sendSuccess\n        @ sendFailure\n        from '../../../utils/sendResponse'\n    import\n        @ TokenError\n        from 'passport-oauth2'\n    var jsonParser = bodyParser.json()\n    export\n        class GithubController\n            :implements ControllerType\n            p path\n                :public\n                = '/api/v1/github'\n            p router\n                :public\n                _ Router()\n            => initialize\n                param initValues\n                    :ref AppInitializerType\n                _ this.router.get\n                    `lit\n                        +\n                        @ this.path\n                        + /ownedrepos/:uid\n                    @ this.getOwnedRepositories\n                _ this.router.get\n                    `lit\n                        +\n                        @ this.path\n                        + /clone/:uid/:owner/:name/:branch/:kind\n                    @ this.cloneRepository\n                _ this.router.post\n                    `lit\n                        +\n                        @ this.path\n                        + /commit/:uid/:owner/:name/:branch\n                    @ this.commitRepository\n            p getOwnedRepositories\n                :private\n                async=>\n                    param request\n                        :ref Request\n                    param response\n                        :ref Response\n                    const accessToken\n                        await\n                            _ authManager.getAccessTokenFromAccount(request.params.uid, 'github.com')\n                    const repos\n                        await\n                            _ githubApiCalls.getRepositories(accessToken)\n                    const reposMeta\n                        _ repos.map\n                            =>\n                                param value\n                                _ githubUtils.apiRepositoryToMeta(value)\n                    _ sendSuccess(response, reposMeta)\n            p cloneRepository\n                :private\n                async=>\n                    param request\n                        :ref Request\n                    param response\n                        :ref Response\n                    const owner = request.params.owner\n                    const name = request.params.name\n                    const branch = request.params.branch\n                    const kind = request.params.kind\n                    const accessToken\n                        await\n                            _ authManager.getAccessTokenFromAccount(request.params.uid, 'github.com')\n                    const repo\n                        await\n                            _ githubApiCalls.cloneBranch\n                                {\n                                    @ owner\n                                    @ name\n                                    @ token accessToken\n                                @ branch\n                                @ kind\n                    _ sendSuccess(response, repo)\n            p commitRepository\n                :private\n                async=>\n                    param request\n                        :ref Request\n                    param response\n                        :ref Response\n                    const owner = request.params.owner\n                    const name = request.params.name\n                    const branch = request.params.branch\n                    const files\n                        :ref PackiFiles\n                        = request.body.files\n                    _ authManager.getAccessTokenFromAccount(request.params.uid, 'github.com').then\n                        =>\n                            param accessToken\n                            _ githubApiCalls.updateBranch\n                                @ files\n                                {\n                                    @ owner\n                                    @ name\n                                    @ token accessToken\n                                @ branch\n                                ._ then\n                                    =>\n                                        param repo\n                                        _ sendSuccess(response, repo)\n                                ._ catch\n                                    =>\n                                        param err\n                                        _ sendFailure(response, err, 401)\n                        ._ catch\n                            =>\n                                param err\n                                _ console.log('packi.github.commitRepository.owner.name.err', owner, name, err)\n                                _ sendFailure(response, err, 501)\n"
      },
      "t/v08/express/features/packi/controllers/productions.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    $\n        var ctrl = {\n            name: 'Productions',\n            path: '/api/v1/productions'\n        }\n    controller( &ctrl )\n        $append imports\n            import fs\n                from 'fs'\n            import\n                @ fsTypes\n                from '../../filesystem'\n            import\n                @ wizziTypes\n                @ wizziProds\n                @ WizziFactory\n                from '../../wizzi'\n            import\n                @ PackiFiles\n                @ TemplateList\n                @ Template\n                from '../types'\n            import\n                @ file\n                from 'wizzi'\n        _ this.router.post\n            `lit\n                + /MTreeBuildupScript/:id\n            @ this.mTreeBuildupScript\n        _ this.router.post\n            `lit\n                + /artifact/:id\n            @ this.generateArtifact\n        _ this.router.post\n            `lit\n                + /transform/:id/:transformer\n            @ this.transformModel\n        _ this.router.post\n            `lit\n                + /job\n            @ this.executeJob\n        _ this.router.post\n            `lit\n                + /wizzify\n            @ this.wizzify\n        $append handlers\n            handler( mTreeBuildupScript )\n                const id = request.params.id\n                const files\n                    :ref PackiFiles\n                    = request.body\n                _ wizziProds.mTreeBuildupScript(id, files, {}).then\n                    =>\n                        param value\n                        _ sendSuccess\n                            @ response\n                            {\n                                @ mTreeBuildupScript value\n                    ._ catch\n                        =>\n                            param err\n                            error 'features.packi.controllers.production.mTreeBuildupScript.err', err\n                            _ sendFailure(response, err, 501)\n            handler( generateArtifact )\n                const id = request.params.id\n                const files\n                    :ref PackiFiles\n                    = request.body\n                _ wizziProds.generateArtifact(id, files).then\n                    =>\n                        param value\n                        _ sendSuccess\n                            @ response\n                            {\n                                @ generatedArtifact value\n                    ._ catch\n                        =>\n                            param err\n                            error 'features.packi.controllers.production.generateArtifact.err', err\n                            _ sendFailure(response, err, 501)\n            handler( transformModel )\n                const id = request.params.id\n                const transformer = request.params.transformer\n                const files\n                    :ref PackiFiles\n                    = request.body\n                _ wizziProds.transformModel\n                    @ id\n                    @ files\n                    {\n                    {\n                        @ transformer transformer\n                    ._ then\n                        =>\n                            param value\n                            _ sendSuccess\n                                @ response\n                                {\n                                    @ transformedModel value.transformResult\n                    ._ catch\n                        =>\n                            param err\n                            error 'features.packi.controllers.production.generateArtifact.err', err\n                            _ sendFailure(response, err, 501)\n            handler( executeJob )\n                const files\n                    :ref PackiFiles\n                    = request.body\n                _ wizziProds.executeJobs(files).then\n                    async=>\n                        param fsJson\n                        const files\n                            await\n                                _ WizziFactory.extractGeneratedFiles(fsJson)\n                        _ sendSuccess\n                            @ response\n                            {\n                                @ generatedArtifacts files\n                    ._ catch\n                        =>\n                            param err\n                            error 'features.packi.controllers.production.executeJob.err', err\n                            _ sendFailure(response, err, 501)\n            handler( wizzify )\n                const id = request.params.id\n                const files\n                    :ref PackiFiles\n                    = request.body\n                _ wizziProds.wizzify(files).then\n                    async=>\n                        param ittfResult\n                            :ref PackiFiles\n                        _ sendSuccess\n                            @ response\n                            {\n                                @ packiResult ittfResult\n                    ._ catch\n                        =>\n                            param err\n                            error 'features.packi.controllers.production.wizzify.err', err\n                            _ sendFailure(response, err, 501)\n"
      },
      "t/v08/express/features/packi/controllers/templates.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        @ Router\n        @ Request\n        @ Response\n        from 'express'\n    import\n        as bodyParser\n        from 'body-parser'\n    import\n        @ ControllerType\n        @ AppInitializerType\n        from '../../app/types'\n    import\n        @ fsTypes\n        from '../../filesystem'\n    import\n        @ PackiFiles\n        @ TemplateList\n        @ Template\n        from '../types'\n    import\n        @ sendPromiseResult\n        @ sendSuccess\n        @ sendFailure\n        from '../../../utils/sendResponse'\n    var jsonParser = bodyParser.json()\n    export\n        class TemplatesController\n            :implements ControllerType\n            p path\n                :public\n                = '/api/v1/templates'\n            p router\n                :public\n                _ Router()\n            p fsDb\n                :public\n                :union\n                    :ref fsTypes.FsDb\n                    :undefined\n            => initialize\n                param initValues\n                    :ref AppInitializerType\n                set this.fsDb = initValues.fsDb\n                _ this.router.get(this.path, this.getAllTemplates)\n                _ this.router.get\n                    `lit\n                        +\n                        @ this.path\n                        + /:id\n                    @ this.getTemplateById\n                _ this.router.get\n                    `lit\n                        +\n                        @ this.path\n                        + /__starter\n                    @ this.getStarterTemplate\n                _ this.router.post\n                    `lit\n                        +\n                        @ this.path\n                        + /:uid/:id\n                    @ this.saveTemplate\n            +\n            p getAllTemplates\n                :private\n                async=>\n                    param request\n                        :ref Request\n                    param response\n                        :ref Response\n                    _ sendPromiseResult\n                        :param\n                            :[\n                                :string\n                        @ response\n                        _\n                            (\n                                @expr this.fsDb\n                                    :as\n                                        :ref fsTypes.FsDb\n                            ._ getPackiTemplatesList\n            +\n            p getTemplateById\n                :private\n                async=>\n                    param request\n                        :ref Request\n                    param response\n                        :ref Response\n                    const id = request.params.id\n                    const template\n                        await\n                            _\n                                (\n                                    @expr this.fsDb\n                                        :as\n                                            :ref fsTypes.FsDb\n                                ._ getPackiTemplate\n                                    @ id\n                    _ sendSuccess(response, template)\n            +\n            p getStarterTemplate\n                :private\n                async=>\n                    param request\n                        :ref Request\n                    param response\n                        :ref Response\n                    const template\n                        await\n                            _\n                                (\n                                    @expr this.fsDb\n                                        :as\n                                            :ref fsTypes.FsDb\n                                ._ getStarterTemplate\n                    _ sendSuccess(response, template)\n            +\n            p saveTemplate\n                :private\n                async=>\n                    param request\n                        :ref Request\n                    param response\n                        :ref Response\n                    const id = request.params.id\n                    const files\n                        :ref PackiFiles\n                        = request.body.files\n                    _\n                        (\n                            @expr this.fsDb\n                                :as\n                                    :ref fsTypes.FsDb\n                        ._ savePackiTemplate\n                            @ id\n                            @ files\n                        ._ then\n                            =>\n                                param result\n                                _ sendSuccess(response, result)\n                        ._ catch\n                            =>\n                                param err\n                                _ sendFailure(response, err, 501)\n"
      },
      "t/v08/express/features/packi/mongo/packi.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        @ Schema\n        @ Model\n        @ model\n        from \"mongoose\"\n    import\n        @ ModelBuilderType\n        from \"../../app/types\"\n    import\n        @ IPackiModel\n        from \"../types\"\n    const PackiSchema\n        :ref Schema\n            :param\n                :ref IPackiModel\n        =\n            new Schema\n                {\n                    { userId\n                        @ type Schema.Types.ObjectId\n                        @ required true\n                        @ ref 'User'\n                    @ repoOwner String\n                    @ repoName String\n                    @ clonedAt Date\n                    @ lastCommitWhenCloned String\n        # mongoose models creation is centralized\n        # mongodb calls buildModel() when starting, after connection has been established\n        # controllers call GetPackiModel() when initialized, after buildModel() has benn called\n    export\n        :type PackiModelType\n            :ref Model\n                :param\n                    :ref IPackiModel\n        # mongoose models creation is centralized\n        # mongodb calls buildModel() when starting, after connection has been established\n        # controllers call GetPackiModel() when initialized, after buildModel() has benn called\n    let packiModel\n        :ref PackiModelType\n    export\n        function GetPackiModel\n            :return\n                :ref PackiModelType\n            return packiModel\n    export\n        const PackiModelBuilder\n            :ref ModelBuilderType\n            =\n                {\n                    @ buildModel\n                        =>\n                            set packiModel =\n                                _ model\n                                    :param\n                                        :ref IPackiModel\n                                    @ \"Packi\"\n                                    @ PackiSchema\n"
      },
      "t/v08/express/features/packi/mongo/user.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n"
      },
      "t/v08/express/features/repo/apicalls.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import fetch from 'node-fetch'\n    +\n    export\n        async-function getRepositories\n            param accessToken\n                :string\n            :return\n                :ref Promise\n                    :param any\n            return\n                _ fetch\n                    `lit\n                        + https://api.github.com/user/repos\n                    _ getOptions(accessToken)\n                    ._ then\n                        =>\n                            param response\n                            _ response.json()\n                    ._ then\n                        =>\n                            param responseData\n                            return responseData\n    +\n    function getOptions\n        param accessToken\n            :string\n        return\n            {\n                @ method 'GET'\n                @ headers headers(accessToken)\n    +\n    function postOptions\n        param accessToken\n            :string\n        return\n            {\n                @ method 'POST'\n                @ headers headers(accessToken)\n    +\n    function headers\n        param accessToken\n            :string\n        return\n            {\n                @ 'Accept' 'application/vnd.github.v3+json'\n                @ 'Content-Type' 'application/json'\n                @ 'Authorization' 'token ' + accessToken\n"
      },
      "t/v08/express/features/repo/index.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        as repoTypes\n        from './types'\n    import\n        as repoApiCalls\n        from './apicalls'\n    +\n    export\n        @ repoTypes\n        @ repoApiCalls\n"
      },
      "t/v08/express/features/repo/types.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    +\n    export\n        :type FileDiffKind\n            :union\n                :literal '+'\n                :literal '-'\n                :literal '<>'\n    +\n    export\n        :type FileDiffItem\n            :{\n                :p path\n                    :string\n                :p content\n                    :string\n    +\n    export\n        :type FileDiff\n            :{\n                :p kind\n                    :ref FileDiffKind\n                :p a\n                    :optional\n                    :ref FileDiffItem\n                :p b\n                    :optional\n                    :ref FileDiffItem\n"
      },
      "t/v08/express/features/t/authHandler.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params name\n    $params name\n    +\n    p ${name}\n        :private\n        async=>\n            param request\n                :ref AuthRequest\n            param response\n                :ref Response\n            $hook\n"
      },
      "t/v08/express/features/t/catch_fail.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params method\n    $params method\n    ._ catch\n        =>\n            param err\n                :any\n            log '${method}.error', err\n            _ sendFailure\n                @ response\n                {\n                    @ err err\n                @ 501\n"
      },
      "t/v08/express/features/t/catch_reject.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params method\n    $params method\n    ._ catch\n        =>\n            param err\n                :any\n            log '${method}.error', err\n            return reject(err)\n"
      },
      "t/v08/express/features/t/controller.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &ctrl\n    $params &ctrl\n    import\n        @ Router\n        @ Request\n        @ Response\n        from 'express'\n    import\n        @ ControllerType\n        @ AppInitializerType\n        $if ctrl.kind == 'site'\n            from '../../features/app/types'\n        $else\n            from '../../../features/app/types'\n    $if ctrl.isAuth\n        import\n            @ AuthRequest\n            $if ctrl.kind == 'site'\n                from '../../features/auth/types'\n            $else\n                from '../../../features/auth/types'\n    $if ctrl.apiSecured || ctrl.webSecured\n        import\n            $if ctrl.apiSecured\n                @ apiSecured\n            $if ctrl.webSecured\n                @ webSecured\n            $if ctrl.kind == 'site'\n                from '../../middlewares/index'\n            $else\n                from '../../../middlewares/index'\n    import\n        @ sendHtml\n        @ sendSuccess\n        @ sendPromiseResult\n        @ sendFailure\n        $if ctrl.kind == 'site'\n            from '../../utils/sendResponse'\n        $else\n            from '../../../utils/sendResponse'\n    import\n        @ FcError\n        @ SYSTEM_ERROR\n        $if ctrl.kind == 'site'\n            from '../../utils/error'\n        $else\n            from '../../../utils/error'\n    import\n        @ statusCode\n        $if ctrl.kind == 'site'\n            from '../../utils'\n        $else\n            from '../../../utils'\n    $if ctrl.modelName\n        import\n            @ I${ctrl.modelName}\n            from '../types'\n    $hook imports\n    +\n    function makeHandlerAwareOfAsyncErrors\n        param handler\n        return\n            async-function\n                param request\n                    :ref Request\n                param response\n                    :ref Response\n                param next\n                    :ref Function\n                log 'makeHandlerAwareOfAsyncErrors called'\n                try\n                    await\n                        _ handler(request, response, next)\n                    log 'makeHandlerAwareOfAsyncErrors ok'\n                catch error\n                    if error instanceof FcError\n                        _ response.status(statusCode.BAD_REQUEST).send\n                            {\n                                @ code error.code\n                                @ message error.message\n                                @ data\n                                    ||\n                                        + error.data\n                                        {\n                    else\n                        const fcError = new FcError(SYSTEM_ERROR)\n                        _ response.status(statusCode.BAD_REQUEST).send\n                            {\n                                @ code fcError.code\n                                @ message error.message\n                                @ data\n                                    ||\n                                        + fcError.data\n                                        {\n    +\n    export\n        class ${ctrl.name}Controller\n            :implements ControllerType\n            +\n            p path\n                :public\n                = '${ctrl.path}'\n            +\n            p router\n                :public\n                _ Router()\n            $if ctrl.modelName\n                +\n                p ${ctrl.modelName}Model\n                    :public\n                    :ref ${ctrl.modelName}ModelType\n            +\n            $hook properties\n            +\n            => initialize\n                param initValues\n                    :ref AppInitializerType\n                warn 'Entering ${ctrl.name}Controller.initialize'\n                $if ctrl.modelName\n                    set this.${ctrl.modelName}Model\n                        _ Get${ctrl.modelName}Model\n                $hook\n            $hook handlers\n"
      },
      "t/v08/express/features/t/handler.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params name\n    $params name\n    +\n    p ${name}\n        :private\n        async=>\n            param request\n                :ref Request\n            param response\n                :ref Response\n            $hook\n"
      },
      "t/v08/express/features/wizzi/controllers/t/productions/resolveContexts.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    function resolveContexts\n        param contextItems\n            :[\n                :ref MetaContext\n        const promises: Promise<any>[] = []\n        _ contextItems.map\n            =>\n                param contextItem\n                _ promises.push\n                    new Promise\n                        =>\n                            param resolve\n                            param reject\n                            _ resolveContext\n                                @ contextItem\n                                ._ then\n                                    =>\n                                        param context\n                                        _ resolve\n                                            {\n                                                @ name contextItem.name\n                                                @ value context\n                                ._ catch\n                                    =>\n                                        param err\n                                        _ reject\n                                            @ err\n        return\n            new Promise\n                =>\n                    param resolve\n                    param reject\n                    _ Promise.all\n                        @ promises\n                        ._ then\n                            =>\n                                param items\n                                const context: any = {}\n                                _ items.map\n                                    =>\n                                        param value\n                                            :any\n                                        set context[value.name] = value.value\n                                _ resolve\n                                    @ context\n                        ._ catch\n                            =>\n                                param err\n                                _ reject(err)\n    function resolveContext\n        param contextItem\n            :ref MetaContext\n        if contextItem.type == 'json-packiFiles'\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        _ wizziProds.generateArtifact\n                            @ contextItem.sourcePath as string\n                            @ contextItem.sourceFiles as packiTypes.PackiFiles\n                            ._ then\n                                =>\n                                    param value\n                                        :any\n                                    _ resolve(value)\n                            ._ catch\n                                =>\n                                    param err\n                                    _ reject(err)\n        elif contextItem.type == 'json-fsIttf'\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        _ wizziProds.generateArtifactFs\n                            _ path.join\n                                @ config.ittfPath\n                                @ contextItem.sourcePath as string\n                            ._ then\n                                =>\n                                    param value\n                                        :any\n                                    _ resolve(value)\n                            ._ catch\n                                =>\n                                    param err\n                                    log myname + '.resolveContext', contextItem.type, 'err', err\n                                    _ reject(err)\n        elif contextItem.type == 'json-fsFile'\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        const json\n                            _ file.readJSON\n                                @ contextItem.sourcePath as string\n                        _ resolve(json)\n        elif contextItem.type == 'json-value'\n            return\n                new Promise\n                    =>\n                        param resolve\n                        _ resolve(contextItem.value)\n        elif contextItem.type == 'wizziModel-packiFiles'\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        _ wizziProds.loadModel\n                            @ contextItem.sourcePath as string\n                            @ contextItem.sourceFiles as packiTypes.PackiFiles\n                            ._ then\n                                =>\n                                    param value\n                                        :any\n                                    _ resolve(value)\n                            ._ catch\n                                =>\n                                    param err\n                                        :any\n                                    _ reject(err)\n        elif contextItem.type == 'wizziModel-fsIttf'\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        _ wizziProds.loadModelFs\n                            _ path.join\n                                @ config.ittfPath\n                                @ contextItem.sourcePath as string\n                            {\n                            ._ then\n                                =>\n                                    param value\n                                        :any\n                                    _ resolve(value)\n                            ._ catch\n                                =>\n                                    param err\n                                        :any\n                                    _ reject(err)\n        else\n            throw new Error('Invalid contextItem type: ' + contextItem.type)\n"
      },
      "t/v08/express/services/filesystem.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        @ JsonComponents\n        @ jsonfile\n        @ FsJsonDocumentManager\n        from 'wizzi-repo'\n    import path from 'path'\n    import wizzi from 'wizzi'\n    import\n        @ ConfigType\n        from '../features/config'\n    import\n        @ fsTypes\n        from '../features/filesystem'\n    import\n        @ rejects\n        from 'assert'\n    import\n        @ FileDef\n        @ VFile\n        @ vfile\n            as createVFileFS\n        @ VFileFS\n        from 'wizzi-utils'\n    import\n        @ FsDb\n        @ FsDbResult\n        from '../features/filesystem/types'\n    import\n        @ packiTypes\n        from '../features/packi'\n    :type cb\n        :< T\n        :=>\n            :void\n            param err\n                :any\n            param result\n                :ref T\n    let vfile\n        :ref VFile\n    let docman\n        :ref FsJsonDocumentManager\n    let packiTemplatesJsonUri = 'json://root/packi/templates'\n    let lastTemplatesReload\n        :number\n        = 0\n    let saveConfig\n        :ref ConfigType\n    export-default\n        async-function start\n            param config\n                :ref ConfigType\n            :return\n                :ref Promise\n                    :param\n                        :ref FsDb\n            set saveConfig = config\n            const\n                {\n                    @ packiTemplatesFolder\n                = config\n            var packiTemplatesPath = path.join(__dirname, '..', '..', '..', packiTemplatesFolder)\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param rejects\n                        _ JsonComponents.createFsJson\n                            [\n                            =>\n                                param err\n                                param fsJson\n                                if err\n                                    _ rejects(err)\n                                _ jsonfile\n                                    {\n                                        @ fsJson\n                                    =>\n                                        param err\n                                        param result\n                                        set vfile = result\n                                        set docman = JsonComponents.createDocumentManager(fsJson)\n                                        _ docman.uploadFolder\n                                            @ packiTemplatesPath\n                                            @ packiTemplatesJsonUri\n                                            =>\n                                                param err\n                                                param result\n                                                if err\n                                                    _ rejects(err)\n                                                set lastTemplatesReload = new Date().getTime()\n                                                const list = FsDbDriver.getPackiTemplatesList()\n                                                _ list.then\n                                                    =>\n                                                        param value\n                                                        _ resolve(FsDbDriver)\n                                                    ._ catch\n                                                        =>\n                                                            param err\n                                                            _ console.log('filesystem.start.Error retrieving packi templates', err)\n    +\n    const FsDbDriver\n        :ref fsTypes.FsDb\n        =\n            {\n                @ getPackiTemplatesList\n                    async-function\n                        :return\n                            :ref Promise\n                                :param\n                                    :[\n                                        :string\n                        return\n                            new Promise\n                                =>\n                                    param resolve\n                                    param rejects\n                                    _ reloadTemplates\n                                        =>\n                                            _ vfile.getFolders\n                                                @ packiTemplatesJsonUri\n                                                {\n                                                    @ deep false\n                                                =>\n                                                    param err\n                                                    param result\n                                                    if err\n                                                        _ rejects(err)\n                                                    const ret\n                                                        :[\n                                                            :string\n                                                        = []\n                                                    _ result.forEach\n                                                        =>\n                                                            param item\n                                                            if item.relPath.startsWith('__') == false\n                                                                _ ret.push(item.relPath)\n                                                    _ resolve(ret)\n                @ getPackiTemplate\n                    async-function\n                        param id\n                            :string\n                        :return\n                            :ref Promise\n                                :param\n                                    :[\n                                        :ref FileDef\n                        return\n                            new Promise\n                                =>\n                                    param resolve\n                                    param rejects\n                                    _ reloadTemplates\n                                        =>\n                                            _ vfile.getFiles\n                                                `lit\n                                                    +\n                                                    @ packiTemplatesJsonUri\n                                                    + /\n                                                    @ id\n                                                    +\n                                                {\n                                                    @ deep true\n                                                    @ documentContent true\n                                                =>\n                                                    param err\n                                                    param result\n                                                    if err\n                                                        _ rejects(err)\n                                                    _ resolve(result)\n                @ getStarterTemplate\n                    async-function\n                        :return\n                            :ref Promise\n                                :param\n                                    :[\n                                        :ref FileDef\n                        return\n                            new Promise\n                                =>\n                                    param resolve\n                                    param rejects\n                                    _ reloadTemplates\n                                        =>\n                                            _ vfile.getFiles\n                                                `lit\n                                                    +\n                                                    @ packiTemplatesJsonUri\n                                                    + /__starter\n                                                {\n                                                    @ deep true\n                                                    @ documentContent true\n                                                =>\n                                                    param err\n                                                    param result\n                                                    if err\n                                                        _ rejects(err)\n                                                    _ resolve(result)\n                @ savePackiTemplate\n                    async-function\n                        param id\n                            :string\n                        param files\n                            :ref packiTypes.PackiFiles\n                        :return\n                            :ref Promise\n                                :param\n                                    :ref FsDbResult\n                        const\n                            {\n                                @ packiTemplatesFolder\n                            = saveConfig\n                        var templateFolder = path.join(__dirname, '..', '..', '..', packiTemplatesFolder, id)\n                        try\n                            let result\n                                await\n                                    _ deleteFolder(templateFolder)\n                            await\n                                _ asyncForEach\n                                    _ Object.keys(files)\n                                    async=>\n                                        param file\n                                            :string\n                                        let result\n                                            await\n                                                _ writeFile(path.join(templateFolder, file), files[file].contents)\n                            return\n                                _ Promise.resolve\n                                    {\n                                        @ writtenCount Object.keys(files).length\n                        catch err\n                            _ console.log('filesystem.savePackiTemplate.err: ', err)\n                            return Promise.reject(err)\n    +\n    function deleteFolder\n        param folderPath\n            :string\n        :return\n            :ref Promise\n                :param boolean\n        return\n            new Promise\n                =>\n                    param resolve\n                    param reject\n                    _ createVFileFS().deleteFolder\n                        @ folderPath\n                        =>\n                            param err\n                            param result\n                            if err\n                                _ console.log('filesystem.deleteFolder.err', err)\n                                return reject(err)\n                            _ resolve(true)\n    +\n    function writeFile\n        param filePath\n            :string\n        param content\n            :string\n        :return\n            :ref Promise\n                :param boolean\n        return\n            new Promise\n                =>\n                    param resolve\n                    param reject\n                    _ createVFileFS().write\n                        @ filePath\n                        @ content\n                        =>\n                            param err\n                            param result\n                            if err\n                                _ console.log('filesystem.writeFile.err', err)\n                                return reject(err)\n                            _ resolve(true)\n    +\n    function reloadTemplates\n        param callback\n            :ref Function\n        if (new Date().getTime() - lastTemplatesReload) > 60 * 1000\n            _ start(saveConfig).then\n                =>\n                    set lastTemplatesReload = new Date().getTime()\n                    _ callback()\n        else\n            _ callback()\n    +\n    async-function asyncForEach\n        param array\n            :[\n                :string\n        param callback\n            :ref Function\n        for let index = 0; index < array.length; index++\n            await\n                _ callback(array[index], index, array)\n"
      },
      "t/v08/express/services/wizzi/config.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import path from 'path'\n    import\n        @ WizziConfigType\n        from './types'\n    export\n        function getConfigValues\n            :return\n                :ref WizziConfigType\n            param ittfPath\n                :string\n            param dataPath\n                :string\n            return\n                {\n                    @ repoBasePath path.join(ittfPath, 'repo')\n                    @ metaBasePath path.join(dataPath, 'meta')\n                    @ studioBasePath path.join(dataPath, 'studio')\n                    @ jobsBasePath path.join(dataPath, 'jobs')\n                    @ crawlBasePath path.join(dataPath, 'crawl')\n                    @ githubBasePath path.join(dataPath, 'github')\n                    @ cheatsheetsBasePath path.join(dataPath, 'models', 'cheatsheets')\n                    @ siteMetaBasePath path.join(dataPath, 'models', 'json')\n                    @ jsonDataMetaBasePath path.join(dataPath, 'models', 'sitemaps')\n                    @ storeKind 'filesystem'\n                    @ plugins\n                        [\n                            @ 'wizzi-core'\n                            @ 'wizzi-meta'\n                            @ 'wizzi-js'\n                            @ 'wizzi-web'\n                    @ pluginsBasePath 'TODO'\n"
      },
      "t/v08/express/services/wizzi/index.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        as path\n        from 'path'\n    import\n        as wizzi\n        from 'wizzi'\n    import\n        @ ConfigType\n        from '../../features/config'\n    $if wzCtx.Build.useWizzi && wzCtx.Build.wizzi.useRunner\n        import wizzifile from './wizzifile'\n    export-default\n        async-function start\n            param config\n                :ref ConfigType\n            :return\n                :ref Promise\n                    :param void\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        $if wzCtx.Build.useWizzi && wzCtx.Build.wizzi.useRunner\n                            _ wizzifile.setAppConfig\n                                @ config\n                            _ wizzi.startRunnerServer\n                                {\n                                    @ cwd __dirname\n                                    @ wizzifile\n                                function\n                                    param err\n                                    if err\n                                        return reject(err)\n                                    _ resolve()\n                        $else\n                            # No generation request. Do nothing\n                            _ resolve()\n"
      },
      "t/v08/express/services/wizzi/types.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    export\n        :type WizziConfigType\n            :{\n                :p repoBasePath\n                    :string\n                :p metaBasePath\n                    :string\n                :p studioBasePath\n                    :string\n                :p jobsBasePath\n                    :string\n                :p crawlBasePath\n                    :string\n                :p githubBasePath\n                    :string\n                :p cheatsheetsBasePath\n                    :string\n                :p siteMetaBasePath\n                    :string\n                :p jsonDataMetaBasePath\n                    :string\n                :p storeKind\n                    :string\n                :p plugins\n                    :[\n                        :string\n                :p pluginsBasePath\n                    :string\n"
      },
      "t/v08/express/services/wizzi/wizzifile.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import util from 'util'\n    import path from 'path'\n    import chokidar from 'chokidar'\n    import\n        @ getConfigValues\n        from './config'\n    import\n        @ ConfigType\n        from '../../features/config'\n    import\n        @ WizziConfigType\n        from './types'\n    const FACTORY_SITE = 'site'\n    const MODEL_TICKET_MAINSITE = 'mainsite'\n    var appConfig\n        :ref ConfigType\n    var wizziConfig\n        :ref WizziConfigType\n    var runnerModelsFolder\n        :string\n    var watcher\n        :ref chokidar.FSWatcher\n    const md\n        :{\n            :index\n                :any\n                param k\n                    :string\n        =\n            {\n    set md.setAppConfig\n        function\n            param config\n                :ref ConfigType\n            set appConfig = config\n            set wizziConfig\n                _ getConfigValues\n                    @ appConfig.ittfPath\n                    @ appConfig.dataPath\n            set runnerModelsFolder\n                _ path.join\n                    @ appConfig.ittfPath\n                    @ 'meta'\n                    @ 'models'\n            set watcher\n                _ chokidar.watch\n                    set runnerModelsFolder + '/**/*.ittf'\n                    {\n                        @ persistent true\n            success 'wizzifile is watching', runnerModelsFolder + '/**/*.ittf'\n    set md.models =\n        {\n    let runnerServerInstance\n        :any\n        = null\n    set md.onConfig =\n        function\n            param wizziConfig\n                :any\n            param callback\n                :ref Function\n            _ wizziConfig.set\n                @ 'meta-html-ittf-path'\n                _ path.join\n                    @ appConfig.ittfPath\n                    @ 'meta'\n                    @ 'html'\n                    @ 'index.html.ittf'\n                #\n                    #\n                    # Set the path of the html page\n                    # for metaediting of IttfDocuments\n                    #\n                #\n                    # *\n                    # Set the path of the html page\n                    # for browsing an ittf folder path\n                    #\n            _ wizziConfig.set\n                @ 'meta-folder-ittf-path'\n                _ path.join\n                    @ appConfig.ittfPath\n                    @ 'meta'\n                    @ 'folder'\n                    @ 'index.html.ittf'\n                #\n                    # *\n                    # Set the path of the html page\n                    # for browsing an ittf folder path\n                    #\n                #\n                    #\n                    # Set the path of the html page\n                    # for simple text editing of non IttfDocuments\n                    #\n            _ wizziConfig.set\n                @ 'meta-html-text-path'\n                _ path.join\n                    @ appConfig.ittfPath\n                    @ 'meta'\n                    @ 'text'\n                    @ 'index.html.ittf'\n                #\n                    #\n                    # Set the path of the html page\n                    # for simple text editing of non IttfDocuments\n                    #\n            info 'wizzifile.onConfig'\n            _ callback(null)\n    +\n    set md.onStart =\n        function\n            param runnerServer\n                :any\n            param wizziConfig\n                :any\n            param callback\n                :ref Function\n            info 'wizzifile.onStart.enter'\n            set runnerServerInstance = runnerServer\n            _ runnerServer.registerfsFactory\n                @ FACTORY_SITE\n                {\n                    { plugins\n                        @ pluginsBaseFolder '${wzCtx.Build.wizzi.pluginsBaseFolder}'\n                        [ items\n                            $foreach item in wzCtx.Build.wizzi.plugins\n                                @ '${item}'\n            _ runnerServer.registerApi('default', md.defaultApi)\n            info 'wizzifile.onStart.exit'\n            _ callback(null)\n    +\n    set md.onPrepare =\n        function\n            param factoryName\n                :string\n            param runnerServer\n                :any\n            param wizziConfig\n                :any\n            param callback\n                :ref Function\n            if factoryName === FACTORY_SITE\n                _ loadRuntimeModels\n                    function\n                        param err\n                            :any\n                        if err\n                            return callback(err)\n                        const loading = false\n                        _ console.log('wizzifile.setting watcher', watcher)\n                        _ watcher.on\n                            @ 'change'\n                            =>\n                                _ console.log('wizzifile.reloading watched')\n                                _ loadRuntimeModels()\n                        _ watcher.on\n                            @ 'add'\n                            =>\n                                _ console.log('wizzifile.reloading watched')\n                                _ loadRuntimeModels()\n                        return callback()\n            else\n                _ callback(null)\n    +\n    set md.defaultApi =\n        function\n            param name\n                :string\n            param query\n                :string\n            info 'wizzifile.defaultApi.request', name, query\n            if name === 'demos'\n                const model = md.models['mainsite']\n                return model.getDemosByPath(query)\n            else\n                if name === 'categories'\n                    const model = md.models['mainsite']\n                    return model.getCategoriesByPath(query)\n                else\n                    if name === 'links'\n                        const model = md.models['mainsite']\n                        return model.getLinksByPath(query)\n            throw new Error('wizzifile.defaultApi. Unknown api name: ' + name)\n    +\n    function loadRuntimeModels\n        param callback\n            :ref Function\n            :optional\n        var mainSiteIttfPath = path.join(runnerModelsFolder, 'main.site.ittf')\n        info 'wizzifile loading', mainSiteIttfPath\n        _ runnerServerInstance.loadModel\n            @ FACTORY_SITE\n            @ MODEL_TICKET_MAINSITE\n            @ 'site'\n            @ mainSiteIttfPath\n            {\n            function\n                param err\n                    :any\n                param wizziModel\n                    :any\n                if err\n                    if callback\n                        return callback(err)\n                    else\n                        throw err\n                set md.models[MODEL_TICKET_MAINSITE] = wizziModel\n                info 'wizzifile loaded', mainSiteIttfPath\n                if callback\n                    _ callback(null)\n    export-default md\n"
      },
      "t/v08/express/site/t/authHandler.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params name\n    $params name\n    +\n    p ${name}\n        :private\n        async=>\n            param request\n                :ref AuthRequest\n            param response\n                :ref Response\n            $hook\n"
      },
      "t/v08/express/site/t/controller.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &ctrl\n    $params &ctrl\n    import\n        @ Router\n        @ Request\n        @ Response\n        from 'express'\n    import\n        @ ControllerType\n        @ AppInitializerType\n        $if ctrl.kind == 'site'\n            from '../../features/app/types'\n        $else\n            from '../../../features/app/types'\n    $if ctrl.isAuth\n        import\n            @ AuthRequest\n            $if ctrl.kind == 'site'\n                from '../../features/auth/types'\n            $else\n                from '../../../features/auth/types'\n    $if ctrl.apiSecured || ctrl.webSecured\n        import\n            $if ctrl.apiSecured\n                @ apiSecured\n            $if ctrl.webSecured\n                @ webSecured\n            $if ctrl.kind == 'site'\n                from '../../middlewares/index'\n            $else\n                from '../../../middlewares/index'\n    import\n        @ sendHtml\n        @ sendSuccess\n        @ sendPromiseResult\n        @ sendFailure\n        $if ctrl.kind == 'site'\n            from '../../utils/sendResponse'\n        $else\n            from '../../../utils/sendResponse'\n    import\n        @ FcError\n        @ SYSTEM_ERROR\n        $if ctrl.kind == 'site'\n            from '../../utils/error'\n        $else\n            from '../../../utils/error'\n    import\n        @ statusCode\n        $if ctrl.kind == 'site'\n            from '../../utils'\n        $else\n            from '../../../utils'\n    $if ctrl.modelName\n        import\n            @ I${ctrl.modelName}\n            from '../types'\n    $hook imports\n    +\n    function makeHandlerAwareOfAsyncErrors\n        param handler\n        return\n            async-function\n                param request\n                    :ref Request\n                param response\n                    :ref Response\n                param next\n                    :ref Function\n                log 'makeHandlerAwareOfAsyncErrors called'\n                try\n                    await\n                        _ handler(request, response, next)\n                    log 'makeHandlerAwareOfAsyncErrors ok'\n                catch error\n                    if error instanceof FcError\n                        _ response.status(statusCode.BAD_REQUEST).send\n                            {\n                                @ code error.code\n                                @ message error.message\n                                @ data\n                                    ||\n                                        + error.data\n                                        {\n                    else\n                        const fcError = new FcError(SYSTEM_ERROR)\n                        _ response.status(statusCode.BAD_REQUEST).send\n                            {\n                                @ code fcError.code\n                                @ message error.message\n                                @ data\n                                    ||\n                                        + fcError.data\n                                        {\n    +\n    export\n        class ${ctrl.name}Controller\n            :implements ControllerType\n            +\n            p path\n                :public\n                = '${ctrl.path}'\n            +\n            p router\n                :public\n                _ Router()\n            $if ctrl.modelName\n                +\n                p ${ctrl.modelName}Model\n                    :public\n                    :ref ${ctrl.modelName}ModelType\n            +\n            $hook properties\n            +\n            => initialize\n                param initValues\n                    :ref AppInitializerType\n                warn 'Entering ${ctrl.name}Controller.initialize'\n                $if ctrl.modelName\n                    set this.${ctrl.modelName}Model\n                        _ Get${ctrl.modelName}Model\n                $hook\n            $hook handlers\n"
      },
      "t/v08/express/site/t/handler.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params name\n    $params name\n    +\n    p ${name}\n        :private\n        async=>\n            param request\n                :ref Request\n            param response\n                :ref Response\n            $hook\n"
      },
      "t/v08/mongo/model.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        @ Schema\n        @ Model\n        @ model\n        from \"mongoose\"\n    import\n        @ ModelBuilderType\n        from \"../../app/types\"\n    import\n        @ I${md.Name}Model\n        from \"../types\"\n    +\n    # see https://mongoosejs.com/docs/schematypes.html\n    +\n    const ${md.Name}Schema\n        new Schema\n            :param I${md.Name}Model\n            {\n                $foreach field in md.fields\n                    $if field.type == 'arrayRef'\n                        [ ${field.name}\n                            {\n                                @ type Schema.Types.ObjectId\n                                @ ref '${field.refSchema}'\n                    $elif field.type == 'objectRef'\n                        { ${field.name}\n                            @ type Schema.Types.ObjectId\n                            @ ref '${field.refSchema}'\n                    $elif field.type != 'oid'\n                        { ${field.name}\n                            $if field.type == 'string'\n                                @ type String\n                            $elif field.type == 'number' || field.type == 'integer' || field.type == 'float'\n                                @ type Number\n                            $elif field.type == 'date'\n                                @ type Date\n                            $elif field.type == 'buffer'\n                                @ type Buffer\n                            $elif field.type == 'boolean'\n                                @ type Boolean\n                            $elif field.type == 'mixed'\n                                @ type Mixed\n                            $elif field.type == 'id'\n                                @ type ObjectId\n                            $elif field.type == 'array'\n                                @ type Array\n                            $elif field.type == 'decimal'\n                                @ type Decimal128\n                            $elif field.type == 'map'\n                                @ type Map\n                            $elif field.type == 'schema'\n                                @ type Schema\n                            $elif field.type == 'jsonstring'\n                                @ type: String\n                                @ get\n                                    function\n                                        param data\n                                        try\n                                            return JSON.parse(data)\n                                        catch\n                                            return data\n                                @ set\n                                    function\n                                        param data\n                                        return JSON.stringify(data)\n                            $if field.required\n                                @ required true\n                            $if field.unique || field.sparse\n                                { index\n                                    $if field.unique\n                                        @ unique true\n                                    $if field.sparse\n                                        @ sparse true\n                $if md.setUpdatedAt\n                    { updated_at\n                        @ type Date\n            {\n                @ collection '${md.collectionName}'\n    $if md.setUpdatedAt\n        _ ${md.Name}Schema.pre\n            @ 'save'\n            function\n                param next\n                set this.updated_at = new Date()\n                _ next()\n    $if md.indexes\n        # see https://docs.mongodb.com/manual/core/index-compound/\n        $foreach index in md.indexes\n            $if index.fields.length > 1\n                _ ${md.Name}Schema.index\n                    {\n                        $foreach field in index.fields\n                            @ ${field.name} 1\n                    {\n                        $if index.unique\n                            @ unique true\n                        $if index.sparse\n                            @ sparse true\n    +\n    export\n        :type ${md.Name}ModelType\n            :ref Model\n                :param\n                    :ref I${md.Name}Model\n    +\n    let ${md.name}Model\n        :ref ${md.Name}ModelType\n    +\n    export\n        function Get${md.Name}Model\n            :return\n                :ref ${md.Name}ModelType\n            return ${md.name}Model\n    +\n    export\n        const ${md.Name}ModelBuilder\n            :ref ModelBuilderType\n            =\n                {\n                    @ buildModel\n                        =>\n                            set ${md.name}Model =\n                                _ model\n                                    :param\n                                        :ref I${md.Name}Model\n                                    @ '${md.Name}'\n                                    @ ${md.Name}Schema\n            # mongoose models creation is centralized at the app level\n            # after connection has been established, the mongodb service calls buildModel(),\n            # then the controllers when initializing call Get${md.Name}Model()\n"
      },
      "t/v08/mongo/modelcontroller.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    $\n        var ctrl = {\n            name: md.controllerName,\n            path: md.controllerPath,\n            modelName: md.Name\n        }\n    v08/ts/controller( &ctrl )\n        _ this.router.get('/', this.get${md.Names})\n        _ this.router.post('/', this.addNew${md.Name})\n        _ this.router.get('/:id', this.get${md.Name}ById)\n        $if md.fkey\n            _ this.router.get('/${md.fkey}/:${md.fkey}', this.get${md.Name}By_${md.fkey})\n        $foreach field in md.fields\n            $if field.unique\n                _ this.router.get('/${field.name}/:${field.name}', this.get${md.Name}By_${field.name})\n            $elif field.type == 'arrayRef'\n                _ this.router.post('/${field.path}/:id/:${field.path}', this.add_${field.path})\n                _ this.router.delete('/${field.path}/:id/:${field.path}', this.remove_${field.path})\n        $if md.indexes\n            $foreach index in md.indexes\n                $if index.fields.length > 1\n                    _ this.router.get\n                        `lit\n                            $foreach field in index.fields\n                                + /:${field.name}\n                        @ this.get${md.Name}By_${index.name}\n        _ this.router.put('/:id', this.update${md.Name})\n        _ this.router.delete('/:id', this.delete${md.Name})\n        $append imports\n            import\n                @ ${md.Name}ModelType\n                @ Get${md.Name}Model\n                from '../mongo/${md.name}'\n        $append handlers\n            v08/ts/handler( addNew${md.Name} )\n                let new${md.Name} = new this.${md.Name}Model(request.body)\n                _ new${md.Name}.save\n                    =>\n                        param err\n                        param ${md.name}\n                        if err\n                            _ sendFailure\n                                @ response\n                                @ err\n                                @ 501\n                        _ sendSuccess\n                            @ response\n                            {\n                                @ data ${md.name}\n            v08/ts/handler( get${md.Names} )\n                _ this.${md.Name}Model.find\n                    {\n                    =>\n                        param err\n                        param ${md.name}\n                        if err\n                            _ sendFailure\n                                @ response\n                                @ err\n                                @ 501\n                        _ sendSuccess\n                            @ response\n                            {\n                                @ data ${md.name}\n            v08/ts/handler( get${md.Name}ById )\n                _ this.${md.Name}Model.findById\n                    @ request.params.id\n                    =>\n                        param err\n                            :any\n                        param ${md.name}\n                            :ref I${md.Name}\n                        if err\n                            _ sendFailure\n                                @ response\n                                @ err\n                                @ 501\n                        _ sendSuccess\n                            @ response\n                            {\n                                @ data ${md.name}\n            $if md.fkey\n                v08/ts/handler( get${md.Name}By_${md.fkey} )\n                    _ this.${md.Name}Model.find\n                        {\n                            @ _id request.params.id\n                            @ ${md.fkey} request.params.${md.fkey}\n                        =>\n                            param err\n                            param ${md.name}\n                            if err\n                                _ sendFailure\n                                    @ response\n                                    @ err\n                                    @ 501\n                            _ sendSuccess\n                                @ response\n                                {\n                                    @ data ${md.name}\n            $foreach field in md.fields\n                $if field.unique\n                    v08/ts/handler( get${md.Name}By_${field.name} )\n                        _ this.${md.Name}Model.find\n                            {\n                                @ ${field.name} request.params.${field.name}\n                            =>\n                                param err\n                                param ${md.name}\n                                if err\n                                    _ sendFailure\n                                        @ response\n                                        @ err\n                                        @ 501\n                                _ sendSuccess\n                                    @ response\n                                    {\n                                        @ data ${md.name}\n                $elif field.type == 'arrayRef'\n                    v08/ts/handler( add_${field.path}\n                        _ this.${md.Name}Model.updateOne\n                            {\n                                @ _id request.params.id\n                                { $push\n                                    { ${field.name}\n                                        @ _id request.params.${field.path}\n                            =>\n                                param err\n                                    :any\n                                if err\n                                    _ sendFailure\n                                        @ response\n                                        @ err\n                                        @ 501\n                                _ sendSuccess\n                                    @ response\n                                    {\n                                        @ message 'Successfully added ${field.path} to ${md.Name}!'\n                    v08/ts/handler( remove_${field.path}\n                        _ this.${md.Name}Model.updateOne\n                            {\n                                @ _id request.params.id\n                                { $pull\n                                    { ${field.name}\n                                        @ _id request.params.${field.path}\n                            =>\n                                param err\n                                    :any\n                                if err\n                                    _ sendFailure\n                                        @ response\n                                        @ err\n                                        @ 501\n                                _ sendSuccess\n                                    @ response\n                                    {\n                                        @ message 'Successfully deleted ${field.path} from ${md.Name}!'\n            $if md.indexes\n                $foreach index in md.indexes\n                    $if index.fields.length > 1\n                        v08/ts/handler( get${md.Name}By_${index.name} )\n                            _ this.${md.Name}Model.find\n                                {\n                                    $foreach field in index.fields\n                                        @ ${field.name} request.params.${field.name}\n                                =>\n                                    param err\n                                    param ${md.name}\n                                    if err\n                                        _ sendFailure\n                                            @ response\n                                            @ err\n                                            @ 501\n                                    _ sendSuccess\n                                        @ response\n                                        {\n                                            @ data ${md.name}\n            v08/ts/handler( update${md.Name} )\n                # Note that update(), updateMany(), findOneAndUpdate(), etc. do not execute save() middleware.\n                # If you need save middleware and full validation, first query for the document and then save() it.\n                _ this.${md.Name}Model.findOneAndUpdate\n                    {\n                        @ _id request.params.id\n                    @ request.body\n                    {\n                        @ new true\n                    =>\n                        param err\n                        param ${md.name}\n                        if err\n                            _ sendFailure\n                                @ response\n                                @ err\n                                @ 501\n                        _ sendSuccess\n                            @ response\n                            {\n                                @ data ${md.name}\n            v08/ts/handler( delete${md.Name} )\n                _ this.${md.Name}Model.remove\n                    {\n                        @ _id request.params.id\n                    =>\n                        param err\n                        if err\n                            _ sendFailure\n                                @ response\n                                @ err\n                                @ 501\n                        _ sendSuccess\n                            @ response\n                            {\n                                @ message 'Successfully deleted ${md.name}!'\n"
      },
      "t/v08/mongo/type.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    export\n        :type I${md.Name}\n            :{\n                $foreach field in md.fields\n                    $if field.type != 'oid'\n                        :p ${field.name}\n                            $if field.type == 'date'\n                                :ref Date\n                            $elif ['number','integer','float','decimal'].indexOf(field.type) > -1\n                                :number\n                            $elif field.type == 'arrayRef'\n                                :[\n                                    :ref I${field.refSchema}\n                            $elif field.type == 'objectRef'\n                                :ref I${field.refSchema}\n                            $else\n                                :string\n                $if md.setUpdatedAt\n                    :p updated_at\n                        :ref Date\n    export\n        :interface I${md.Name}Model\n            :extends I${md.Name}\n            :extends Document\n"
      },
      "t/v08/mongo/crud/delete_api.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    +\n    export\n        async-function delete${md.Name}\n            $if md.update_delete_by_id\n                param id\n                    :string\n            $foreach item in md.fields\n                param ${item.name}\n                    $if item.type == 'date'\n                        :ref Date\n                    $elif item.type == 'buffer'\n                        :ref Buffer\n                    $elif item.type == 'object'\n                        :{\n                    $elif item.type == 'array'\n                        :[\n                    $else\n                        :${item.type}\n                    :optional\n            :return\n                :ref Promise\n                    :param\n                        :ref CRUDResult\n            +\n            _ console.log\n                @ myname\n                @ 'delete${md.Name}'\n                $foreach item in md.query\n                    @ ${item.name}\n            +\n            const ${md.Name} = Get${md.Name}Model()\n            +\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        +\n                        let query\n                            {\n                                $if md.update_delete_by_id\n                                    @ _id id\n                                $else\n                                    $foreach item in md.query\n                                        @ ${item.name} ${item.name}\n                        +\n                        _ ${md.Name}.deleteOne\n                            @ query\n                            =>\n                                param err\n                                    :any\n                                if err\n                                    log myname, 'delete${md.Name}', '${md.Name}.deleteOne', 'error', err\n                                    return reject(err)\n                                _ resolve\n                                    {\n                                        @ oper 'delete'\n                                        @ ok true\n                                        @ message '${md.descr}'\n"
      },
      "t/v08/mongo/crud/create_api.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    +\n    export\n        async-function create${md.Name}\n            $foreach item in md.fields\n                param ${item.name}\n                    $if item.type == 'date'\n                        :ref Date\n                    $elif item.type == 'buffer'\n                        :ref Buffer\n                    $elif item.type == 'object'\n                        :{\n                    $elif item.type == 'array'\n                        :[\n                    $else\n                        :${item.type}\n                    :optional\n            :return\n                :ref Promise\n                    :param\n                        :ref CRUDResult\n            +\n            _ console.log\n                @ myname\n                @ 'create${md.Name}'\n                $foreach item in md.fields\n                    @ ${item.name}\n            +\n            const ${md.Name} = Get${md.Name}Model()\n            +\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        +\n                        let query\n                            {\n                                $foreach item in md.query\n                                    @ ${item.name} ${item.name}\n                        +\n                        _ ${md.Name}.find\n                            @ query\n                            =>\n                                param err\n                                    :any\n                                param result\n                                    :any\n                                if err\n                                    log myname, 'get${md.Name}', '${md.Name}.find', 'error', err\n                                    return reject(err)\n                                log myname, 'get${md.Name}', '${md.Name}.find', 'result', result\n                                if result.length > 0\n                                    return\n                                        _ resolve\n                                            {\n                                                @ oper 'create'\n                                                @ ok false\n                                                @ message '${md.descr} already exists'\n                                const new${md.Name}\n                                    new ${md.Name}\n                                        {\n                                            $foreach item in md.fields\n                                                @ ${item.name} ${item.name}\n                                            $if md.created_at\n                                                @ created_at new Date()\n                                            $if md.updated_at\n                                                @ updated_at new Date()\n                                _ new${md.Name}.save\n                                    function\n                                        param err\n                                            :any\n                                        param doc\n                                            :any\n                                        if err\n                                            log myname, 'create${md.Name}', 'new${md.Name}.save', 'error', err\n                                            return reject(err)\n                                        return\n                                            _ resolve\n                                                {\n                                                    @ oper 'create'\n                                                    @ ok true\n                                                    @ item doc._doc\n                                                    @ message '${md.descr} created'\n"
      },
      "t/v08/mongo/crud/get_api.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    +\n    export\n        async-function get${md.Name}\n            $foreach item in md.query\n                param ${item.name}\n                    $if item.type == 'date'\n                        :ref Date\n                    $elif item.type == 'buffer'\n                        :ref Buffer\n                    $elif item.type == 'object'\n                        :{\n                    $elif item.type == 'array'\n                        :[\n                    $else\n                        :${item.type}\n            :return\n                :ref Promise\n                    :param\n                        :ref CRUDResult\n            +\n            _ console.log\n                @ myname\n                @ 'get${md.Name}'\n                $foreach item in md.query\n                    @ ${item.name}\n            +\n            const ${md.Name} = Get${md.Name}Model()\n            +\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        +\n                        let query\n                            {\n                                $foreach item in md.query\n                                    @ ${item.name} ${item.name}\n                        +\n                        _ ${md.Name}.find\n                            @ query\n                            =>\n                                param err\n                                    :any\n                                param result\n                                    :any\n                                if err\n                                    log myname, 'get${md.Name}', '${md.Name}.find', 'error', err\n                                    return reject(err)\n                                if result.length == 1\n                                    return\n                                        _ resolve\n                                            {\n                                                @ oper 'get'\n                                                @ ok true\n                                                @ item result[0]\n                                _ resolve\n                                    {\n                                        @ oper 'get'\n                                        @ ok false\n                                        @ message '${md.descr} not found'\n    +\n    export\n        async-function get${md.Name}ById\n            param id\n                :string\n            :return\n                :ref Promise\n                    :param\n                        :ref CRUDResult\n            +\n            _ console.log\n                @ myname\n                @ 'get${md.Name}ById'\n                @ id\n            +\n            const ${md.Name} = Get${md.Name}Model()\n            +\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        +\n                        _ ${md.Name}.find\n                            {\n                                @ _id id\n                            =>\n                                param err\n                                    :any\n                                param result\n                                    :ref I${md.Name}Model[]\n                                if err\n                                    log myname, 'get${md.Name}', '${md.Name}.find', 'error', err\n                                    return reject(err)\n                                if result.length == 1\n                                    return\n                                        _ resolve\n                                            {\n                                                @ oper 'get'\n                                                @ ok true\n                                                @ item result[0]\n                                _ resolve\n                                    {\n                                        @ oper 'get'\n                                        @ ok false\n                                        @ message '${md.descr} not found'\n"
      },
      "t/v08/mongo/crud/get_list_api.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    +\n    export\n        async-function getList${md.Name}\n            param options\n                :any\n                :optional\n            :return\n                :ref Promise\n                    :param\n                        :ref CRUDResult\n            set options = options || {}\n            +\n            _ console.log\n                @ myname\n                @ 'getList${md.Name}'\n                @ 'options'\n                @ options\n            +\n            const ${md.Name} = Get${md.Name}Model()\n            +\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        +\n                        const query = ${md.Name}.find(options.query);\n                        if options.limit\n                            _ query.limit(options.limit);\n                        if options.sort\n                            _ query.sort(options.sort);\n                        _ query.find\n                            =>\n                                param err\n                                    :any\n                                param result\n                                    :any\n                                if err\n                                    log myname, 'getList${md.Name}', '${md.Name}.find', 'error', err\n                                    return reject(err)\n                                const resultItem = []\n                                foreach item in result\n                                    const item_obj\n                                        {\n                                            @ _id item._id\n                                            @ id item.id\n                                            $foreach item in md.fields\n                                                @ ${item.name} item.${item.name}\n                                    _ resultItem.push\n                                        @ item_obj\n                                _ resolve\n                                    {\n                                        @ oper 'getList'\n                                        @ ok true\n                                        @ item resultItem\n"
      },
      "t/v08/mongo/crud/model.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    import\n        @ Schema\n        @ Model\n        @ model\n        from \"mongoose\"\n    import\n        @ ModelBuilderType\n        from \"../../app/types\"\n    import\n        @ I${md.Name}Model\n        from \"../types\"\n    +\n    const ${md.Name}Schema\n        :ref Schema\n            :param\n                :ref I${md.Name}Model\n        =\n            new Schema\n                {\n                    $hook fields\n    +\n    $hook\n    +\n    export\n        :type ${md.Name}ModelType\n            :ref Model\n                :param\n                    :ref I${md.Name}Model\n        # mongoose models creation is centralized\n        # the mongodb service calls buildModel() when starting, after connection has been established\n        # controllers call Get${md.Name}Model() when initialized, after buildModel() has benn called\n    +\n    let ${md.Name}Model\n        :ref ${md.Name}ModelType\n    +\n    export\n        function Get${md.Name}Model\n            :return\n                :ref ${md.Name}ModelType\n            return ${md.Name}Model\n    +\n    export\n        const ${md.Name}ModelBuilder\n            :ref ModelBuilderType\n            =\n                {\n                    @ buildModel\n                        =>\n                            set ${md.Name}Model =\n                                _ model\n                                    :param\n                                        :ref I${md.Name}Model\n                                    @ \"${md.Name}\"\n                                    @ ${md.Name}Schema\n"
      },
      "t/v08/mongo/crud/modeltype.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    +\n    export\n        :type I${md.Name}\n            :{\n                $hook fields\n    +\n    $hook\n    +\n    :type I${md.Name}_doc\n        :{\n            :p _doc\n                :ref I${md.Name}\n    +\n    export\n        :interface I${md.Name}Model\n            :extends I${md.Name}\n            :extends I${md.Name}_doc\n            :extends Document\n"
      },
      "t/v08/mongo/crud/update_api.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    +\n    export\n        async-function update${md.Name}\n            $if md.update_delete_by_id\n                param id\n                    :string\n            $foreach item in md.fields\n                param ${item.name}\n                    $if item.type == 'date'\n                        :ref Date\n                    $elif item.type == 'buffer'\n                        :ref Buffer\n                    $elif item.type == 'object'\n                        :{\n                    $elif item.type == 'array'\n                        :[\n                    $else\n                        :${item.type}\n                    :optional\n            :return\n                :ref Promise\n                    :param\n                        :ref CRUDResult\n            +\n            _ console.log\n                @ myname\n                @ 'update${md.Name}'\n                $foreach item in md.fields\n                    @ ${item.name}\n            +\n            const ${md.Name} = Get${md.Name}Model()\n            +\n            return\n                new Promise\n                    =>\n                        param resolve\n                        param reject\n                        +\n                        const query\n                            {\n                                $if md.update_delete_by_id\n                                    @ _id id\n                                $else\n                                    $foreach item in md.query\n                                        @ ${item.name} ${item.name}\n                        const update\n                            :any\n                            {\n                        $foreach item in md.fields\n                            if typeof ${item.name} !== 'undefined'\n                                set update['${item.name}'] = ${item.name}\n                        $if md.updated_at\n                            set update['updated_at'] = new Date()\n                        +\n                        _ ${md.Name}.findOneAndUpdate\n                            @ query\n                            @ update\n                            {\n                            =>\n                                param err\n                                    :any\n                                param result\n                                    :any\n                                if err\n                                    log myname, 'update${md.Name}', '${md.Name}.findOneAndUpdate', 'error', err\n                                    return reject(err)\n                                +\n                                return\n                                    _ resolve\n                                        {\n                                            @ oper 'update'\n                                            @ ok true\n                                            @ message '${md.descr} updated'\n"
      },
      "t/v08/package/browser.json.ittf": {
        "type": "CODE",
        "contents": "$group\n    $if wzCtx.Build.useReactCreateApp\n        { browserslist\n            [ production\n                \">0.2%\"\n                \"not dead\"\n                \"not op_mini all\"\n            [ development\n                \"last 1 chrome version\"\n                \"last 1 firefox version\"\n                \"last 1 safari version\"\n"
      },
      "t/v08/package/devDependencies.json.ittf": {
        "type": "CODE",
        "contents": "$group\n    $if wzCtx.Build.useBabel || wzCtx.Build.useWebpack\n        $if wzCtx.Build.useVExpo\n            @babel/cli \"^7.12.16\"\n            @babel/core \"^7.12.16\"\n        $else\n            @babel/cli \"^7.14.5\"\n            @babel/core \"^7.13.10\"\n        $if wzCtx.Build.useVExpo\n            @babel/plugin-proposal-class-properties \"^7.12.13\"\n            @babel/plugin-syntax-dynamic-import \"^7.8.3\"\n            @babel/plugin-transform-modules-commonjs \"^7.12.13\"\n        $if wzCtx.Build.babel.useExtra\n            @babel/plugin-proposal-class-properties \"^7.12.1\"\n            @babel/plugin-proposal-export-namespace-from \"^7.12.1\"\n            @babel/plugin-proposal-object-rest-spread \"^7.12.1\"\n            @babel/plugin-proposal-throw-expressions \"^7.12.1\"\n            @babel/plugin-syntax-dynamic-import \"^7.8.3\"\n            @babel/polyfill \"^7.12.1\"\n        $if wzCtx.Build.useVExpo\n            @babel/preset-env \"^7.12.16\"\n        $else\n            @babel/preset-env \"^7.13.12\"\n    $if wzCtx.Build.useReact && !!wzCtx.Build.useReactCreateApp == false\n        $if wzCtx.Build.useVExpo\n            @babel/preset-react \"^7.12.13\"\n        $else\n            @babel/preset-react \"^7.12.13\"\n    $if wzCtx.Build.useTypescript\n        $if wzCtx.Build.useWebpack || wzCtx.Build.useWebpackApp\n            $if wzCtx.Build.useVExpo\n                @babel/preset-typescript \"^7.12.16\"\n            $else\n                @babel/preset-typescript \"^7.13.0\"\n    $if wzCtx.Build.useStorybook\n        @storybook/addon-actions \"^6.2.8\"\n        @storybook/addon-essentials \"^6.2.8\"\n        @storybook/addon-links \"^6.2.8\"\n        @storybook/addon-docs \"^6.2.8\"\n        @storybook/react \"^6.2.8\"\n    $if wzCtx.Build.useTypescript\n        $if wzCtx.Build.useExpress && wzCtx.Build.useCompression\n            @types/compression \"^1.7.0\"\n        $if wzCtx.Build.useExpress && wzCtx.Build.useFlash\n            @types/connect-flash \"^0.0.37\"\n        $if wzCtx.Build.useMongoDb\n        $if wzCtx.Build.useExpress && wzCtx.Build.useCors\n            @types/cors \"^2.8.10\"\n        @types/express \"^4.16.1\"\n        $if wzCtx.Build.utils.useEscapeHtml\n            @types/escape-html \"^1.0.1\"\n        $if wzCtx.Build.utils.useGitUrlParse\n            @types/git-url-parse \"^9.0.0\"\n        $if wzCtx.Build.useExpress && wzCtx.Build.express.useHelmet\n            @types/helmet \"^4.0.0\"\n        $if wzCtx.Build.useJest\n            @types/jest \"^26.0.15\"\n        $if wzCtx.Build.utils.useJsCookie\n            @types/js-cookie \"^2.2.0\"\n        $if wzCtx.Build.isClientServer || wzCtx.Build.isServer\n            @types/jsesc \"latest\"\n        $if wzCtx.Build.utils.useJsonToAst\n            @types/json-to-ast \"^2.1.1\"\n        $if wzCtx.Build.utils.useStringifySafe\n            @types/json-stringify-safe \"^5.0.0\"\n        $if wzCtx.Build.useExpress\n            $if wzCtx.Build.useJwt\n                @types/express-jwt \"^6.0.1\"\n            $if wzCtx.Build.useSession\n                @types/express-session \"^1.15.12\"\n        $if wzCtx.Build.useExpress\n            $if wzCtx.Build.express.useErrors\n                @types/http-errors \"^1.8.2\"\n        $if wzCtx.Build.utils.useLodash\n            @types/lodash \"^4.14.120\"\n        $if wzCtx.Build.useMarked\n            $if wzCtx.Build.useVExpo\n                @types/marked \"^1.2.2\"\n            $else\n                @types/marked \"^2.0.2\"\n        $if wzCtx.Build.useMongoDb\n        $if wzCtx.Build.useExpress && wzCtx.Build.useLogger\n            $if wzCtx.Build.logger.useMorgan\n                @types/morgan \"^1.9.3\"\n        @types/node \"^12.0.0\"\n        $if wzCtx.Build.useGithub\n            @types/node-fetch \"^2.1.6\"\n        $if wzCtx.Build.utils.useParseUrl\n            @types/parseurl \"^1.3.1\"\n        $if (wzCtx.Build.styles && wzCtx.Build.styles.usePalx) || wzCtx.Build.useStorybook\n            @types/palx \"^1.0.1\"\n        $if wzCtx.Build.usePrettier\n            @types/prettier \"^2.0.0\"\n        $if wzCtx.Build.usePrismjs\n            @types/prismjs \"^1.9.0\"\n        $if wzCtx.Build.utils.useQueryString\n            @types/query-string \"^5.1.0\"\n        $if wzCtx.Build.useReact\n            $if wzCtx.Build.useTypescript\n                $if wzCtx.Build.react.useV16\n                    @types/react \"^16.8.2\"\n                    @types/react-dom \"^16.8.0\"\n                $if wzCtx.Build.react.useV17\n                    @types/react \"^17.0.3\"\n                    @types/react-dom \"^17.0.3\"\n                $else\n                    @types/react \"^17.0.6\"\n                    @types/react-dom \"^17.0.6\"\n                $if wzCtx.Build.react.useDate\n                    @types/react-datepicker \"^3.1.8\"\n                $if wzCtx.Build.react.useRedux\n                    @types/react-redux \"^7.0.1\"\n                $if wzCtx.Build.react.useRouter\n                    @types/react-router-dom \"^4.3.1\"\n                $if wzCtx.Build.react.useSelect\n                    @types/react-select \"^4.0.15\"\n                $if wzCtx.Build.react.useSyntaxHighlighter\n                    @types/react-syntax-highlighter \"^13.5.1\"\n                $if wzCtx.Build.react.useTextareaAutosize\n                    @types/react-textarea-autosize \"^4.3.3\"\n                $if wzCtx.Build.react.useVirtualized\n                    @types/react-virtualized \"^9.18.12\"\n        $if wzCtx.Build.useRegeneratorRuntime\n            @types/regenerator-runtime \"^0.13.0\"\n        $if wzCtx.Build.utils.useSanitizeHtml\n            @types/sanitize-html \"^1.18.2\"\n        $if wzCtx.Build.useStyledComponents\n            @types/styled-components \"^5.1.7\"\n        $if wzCtx.Build.useStyledSystem\n            @types/styled-system \"^5.1.11\"\n            @types/styled-system__theme-get \"^5.0.1\"\n        $if wzCtx.Build.useStorybook\n            @types/storybook__react \"^5.2.1\"\n        $if wzCtx.Build.useWebpack || wzCtx.Build.useWebpackApp\n            $if wzCtx.Build.useVExpo\n            $else\n                @types/webpack \"^5.28.0\"\n                @types/webpack-dev-middleware \"^4.1.2\"\n                $if wzCtx.Build.webpack.useDevServer\n                    @types/webpack-dev-server \"^4.10.0\"\n        $if wzCtx.Build.useLint\n            @typescript-eslint/parser \"^5.33.0\"\n            @typescript-eslint/eslint-plugin \"^5.33.0\"\n    $if wzCtx.Build.useLint\n        babel-eslint \"^8.2.3\"\n    $if wzCtx.Build.useTest && wzCtx.Build.test.useJest\n        babel-jest \"^23.4.2\"\n    $if wzCtx.Build.useBabel || wzCtx.Build.useWebpack\n        babel-loader \"^8.2.2\"\n    $if wzCtx.Build.useBabel || wzCtx.Build.useWebpack\n        babel-plugin-add-module-exports \"^1.0.4\"\n    $if wzCtx.Build.isClientServer\n        babel-plugin-file-loader \"latest\"\n    $if (wzCtx.Build.useBabel || wzCtx.Build.useWebpack) && wzCtx.Build.utils.useLodash\n        babel-plugin-lodash \"^3.3.4\"\n    $if wzCtx.Build.useBabel\n        $if wzCtx.Build.useWebpack\n            $if wzCtx.Build.webpack.useCodeSplitting\n                babel-plugin-webpack-chunkname \"^1.2.0\"\n    $if wzCtx.Build.usePrismjs\n        babel-plugin-prismjs \"^2.0.1\"\n    $if wzCtx.Build.useExpress && wzCtx.Build.useTypescript\n        copyfiles \"^2.4.1\"\n    $if wzCtx.Build.useWebpack\n        $if wzCtx.Build.webpack.useCopy\n            copy-webpack-plugin \"^4.5.1\"\n    $if (wzCtx.Build.useWebpack && wzCtx.Build.webpack.useCss) || wzCtx.Build.useWebpackApp\n        css-loader \"^5.0.1\"\n        $if wzCtx.Build.useTypescript\n            css-modules-typescript-loader \"^4.0.1\"\n    $if wzCtx.Build.useEnvCmd\n        env-cmd \"^10.1.0\"\n    $if wzCtx.Build.useTest && wzCtx.Build.test.useEnzime\n        enzyme \"^3.3.0\"\n        enzyme-adapter-react-16 \"^1.1.1\"\n    $if wzCtx.Build.useLint\n        eslint \"^8.21.0\"\n        $if wzCtx.Build.useJavascript\n            $if wzCtx.Build.lint.useAirbnb\n                eslint-config-airbnb \"^18.2.1\"\n            $if wzCtx.Build.useTest && wzCtx.Build.test.useJest\n                eslint-config-jest-enzyme \"^6.0.2\"\n            $if wzCtx.Build.usePrettier\n                eslint-config-prettier \"^8.2.0\"\n        eslint-config-standard \"^17.0.0\"\n        $if wzCtx.Build.useBabel\n            eslint-plugin-babel \"^5.3.1\"\n        eslint-plugin-import \"^2.26.0\"\n        $if wzCtx.Build.useTest && wzCtx.Build.test.useJest\n            eslint-plugin-jest \"^21.18.0\"\n        $if wzCtx.Build.useJavascript\n            eslint-plugin-jsx-a11y \"^6.4.1\"\n        eslint-plugin-n \"^15.2.4\"\n        $if wzCtx.Build.usePrettier\n            eslint-plugin-prettier \"^4.2.1\"\n        eslint-plugin-promise \"^6.0.0\"\n        $if wzCtx.Build.useReact\n            eslint-plugin-react \"^7.23.2\"\n            $if wzCtx.Build.react.useRedux\n                eslint-plugin-react-redux \"^3.3.2\"\n        eslint-plugin-standard \"^5.0.0\"\n    $if wzCtx.Build.useWebpack || wzCtx.Build.useWebpackApp\n        file-loader \"^6.2.0\"\n    $if wzCtx.Build.useHighlight\n        highlight.js \"10.6.0\"\n    $if wzCtx.Build.useWebpack\n        $if wzCtx.Build.webpack.useHtml\n            html-loader \"^2.0.0\"\n            html-webpack-plugin \"^5.1.0\"\n    $if wzCtx.Build.useHusky\n        husky \"^1.1.2\"\n    $if wzCtx.Build.useTest && wzCtx.Build.test.useJest\n        jest \"^23.4.2\"\n    $if wzCtx.Build.useLint\n        lint-staged \"^7.3.0\"\n    $if wzCtx.Build.useWebpack\n        $if wzCtx.Build.webpack.useMiniCssExtract\n            mini-css-extract-plugin \"^1.3.5\"\n    $if wzCtx.Build.useNetlify\n        netlify-lambda \"^0.4.0\"\n    $if wzCtx.Build.useWebpack\n        $if wzCtx.Build.webpack.useSass\n            node-sass \"5.0.0\"\n    $if wzCtx.Build.useExpress || (wzCtx.Build.isClient && wzCtx.Build.useExistingDevServer)\n        nodemon \"^2.0.19\"\n    $if wzCtx.Build.useWebpack\n        $if wzCtx.Build.webpack.useOptimizeCss\n            optimize-css-assets-webpack-plugin \"^4.0.0\"\n    $if wzCtx.Build.useTailwindcss\n        postcss \"^8.1.13\"\n        postcss-cli \"^8.3.1\"\n    $if wzCtx.Build.usePrettier\n        prettier \"^2.2.1\"\n    $if wzCtx.Build.useReact  && !!wzCtx.Build.useReactCreateApp == false\n        prop-types \"^15.7.2\"\n    $if wzCtx.Build.useStorybook\n        react-docgen-typescript \"^1.22.0\"\n    $if wzCtx.Build.useExpress && wzCtx.Build.useTypescript\n        rimraf \"^3.0.2\"\n    $if wzCtx.Build.useWebpack\n        $if wzCtx.Build.webpack.useSass\n            sass-loader \"10.1.1\"\n        $if wzCtx.Build.webpack.useCss\n            style-loader \"^2.0.0\"\n    $if wzCtx.Build.useTailwindcss\n        tailwindcss \"^2.0.4\"\n    $if wzCtx.Build.useWebpack || wzCtx.Build.useWebpackApp\n        $if wzCtx.Build.useTypescript\n            ts-loader \"^8.1.0\"\n    $if wzCtx.Build.useTypescript\n        ts-node \"^10.8.1\"\n        ts-node-dev \"^1.1.6\"\n        typescript \"^4.2.3\"\n    $if wzCtx.Build.useWebpack\n        $if wzCtx.Build.webpack.useUglifyJS\n            uglifyjs-webpack-plugin \"^1.2.5\"\n    $if wzCtx.Build.useVue\n        vue \"^2.5.22\"\n        vue-loader \"^15.6.0\"\n        vue-style-loader \"^4.1.2\"\n        vue-template-compiler \"^2.5.22\"\n        $if wzCtx.Build.vue.useVuex\n            vuex \"^3.1.0\"\n        $if wzCtx.Build.vue.useVueRouter\n            vue-router \"^3.0.2\"\n        $if wzCtx.Build.vue.useVuetify\n            vuetify \"^1.4.3\"\n    $if wzCtx.Build.useWebpack\n        $if wzCtx.Build.useVExpo\n            webpack \"^4.29.0\"\n            webpack-cli \"^3.2.1\"\n            webpack-dev-middleware \"^3.5.1\"\n            webpack-stats-plugin \"^0.2.1\"\n            worker-plugin \"^3.0.0\"\n        $else\n            webpack \"^5.28.0\"\n            webpack-cli \"^4.5.0\"\n    $if wzCtx.Build.useWebpackApp\n        webpack-dev-middleware \"4.1.0\"\n    $if wzCtx.Build.useWebpack\n        $if wzCtx.Build.webpack.useDevServer\n            webpack-dev-server \"^4.10.0\"\n        $if wzCtx.Build.webpack.useMerge\n            webpack-merge \"^4.1.3\"\n        $if wzCtx.Build.webpack.useStatsWriter\n            webpack-stats-plugin \"^1.0.3\"\n        $if wzCtx.Build.webpack.useVisualizer\n            webpack-visualizer-plugin \"^0.1.11\"\n        $if wzCtx.Build.webpack.useWorker\n            worker-plugin \"^5.0.0\"\n"
      },
      "t/v08/package/resolutions.json.ittf": {
        "type": "CODE",
        "contents": "$group\n    \n    $if wzCtx.Build.useResolutions\n        { resolutions\n            $if wzCtx.Build.useBabel\n                $if wzCtx.Build.babel.useResolutions\n                    $foreach item in wzCtx.Build.babel.resolutions\n                        ${item.name} \"${item.value}\"\n"
      },
      "t/v08/package/scripts.json.ittf": {
        "type": "CODE",
        "contents": "$group\n    \n    $if wzCtx.Build.isClientServer\n        $if wzCtx.Build.useWebpack\n            $if wzCtx.Build.webpack.useEnv\n                serve:client \"env-cmd -f deploy/client/development.env webpack serve --open --mode development\"\n                build:client \"env-cmd -f deploy/client/development.env webpack --mode development\"\n                build:client:prod \"env-cmd -f deploy/client/production.env webpack --mode production\"\n            $else\n                serve:client \"webpack serve --open --mode development\"\n                build:client \"webpack --mode development\"\n                build:client:prod \"webpack --mode production\"\n        $if wzCtx.Build.useExpress\n            $if wzCtx.Build.useTypescript\n                start \"set NODE_ENV=development && nodemon --watch src/** --ext ts,json --ignore src/**/*.spec.ts --exec ./node_modules/.bin/ts-node src/server/index.ts\"\n                watch \"env-cmd -f deploy/client/development.env tsnd --require tsconfig-paths/register --inspect=9211 --quiet src/server/index.ts\"\n                build:server \"babel --source-maps --extensions '.ts,.tsx' --out-dir build/ src/\"\n    $if wzCtx.Build.isServer\n        $if wzCtx.Build.useExpress\n            $if wzCtx.Build.useTypescript\n                start \"set NODE_ENV=development && nodemon --watch src/** --ext ts,json --ignore src/**/*.spec.ts --exec ./node_modules/.bin/ts-node src/index.ts\"\n                watch \"env-cmd -f deploy/development.env tsnd --require tsconfig-paths/register --inspect=9211 --quiet src/index.ts\"\n                build:server \"babel --source-maps --extensions '.ts,.tsx' --out-dir build/ src/\"\n    $if wzCtx.Build.isClient\n        $if wzCtx.Build.useTypescript\n            serve:client \"env-cmd -f deploy/client/development.env webpack serve --open --mode development\"\n            build:client \"env-cmd -f deploy/client/development.env webpack --mode development\"\n            build:client:prod \"env-cmd -f deploy/client/production.env webpack --mode production\"\n        $if wzCtx.Build.useExistingDevServer\n            start \"set NODE_ENV=development && nodemon --watch server/** --ext js,json --ignore src/**/*.spec.ts --exec node ${wzCtx.Build.existingDevServer.execPath}\"\n    $elif wzCtx.Build.useWebpack\n        $if wzCtx.Build.webpack.useDevAndProd\n            start \"webpack serve --mode development --config ./webpack.base.config.js --open --hot --history-api-fallback --env.PLATFORM=local --env.VERSION=stag\"\n            prebuild \"webpack --mode production --config ./webpack.prod.config.js --env.PLATFORM=production --env.VERSION=stag --progress\"\n            build \"node server\"\n        $else\n            $if wzCtx.Build.webpack.useEnv\n                start \"env-cmd -f deploy/development.env webpack serve --open --mode development\"\n                build \"env-cmd -f deploy/development.env webpack --mode development\"\n                build:prod \"env-cmd -f deploy/production.env webpack --mode production\"\n            $else\n                start \"webpack serve --open --mode development\"\n                build \"webpack --mode development\"\n                build:prod \"webpack --mode production\"\n    $elif wzCtx.Build.useReactCreateApp\n        start \"react-scripts start\"\n        build \"react-scripts build\"\n        test \"react-scripts test\"\n        eject \"react-scripts eject\"\n    $elif wzCtx.Build.useGatsby\n        develop \"gatsby develop\"\n        start \"gatsby develop\"\n        build \"gatsby build\"\n        serve \"gatsby serve\"\n        clean \"gatsby clean\"\n    $elif wzCtx.Build.useExpress\n        $if wzCtx.Build.useNetlify\n            $if wzCtx.Build.useLocalServer\n                build \"netlify-lambda build ${wzCtx.Build.netlify.functionsFolder}\"\n                start \"nodemon server-local.js\"\n            $else\n                start \"cross-env NODE_ENV=dev npm-run-all --parallel start:app start:server\"\n                start:app \"react-scripts start\"\n                start:server \"netlify-lambda serve functions\"\n                build \"npm-run-all --parallel build:**\"\n                build:app \"react-scripts build\"\n                build:functions \"netlify-lambda build functions\"\n                test \"react-scripts test --env=jsdom\"\n        $else\n            $if wzCtx.Build.useTypescript\n                $if wzCtx.Build.isClientServer\n                    start \"set NODE_ENV=development && nodemon --watch src/** --ext ts,json --ignore src/**/*.spec.ts --exec ./node_modules/.bin/ts-node src/server/index.ts\"\n                    start:dist \"set NODE_ENV=development && node ../Application/src/server/index.ts\"\n                $else\n                    start \"set NODE_ENV=development && nodemon --watch src/** --ext ts,json --ignore src/**/*.spec.ts --exec ./node_modules/.bin/ts-node src/index.ts\"\n                    start:dist \"set NODE_ENV=development && node ../Application/src/index.js\"\n                    start:bin \"set NODE_ENV=development && node ../Application/bin/www\"\n                $if wzCtx.Build.useAzure\n                    build \"rimraf ../Application && tsc\"\n                    distfiles \"copyfiles bin/** ittf/** src/t/** src/site/views/** .env .deployment server.js Web.config.xml Web.Debug.config.xml ../Application && copyfiles -f predeploy/.gitignore predeploy/** ../Application && copyfiles -f predeploy/.gitignore ../Tests\"\n                $if wzCtx.Build.useHeroku\n                    build \"rimraf ./deploy/src && tsc\"\n                    distfiles \"copyfiles public/** ittf/** src/t/** src/site/views/** .env server.js ./deploy && copyfiles -f predeploy/.gitignore predeploy/** ./deploy\"\n            $else\n                start \"set NODE_ENV=development && nodemon src/index && start ${wzCtx.App.baseUrl}\"\n        $if wzCtx.Build.express.useSslCert\n            certificate \"C:\\\"Program Files\"\\Git\\usr\\ssl\\openssl.exe req -nodes -new -x509 -keyout server.key -out server.cert\"\n    $if wzCtx.Build.useLint\n        $ var debug = false;\n        $if wzCtx.Build.useTypescript\n            $if wzCtx.Build.typescript.useTsxFiles\n                lint \"eslint -c ./.eslintrc.js ./src/**/*.ts ./src/**/*.tsx ${debug ? '--debug' : ''}\"\n                lint:write \"eslint -c ./.eslintrc.js --fix ./src/**/*.ts ./src/**/*.tsx ${debug ? '--debug' : ''}\"\n            $else\n                lint \"eslint -c ./.eslintrc.js ./src/**/*.ts ${debug ? '--debug' : ''}\"\n                lint:write \"eslint -c ./.eslintrc.js --fix ./src/**/*.ts ${debug ? '--debug' : ''}\"\n        $else\n            lint \"eslint -c ./.eslintrc.js ./src/**/*.js ${debug ? '--debug' : ''}\"\n            lint:write \"eslint -c ./.eslintrc.js --fix ./src/**/*.js ${debug ? '--debug' : ''}\"\n    $if wzCtx.Build.useTest && wzCtx.Build.test.useJest\n        test \"jest\"\n        test:watch \"jest --watch\"\n        test:coverage \"jest --coverage --colors\"\n    $if wzCtx.Build.usePrettier\n        $if wzCtx.Build.useTypescript\n            $if wzCtx.Build.typescript.useTsxFiles\n                prettier \"prettier --write src/**/*.ts src/**/*.tsx\"\n            $else\n                prettier \"prettier --write src/**/*.ts\"\n        $else\n            prettier \"prettier --write src/**/*.js\"\n    $if wzCtx.Build.useTailwindcss\n        $if wzCtx.Build.isClientServer\n            build-css \"tailwindcss build src/server/styles/tailwind.css -o static/styles/tailwind.css\"\n            postcss \"postcss src/server/styles/tailwind.css -o static/styles/tailwind.css\"\n        $elif wzCtx.Build.isServer\n            build-css \"tailwindcss build src/styles/tailwind.css -o static/styles/tailwind.css\"\n            postcss \"postcss src/styles/tailwind.css -o static/styles/tailwind.css\"\n        $else\n            build-css \"tailwindcss build src/styles/tailwind.css -o static/styles/tailwind.css\"\n            postcss \"postcss src/styles/tailwind.css -o static/styles/tailwind.css\"\n    $if wzCtx.Build.useStorybook\n        storybook \"start-storybook -p 6006\"\n        build-storybook \"build-storybook\"\n"
      },
      "t/v08/package/tools.json.ittf": {
        "type": "CODE",
        "contents": "$group\n    \n    $if wzCtx.Build.useLint && (wzCtx.Build.useReact || wzCtx.Build.useJest)\n        { eslintConfig\n            [ extends\n                $if wzCtx.Build.useReact\n                    \"react-app\"\n                $if wzCtx.Build.useJest\n                    \"react-app/jest\"\n    \n    $if wzCtx.Build.useLint && wzCtx.Build.lint.useHusky\n        { husky\n            { hooks\n                pre-commit \"lint-staged\"\n        { lint-staged\n            [ *.(js|jsx)\n                \"npm run lint:write\"\n                \"git add\"\n"
      },
      "t/v08/package/dependencies.json.ittf": {
        "type": "CODE",
        "contents": "$group\n    \n    $if wzCtx.Build.useAzure && wzCtx.Build.azure.useSecrets\n        @azure/identity \"^2.0.4\"\n        @azure/keyvault-secrets \"^4.4.0\"\n    \n    $if wzCtx.Build.useBabel\n        $if wzCtx.Build.babel.useParser\n            @babel/parser \"^7.12.16\"\n        $if wzCtx.Build.useRegeneratorRuntime\n            @babel/polyfill \"^7.12.1\"\n        $if wzCtx.Build.babel.useRuntime\n            @babel/runtime \"^7.12.5\"\n    $if wzCtx.Build.useExpoStyles\n        @expo/styleguide \"^2.1.4\"\n    $if wzCtx.Build.useReact && wzCtx.Build.useStyledSystem\n        @styled-system/theme-get \"^5.1.2\"\n    \n    $if wzCtx.Build.useReact\n        $if wzCtx.Build.react.useMaterialUI\n            $if wzCtx.Build.react.materialUI.usePickers\n                @date-io/date-fns \"^1.3.6\"\n            $if wzCtx.Build.react.useV16\n                @material-ui/core \"^4.11.2\"\n            $else\n                @material-ui/core \"^4.11.3\"\n            $if wzCtx.Build.react.materialUI.useIcons\n                $if wzCtx.Build.react.useV16\n                    @material-ui/icons \"^4.11.2\"\n                $else\n                    @material-ui/icons \"^4.11.2\"\n            $if wzCtx.Build.react.materialUI.useLab\n                @material-ui/lab \"^4.0.0-alpha.14\"\n            $if wzCtx.Build.react.materialUI.usePickers\n                @material-ui/pickers \"^3.0.0\"\n            @material-ui/styles \"^4.11.2\"\n    \n    $if wzCtx.Build.useAphrodite\n        aphrodite \"^2.4.0\"\n    $if wzCtx.Build.useTailwindcss\n        autoprefixer \"^10.0.2\"\n    $if wzCtx.Build.utils.useAxios\n        axios \"^0.21.1\"\n    $if wzCtx.Build.useExpress\n        $if wzCtx.Build.useNetlify\n            aws-serverless-express \"^3.2.0\"\n    $if wzCtx.Build.useExpress\n        body-parser \"^1.18.3\"\n    $if wzCtx.Build.useBootstrap\n        bootstrap \"^4.1.3\"\n    \n    $if wzCtx.Build.useReact && !!wzCtx.Build.useReactCreateApp == false\n        classnames \"^2.2.6\"\n    $if wzCtx.Build.useExpress && wzCtx.Build.useFlash\n        connect-flash \"^0.1.1\"\n    $if wzCtx.Build.useMongoDb\n        connect-mongo \"^4.4.1\"\n    $if wzCtx.Build.useReact && wzCtx.Build.react.useRouter && wzCtx.Build.react.useRedux\n        connected-react-router \"^6.9.1\"\n    $if wzCtx.Build.useExpress\n        $if wzCtx.Build.useCompression\n            compression \"^1.7.2\"\n        $if wzCtx.Build.useCookie\n            cookie \"^0.4.1\"\n    $if wzCtx.Build.useVExpo\n        core-js \"^3.6.5\"\n    $if wzCtx.Build.useExpress && wzCtx.Build.useCors\n        cors \"^2.8.4\"\n    $if wzCtx.Build.useCrypto\n        crypto \"^1.0.1\"\n    \n    $if wzCtx.Build.utils.useDateFns || wzCtx.Build.useReact && wzCtx.Build.react.useDate\n        date-fns \"^2.0.0\"\n    $elif wzCtx.Build.useReact\n        $if wzCtx.Build.react.useMaterialUI\n            $if wzCtx.Build.react.materialUI.usePickers\n                date-fns \"2.0.0\"\n    $elif wzCtx.Build.useExpress\n        debug \"~2.6.9\"\n    $if wzCtx.Build.useDomHelpers\n        dom-helpers \"^3.4.0\"\n    \n    $if wzCtx.Build.useConfig && wzCtx.Build.config.useEnvalid\n        dotenv \"16.0.1\"\n    $if wzCtx.Build.useReact\n        $if wzCtx.Build.react.useDraftJs\n            draft-js \"^0.10.5\"\n    $if wzCtx.Build.useConfig && wzCtx.Build.config.useEnvalid\n        envalid \"^7.0.0\"\n    $if wzCtx.Build.utils.useEs6Error\n        es6-error \"^4.1.1\"\n    $if wzCtx.Build.utils.useEscapeHtml\n        escape-html \"^1.0.3\"\n    $if wzCtx.Build.utils.useEscapeRegexp\n        escape-string-regexp \"^4.0.0\"\n    $if wzCtx.Build.useExpress\n        express \"^4.16.3\"\n        $if wzCtx.Build.useJwt\n            express-jwt \"^6.0.0\"\n        $if wzCtx.Build.useSession\n            express-session \"^1.17.1\"\n    \n    $if wzCtx.Build.utils.useFetchPonyfill\n        fetch-ponyfill \"^7.1.0\"\n    $if wzCtx.Build.useReact\n        $if wzCtx.Build.react.useFormik\n            formik \"^1.5.7\"\n    \n    $group\n        $if wzCtx.Build.useGatsby\n            gatsby \"^2.32.3\"\n    $if wzCtx.Build.utils.useGitUrlParse\n        git-url-parse \"^11.4.4\"\n    $if wzCtx.Build.useGraphql\n        graphql \"^15.5.0\"\n        graphql-request \"^3.4.0\"\n    \n    $if wzCtx.Build.useHelmet\n        helmet \"^5.1.1\"\n    $if wzCtx.Build.useReact\n        $if wzCtx.Build.useHoistNonReactStatic\n            hoist-non-react-statics \"^3.3.2\"\n    $if wzCtx.Build.useExpress\n        $if wzCtx.Build.express.useErrors\n            http-errors \"^2.0.0\"\n    \n    $if wzCtx.Build.useFetch\n        isomorphic-fetch \"^2.2.1\"\n    $if wzCtx.Build.useGithub\n        isomorphic-git \"^1.19.2\"\n    $if wzCtx.Build.useIsomorphicUnfetch\n        isomorphic-unfetch \"^3.0.0\"\n    \n    $if wzCtx.Build.utils.useJsCookie\n        js-cookie \"^2.2.1\"\n    $if wzCtx.Build.isClientServer || wzCtx.Build.isServer\n        jsesc \"^2.5.2\"\n    $if wzCtx.Build.utils.useStringifySafe\n        json-stringify-safe \"^5.0.1\"\n    $if wzCtx.Build.utils.useJsonToAst\n        json-to-ast \"^2.1.0\"\n    $if wzCtx.Build.useJwt\n        jsonwebtoken \"^8.5.1\"\n    $if wzCtx.Build.useAuthorization\n        jwks-rsa \"^1.4.0\"\n    \n    $if wzCtx.Build.useMarked\n        $if wzCtx.Build.useVExpo\n            marked \"^2.0.0\"\n        $else\n            marked \"^2.0.3\"\n    $if wzCtx.Build.useMonacoEditor\n        $if wzCtx.Build.useVExpo\n            monaco-editor \"^0.18.1\"\n        $else\n            monaco-editor \"^0.23.0\"\n    $if wzCtx.Build.useMoment\n        moment \"^2.24.0\"\n    $if wzCtx.Build.useMongoDb\n        mongoose \"^6.5.2\"\n    $if wzCtx.Build.useExpress && wzCtx.Build.useLogger\n        $if wzCtx.Build.logger.useMorgan\n            morgan \"^1.10.0\"\n    \n    $if wzCtx.Build.utils.useNanoId\n        nanoid \"^3.1.22\"\n    $if wzCtx.Build.utils.useNodeCache\n        node-cache \"^5.1.2\"\n    $if wzCtx.Build.useGithub\n        node-fetch \"^2.6.1\"\n    $if wzCtx.Build.utils.useNullThrows\n        nullthrows \"^1.1.1\"\n    \n    $if (wzCtx.Build.styles && wzCtx.Build.styles.usePalx) || wzCtx.Build.useStorybook\n        palx '^1.0.3'\n    $if wzCtx.Build.utils.useParseUrl\n        parseurl \"^1.3.3\"\n    $if wzCtx.Build.usePrismjs\n        prismjs \"^1.21.0\"\n    $if wzCtx.Build.usePostgres\n        pg \"^8.8.0\"\n        connect-pg-simple \"^7.0.0\"\n    \n    $if wzCtx.Build.utils.useQueryString\n        query-string \"^7.0.0\"\n    \n    $group\n        $if wzCtx.Build.useReact\n            $if wzCtx.Build.react.useV16\n                react \"^16.8.1\"\n                react-dom \"^16.8.1\"\n            $elif wzCtx.Build.react.useV17\n                react \"^17.0.1\"\n                react-dom \"^17.0.1\"\n            $else\n                react \"^17.0.2\"\n                react-dom \"^17.0.2\"\n            $if wzCtx.Build.react.useDate\n                react-datepicker \"^4.1.1\"\n            $if wzCtx.Build.react.useFontawesome\n                react-fontawesome \"^1.6.1\"\n            $if wzCtx.Build.react.useHelmetAsync\n                react-helmet-async \"^1.0.9\"\n            $if wzCtx.Build.react.usePerfectScrollbar\n                react-perfect-scrollbar \"^1.4.4\"\n            $if wzCtx.Build.react.useRange\n                react-range \"^1.8.9\"\n            $if wzCtx.Build.react.useRedux\n                react-redux \"^7.2.2\"\n                $if wzCtx.Build.react.redux.useFirestore\n                    react-redux-firebase \"^2.2.6\"\n            $if wzCtx.Build.react.useRouter\n                react-router-dom \"^5.2.0\"\n            $if wzCtx.Build.useReactCreateApp\n                react-scripts \"^4.0.3\"\n            $if wzCtx.Build.react.useSelect\n                react-select \"^4.3.0\"\n            $if wzCtx.Build.react.useSimpleCodeEditor\n                react-simple-code-editor \"^0.11.0\"\n            $if wzCtx.Build.react.useSyntaxHighlighter\n                react-syntax-highlighter \"^15.4.3\"\n            $if wzCtx.Build.react.useTextareaAutosize\n                react-textarea-autosize \"^8.3.2\"\n            $if wzCtx.Build.react.transition\n                react-transition-group \"^2.4.0\"\n            $if wzCtx.Build.react.useVirtualized\n                react-virtualized \"^9.22.3\"\n            $if wzCtx.Build.react.useRecompose_stopped_25_06_2022\n                recompose \"^0.30.0\"\n        $if wzCtx.Build.useGatsby\n            react \"^16.13.1\"\n            react-dom \"^16.13.1\"\n    \n    $group\n        $if wzCtx.Build.useReact\n            $if wzCtx.Build.react.useRedux\n                redux \"^4.0.5\"\n                $if wzCtx.Build.react.redux.useAuth\n                    redux-auth-wrapper \"^2.1.0\"\n                $if wzCtx.Build.react.redux.useFirestore\n                    redux-firestore \"^0.8.0\"\n                $if wzCtx.Build.react.redux.useForm\n                    redux-form \"^8.2.0\"\n            $if wzCtx.Build.react.useRedux\n                $if wzCtx.Build.react.redux.useThunk\n                    redux-thunk \"^2.3.0\"\n                $if wzCtx.Build.react.redux.useSaga\n                    redux-saga \"^1.1.3\"\n    $if wzCtx.Build.useReact_stopped_25_06_2022\n        recompose \"^0.30.0\"\n    $if wzCtx.Build.useRegeneratorRuntime\n        regenerator-runtime \"^0.13.7\"\n    \n    $if wzCtx.Build.utils.useSanitizeHtml\n        sanitize-html \"^2.3.3\"\n    $if wzCtx.Build.useExpress\n        $if wzCtx.Build.useNetlify\n            serverless-http \"^1.6.0\"\n    $if wzCtx.Build.useSocketIO\n        socket.io-client \"^2.2.0\"\n    $if wzCtx.Build.useReact && wzCtx.Build.useStyledComponents\n        styled-components \"^5.2.1\"\n    $if wzCtx.Build.useReact && wzCtx.Build.useStyledSystem\n        styled-system \"^5.1.5\"\n    \n    $if wzCtx.Build.useTypescript\n        tslib \"^2.4.0\"\n    $if wzCtx.Build.useReact\n        $if wzCtx.Build.react.useRedux\n            $if wzCtx.Build.react.redux.useSaga\n                typesafe-actions \"^5.1.0\"\n    \n    $if wzCtx.Build.useUnderscore\n        underscore \"^1.9.1\"\n    \n    $if wzCtx.Build.useValidateJs\n        validate.js \"^0.12.0\"\n    $if wzCtx.Build.useVue\n        vue \"^2.5.17\"\n        vue-server-renderer \"^2.5.17\"\n    \n    $if wzCtx.Build.utils.useWebVitals\n        web-vitals \"^1.0.1\"\n    $if wzCtx.Build.useWizzi\n        wizzi \"^0.7.32\"\n        $if false\n            wizzi.proto \"^0.0.1\"\n        wizzi-tools \"^0.7.4\"\n        wizzi-utils \"^0.7.19\"\n        wizzi-core \"^0.7.7\"\n        wizzi-web \"^0.7.14\"\n        wizzi-js \"^0.7.11\"\n    \n    $if wzCtx.Build.useYup\n        yup \"^0.27.0\"\n"
      },
      "t/v08/sequelize/attributes.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &fields\n    $\n        function getType(name) {\n            if (name == 'string') return 'STRING';\n            else if (name == 'number') return 'NUMBER';\n            else return name.toUpperCase();\n        }\n        function getDefaultValue(value, type) {\n            if (['string', 'text', 'citext'].indexOf(type) > -1) return '\"' + value + '\"';\n            else return value;\n        }\n    +++\n    $foreach fd in fields\n        { ${fd.name}\n            @ type DataTypes.${getType(fd.type)}\n            $if !!fd.allowNull == true\n                @ allowNull false\n            $else\n                # allowNull defaults to true\n            $if fd.defaultValue && fd.defaultValue.length > 0\n                @ defaultValue ${getDefaultValue(fd.defaultValue, fd.type)}\n            $if fd.autoIncrement\n                @ autoIncrement true\n            $if fd.primaryKey\n                @ primaryKey true\n            $if fd.comment && fd.comment.length > 0\n                @ comment ${fd.comment)}\n            $if fd.references\n                { references\n                @ model ${fd.references.model}\n                @ key ${fd.references.key}\n                @ deferrable Deferrable.${fd.references.deferrable}\n"
      },
      "t/v08/sequelize/model.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &tb\n    $\n        var fields = tb.fields;\n    +++\n    class ${tb.Name}\n        super Model\n        m associate\n            static\n            param models\n            $if tb.__db.relations\n                $foreach r in tb.__db.relations\n                    $if r.kind == \"one-to-many\"\n                        $if r.ltable == tb.Name\n                            _ ${tb.Name}.hasMany\n                                @ models.${r.rtable}\n                                {\n                                $if r.foreignKey\n                                    @ foreignKey \"${r.foreignKey}\"\n                        $if r.rtable == tb.Name\n                            _ ${tb.Name}.belongsTo\n                                @ models.${r.ltable}\n                                {\n                                $if r.foreignKey\n                                    @ foreignKey \"${r.foreignKey}\"\n                    $if r.kind == \"one-to-one\"\n                        $if r.ltable == tb.Name\n                            _ ${tb.Name}.hasOne\n                                @ models.${r.rtable}\n                                {\n                                $if r.foreignKey\n                                    { foreignKey\n                                    $if r.foreignKey.name\n                                        @ name \"${r.foreignKey.name}\"\n                                    $if r.foreignKey.allowNull == false\n                                        @ allowNull false\n            #\n                #\n                # Helper method for defining associations.\n                # This method is not a part of Sequelize lifecycle.\n                #\n    _ ${tb.Name}.init\n        {\n            ./attributes(&fields)\n        {\n            @ sequelize\n            @ modelName \"${tb.Name}\"\n            @ updatedAt \"updated_at\"\n            @ createdAt \"created_at\"\n"
      },
      "t/v08/sequelize/modelBuilder.ts.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &tb\n    import\n        @ Sequelize\n        @ Model\n        @ DataTypes\n        from 'sequelize'\n    import\n        @ ModelBuilderType\n        from \"../../app/types\"\n    #\n        import\n            @ I${tb.Name}Model\n            from \"../types\"\n    +\n    let ${tb.Name}Model\n        :ref Model\n    +\n    function createModel\n        param sequelize\n            :ref Sequelize\n        ./model(&tb)\n        return ${tb.Name}\n    +\n    export\n        function Get${tb.Name}Model\n            $*\n            :return\n                :ref ${tb.Name}ModelType\n            *$\n            return ${tb.Name}Model\n    +\n    export\n        const ${tb.Name}ModelBuilder\n            :ref ModelBuilderType\n            =\n                {\n                    @ buildModel\n                        =>\n                            param sequelize\n                                :ref Sequelize\n                            set ${tb.Name}Model\n                                _ createModel\n                                @ sequelize\n                            return ${tb.Name}Model\n                    @ associateModel\n                        =>\n                            param models\n                                :[\n                                    :ref Sequelize\n                            _ ${tb.Name}Model.associate\n                                @ models\n"
      },
      "t/v08/styles/tailwind.css.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &md\n    + @tailwind base;\n    + @tailwind components;\n    + @tailwind utilities;\n"
      },
      "t/v08/ts/authHandler.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params name\n    +\n    p ${name}\n        :private\n        async=>\n            param request\n                :ref AuthRequest\n            param response\n                :ref Response\n            $hook\n"
      },
      "t/v08/ts/catch_error_page.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params message\n    ._ catch\n        =>\n            param err\n                :any\n            _ response.render\n                @ 'error.html.ittf'\n                {\n                    @ message '${message}'\n                    @ error err\n"
      },
      "t/v08/ts/catch_fail.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params method\n    ._ catch\n        =>\n            param err\n                :any\n            log '${method}.error', err\n            _ sendFailure\n                @ response\n                {\n                    @ err err\n                @ 501\n"
      },
      "t/v08/ts/catch_fail_html.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params method\n    ._ catch\n        =>\n            param err\n                :any\n            log '${method}.error', err\n            var content = err\n            if typeof err === 'object' && err !== null\n                set content = '<html><body><pre><code>' + JSON.stringify(err, null, 4) + '</code></pre></body></html>'\n            _ sendHtml\n                @ response\n                @ content\n"
      },
      "t/v08/ts/catch_reject.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params method\n    ._ catch\n        =>\n            param err\n                :any\n            log '${method}.error', err\n            return reject(err)\n"
      },
      "t/v08/ts/catch_send_fail.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params method\n    ._ catch\n        =>\n            param err\n                :any\n            log '${method}.error', err\n            _ sendFailure\n                @ response\n                {\n                    @ err err\n                @ 501\n"
      },
      "t/v08/ts/controller.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params &ctrl\n    import\n        @ Router\n        @ Request\n        @ Response\n        from 'express'\n    import\n        @ ControllerType\n        @ AppInitializerType\n        $if ctrl.kind == 'site'\n            from '../../features/app/types'\n        $else\n            from '../../../features/app/types'\n    $if ctrl.isAuth\n        import\n            @ AuthRequest\n            $if ctrl.kind == 'site'\n                from '../../features/auth/types'\n            $else\n                from '../../../features/auth/types'\n    $if ctrl.apiSecured || ctrl.webSecured\n        import\n            $if ctrl.apiSecured\n                @ apiSecured\n            $if ctrl.webSecured\n                @ webSecured\n            $if ctrl.kind == 'site'\n                from '../../middlewares/index'\n            $else\n                from '../../../middlewares/index'\n    import\n        @ sendHtml\n        @ sendSuccess\n        @ sendPromiseResult\n        @ sendFailure\n        $if ctrl.kind == 'site'\n            from '../../utils/sendResponse'\n        $else\n            from '../../../utils/sendResponse'\n    import\n        @ FcError\n        @ SYSTEM_ERROR\n        $if ctrl.kind == 'site'\n            from '../../utils/error'\n        $else\n            from '../../../utils/error'\n    import\n        @ statusCode\n        $if ctrl.kind == 'site'\n            from '../../utils'\n        $else\n            from '../../../utils'\n    $if ctrl.modelName\n        import\n            @ I${ctrl.modelName}\n            from '../types'\n    $hook imports\n    +\n    function makeHandlerAwareOfAsyncErrors\n        param handler\n        return\n            async-function\n                param request\n                    :ref Request\n                param response\n                    :ref Response\n                param next\n                    :ref Function\n                log 'makeHandlerAwareOfAsyncErrors called'\n                try\n                    await\n                        _ handler(request, response, next)\n                    log 'makeHandlerAwareOfAsyncErrors ok'\n                catch error\n                    if error instanceof FcError\n                        _ response.status(statusCode.BAD_REQUEST).send\n                            {\n                                @ code error.code\n                                @ message error.message\n                                @ data\n                                    ||\n                                        + error.data\n                                        {\n                    else\n                        const fcError = new FcError(SYSTEM_ERROR)\n                        _ response.status(statusCode.BAD_REQUEST).send\n                            {\n                                @ code fcError.code\n                                @ message error.message\n                                @ data\n                                    ||\n                                        + fcError.data\n                                        {\n    +\n    export\n        class ${ctrl.name}Controller\n            :implements ControllerType\n            +\n            p path\n                :public\n                = '${ctrl.path}'\n            +\n            p router\n                :public\n                _ Router()\n            $if ctrl.modelName\n                +\n                p ${ctrl.modelName}Model\n                    :public\n                    :ref ${ctrl.modelName}ModelType\n            +\n            $hook properties\n            +\n            => initialize\n                param initValues\n                    :ref AppInitializerType\n                warn 'Entering ${ctrl.name}Controller.initialize'\n                $if ctrl.modelName\n                    set this.${ctrl.modelName}Model\n                        _ Get${ctrl.modelName}Model\n                $hook\n            $hook handlers\n"
      },
      "t/v08/ts/else_send_fail.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params method, err\n    else\n        log '${method}.error', ${err}\n        _ sendFailure\n            @ response\n            {\n                @ err ${err}\n            @ 501\n"
      },
      "t/v08/ts/handler.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params name\n    +\n    p ${name}\n        :private\n        async=>\n            param request\n                :ref Request\n            param response\n                :ref Response\n            $hook\n"
      },
      "t/v08/ts/route.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params method, path, handler\n    _ this.router.${method}\n        @ \"${path}\"\n        _ makeHandlerAwareOfAsyncErrors(${handler})\n"
      },
      "t/v08/ts/route_api_secured.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params method, path, handler\n    _ this.router.${method}\n        @ \"${path}\"\n        _ makeHandlerAwareOfAsyncErrors(apiSecured)\n        _ makeHandlerAwareOfAsyncErrors(${handler})\n"
      },
      "t/v08/ts/route_web_secured.ittf": {
        "type": "CODE",
        "contents": "$group\n    $params method, path, handler\n    _ this.router.${method}\n        @ \"${path}\"\n        _ makeHandlerAwareOfAsyncErrors(webSecured)\n        _ makeHandlerAwareOfAsyncErrors(${handler})\n"
      },
      "t/v08/ts/tsconfig.json.ittf": {
        "type": "CODE",
        "contents": "$group\n    \n    { compilerOptions\n        target \"es6\"\n        module \"commonjs\"\n        moduleResolution \"node\"\n        { paths\n            *\n                [\n                    \"node_modules/*\"\n        esModuleInterop true\n        jsx \"react-jsx\"\n        sourceMap true\n        rootDir \"./\"\n        $if wzCtx.Build.useAzure\n            outDir \"../Application\"\n        $elif wzCtx.Build.useHeroku\n            outDir \"./deploy\"\n        $else\n            outDir \"./dist\"\n        baseUrl \".\"\n        importHelpers true\n        $if wzCtx.Build.typescript.useStrict\n            strict true\n    [ include\n        \"src/**/*\"\n        $hook include\n    [ exclude\n        \"src/**/*.spec.*\"\n"
      }
    }
  }
]